// Autogenerated with StateSmith 0.17.3+aeaec62eb40cb019edc54b99a499dc6d3188e91c.
// Algorithm: Balanced2. See https://github.com/StateSmith/StateSmith/wiki/Algorithms

#include "Lightbulb.hpp"
#include <stdbool.h> // required for `consume_event` flag
#include <string.h> // for memset


// Starts the state machine. Must be called before dispatching events. Not thread safe.
void Lightbulb::start()
{
    ROOT_enter();
    // ROOT behavior
    // uml: TransitionTo(ROOT.<InitialState>)
    {
        // Step 1: Exit states until we reach `ROOT` state (Least Common Ancestor for transition). Already at LCA, no exiting required.
        
        // Step 2: Transition action: ``.
        
        // Step 3: Enter/move towards transition target `ROOT.<InitialState>`.
        // ROOT.<InitialState> is a pseudo state and cannot have an `enter` trigger.
        
        // ROOT.<InitialState> behavior
        // uml: TransitionTo(Off)
        {
            // Step 1: Exit states until we reach `ROOT` state (Least Common Ancestor for transition). Already at LCA, no exiting required.
            
            // Step 2: Transition action: ``.
            
            // Step 3: Enter/move towards transition target `Off`.
            OFF_enter();
            
            // Step 4: complete transition. Ends event dispatch. No other behaviors are checked.
            return;
        } // end of behavior for ROOT.<InitialState>
    } // end of behavior for ROOT
}

// Dispatches an event to the state machine. Not thread safe.
// Note! This function assumes that the `eventId` parameter is valid.
void Lightbulb::dispatchEvent(EventId eventId)
{
    
    switch (this->stateId)
    {
        // STATE: Lightbulb
        case StateId::ROOT:
            // state and ancestors have no handler for `switch` event.
            break;
        
        // STATE: Off
        case StateId::OFF:
            OFF_switch(); 
            break;
        
        // STATE: On
        case StateId::ON:
            ON_switch(); 
            break;
    }
    
}

// This function is used when StateSmith doesn't know what the active leaf state is at
// compile time due to sub states or when multiple states need to be exited.
void Lightbulb::exitUpToStateHandler(StateId desiredState)
{
    while (this->stateId != desiredState)
    {
        switch (this->stateId)
        {
            case StateId::OFF: OFF_exit(); break;
            
            case StateId::ON: ON_exit(); break;
            
            default: return;  // Just to be safe. Prevents infinite loop if state ID memory is somehow corrupted.
        }
    }
}


////////////////////////////////////////////////////////////////////////////////
// event handlers for state ROOT
////////////////////////////////////////////////////////////////////////////////

void Lightbulb::ROOT_enter()
{
    this->stateId = StateId::ROOT;
}


////////////////////////////////////////////////////////////////////////////////
// event handlers for state OFF
////////////////////////////////////////////////////////////////////////////////

void Lightbulb::OFF_enter()
{
    this->stateId = StateId::OFF;
    
    // Off behavior
    // uml: enter / { callback.enter_off(); }
    {
        // Step 1: execute action `callback.enter_off();`
        callback.enter_off();
    } // end of behavior for Off
}

void Lightbulb::OFF_exit()
{
    this->stateId = StateId::ROOT;
}

void Lightbulb::OFF_switch()
{
    // Off behavior
    // uml: Switch TransitionTo(On)
    {
        // Step 1: Exit states until we reach `ROOT` state (Least Common Ancestor for transition).
        OFF_exit();
        
        // Step 2: Transition action: ``.
        
        // Step 3: Enter/move towards transition target `On`.
        ON_enter();
        
        // Step 4: complete transition. Ends event dispatch. No other behaviors are checked.
        return;
    } // end of behavior for Off
    
    // No ancestor handles this event.
}


////////////////////////////////////////////////////////////////////////////////
// event handlers for state ON
////////////////////////////////////////////////////////////////////////////////

void Lightbulb::ON_enter()
{
    this->stateId = StateId::ON;
    
    // On behavior
    // uml: enter / { callback.enter_on(); }
    {
        // Step 1: execute action `callback.enter_on();`
        callback.enter_on();
    } // end of behavior for On
}

void Lightbulb::ON_exit()
{
    this->stateId = StateId::ROOT;
}

void Lightbulb::ON_switch()
{
    // On behavior
    // uml: Switch TransitionTo(Off)
    {
        // Step 1: Exit states until we reach `ROOT` state (Least Common Ancestor for transition).
        ON_exit();
        
        // Step 2: Transition action: ``.
        
        // Step 3: Enter/move towards transition target `Off`.
        OFF_enter();
        
        // Step 4: complete transition. Ends event dispatch. No other behaviors are checked.
        return;
    } // end of behavior for On
    
    // No ancestor handles this event.
}

// Thread safe.
char const * Lightbulb::stateIdToString(StateId id)
{
    switch (id)
    {
        case StateId::ROOT: return "ROOT";
        case StateId::OFF: return "OFF";
        case StateId::ON: return "ON";
        default: return "?";
    }
}

// Thread safe.
char const * Lightbulb::eventIdToString(EventId id)
{
    switch (id)
    {
        case EventId::SWITCH: return "SWITCH";
        default: return "?";
    }
}
