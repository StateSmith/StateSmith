// Autogenerated with StateSmith.
// Algorithm: Balanced2. See https://github.com/StateSmith/StateSmith/wiki/Algorithms

#pragma once  // You can also specify normal include guard. See https://github.com/StateSmith/StateSmith/blob/main/docs/settings.md
#include <stdint.h>

// Generated state machine
class DefaultSmBase {};
template <typename Base = DefaultSmBase>
class RocketSm : Base
{
public:
    enum class EventId: uint8_t
    {
        EV1 = 0,
        EV2 = 1,
    };
    
    enum
    {
        EventIdCount = 2
    };
    
    enum class StateId: uint8_t
    {
        ROOT = 0,
        GROUP = 1,
        G1 = 2,
        G2 = 3,
        S1 = 4,
    };
    
    enum
    {
        StateIdCount = 5
    };
    
    // Used internally by state machine. Feel free to inspect, but don't modify.
    StateId stateId;
    
    // State machine constructor. Must be called before start or dispatch event functions. Not thread safe.
    RocketSm()
    {
    }
    
    // Starts the state machine. Must be called before dispatching events. Not thread safe.
    void start();
    
    // Dispatches an event to the state machine. Not thread safe.
    // Note! This function assumes that the `eventId` parameter is valid.
    void dispatchEvent(EventId eventId);
    
    // Thread safe.
    static char const * stateIdToString(StateId id);
    
    // Thread safe.
    static char const * eventIdToString(EventId id);


// ################################### PRIVATE MEMBERS ###################################
private:
    
    // This function is used when StateSmith doesn't know what the active leaf state is at
    // compile time due to sub states or when multiple states need to be exited.
    void exitUpToStateHandler(StateId desiredState);
    
    
    ////////////////////////////////////////////////////////////////////////////////
    // event handlers for state ROOT
    ////////////////////////////////////////////////////////////////////////////////
    
    void ROOT_enter();
    
    
    ////////////////////////////////////////////////////////////////////////////////
    // event handlers for state GROUP
    ////////////////////////////////////////////////////////////////////////////////
    
    void GROUP_enter();
    
    void GROUP_exit();
    
    void GROUP_ev1();
    
    
    ////////////////////////////////////////////////////////////////////////////////
    // event handlers for state G1
    ////////////////////////////////////////////////////////////////////////////////
    
    void G1_enter();
    
    void G1_exit();
    
    void G1_ev1();
    
    
    ////////////////////////////////////////////////////////////////////////////////
    // event handlers for state G2
    ////////////////////////////////////////////////////////////////////////////////
    
    void G2_enter();
    
    void G2_exit();
    
    void G2_ev2();
    
    
    ////////////////////////////////////////////////////////////////////////////////
    // event handlers for state S1
    ////////////////////////////////////////////////////////////////////////////////
    
    void S1_enter();
    
    void S1_exit();
};
template <typename Base>

    
    // Starts the state machine. Must be called before dispatching events. Not thread safe.
    void RocketSm<Base>::start()
    {
        ROOT_enter();
        // ROOT behavior
        // uml: TransitionTo(ROOT.<InitialState>)
        {
            // Step 1: Exit states until we reach `ROOT` state (Least Common Ancestor for transition). Already at LCA, no exiting required.
            
            // Step 2: Transition action: ``.
            
            // Step 3: Enter/move towards transition target `ROOT.<InitialState>`.
            // ROOT.<InitialState> is a pseudo state and cannot have an `enter` trigger.
            
            // ROOT.<InitialState> behavior
            // uml: TransitionTo(group)
            {
                // Step 1: Exit states until we reach `ROOT` state (Least Common Ancestor for transition). Already at LCA, no exiting required.
                
                // Step 2: Transition action: ``.
                
                // Step 3: Enter/move towards transition target `group`.
                GROUP_enter();
                
                // group.<InitialState> behavior
                // uml: TransitionTo(g1)
                {
                    // Step 1: Exit states until we reach `group` state (Least Common Ancestor for transition). Already at LCA, no exiting required.
                    
                    // Step 2: Transition action: ``.
                    
                    // Step 3: Enter/move towards transition target `g1`.
                    G1_enter();
                    
                    // Step 4: complete transition. Ends event dispatch. No other behaviors are checked.
                    return;
                } // end of behavior for group.<InitialState>
            } // end of behavior for ROOT.<InitialState>
        } // end of behavior for ROOT
    }
template <typename Base>

    
    // Dispatches an event to the state machine. Not thread safe.
    // Note! This function assumes that the `eventId` parameter is valid.
    void RocketSm<Base>::dispatchEvent(EventId eventId)
    {
        switch (this->stateId)
        {
            // STATE: RocketSm
            case StateId::ROOT:
                // No events handled by this state (or its ancestors).
                break;
            
            // STATE: group
            case StateId::GROUP:
                switch (eventId)
                {
                    case EventId::EV1: GROUP_ev1(); break;
                    
                    default: break; // to avoid "unused enumeration value in switch" warning
                }
                break;
            
            // STATE: g1
            case StateId::G1:
                switch (eventId)
                {
                    case EventId::EV1: G1_ev1(); break;
                    
                    default: break; // to avoid "unused enumeration value in switch" warning
                }
                break;
            
            // STATE: g2
            case StateId::G2:
                switch (eventId)
                {
                    case EventId::EV2: G2_ev2(); break;
                    case EventId::EV1: GROUP_ev1(); break; // First ancestor handler for this event
                    
                    default: break; // to avoid "unused enumeration value in switch" warning
                }
                break;
            
            // STATE: s1
            case StateId::S1:
                // No events handled by this state (or its ancestors).
                break;
        }
        
    }
template <typename Base>

    
    // This function is used when StateSmith doesn't know what the active leaf state is at
    // compile time due to sub states or when multiple states need to be exited.
    void RocketSm<Base>::exitUpToStateHandler(StateId desiredState)
    {
        while (this->stateId != desiredState)
        {
            switch (this->stateId)
            {
                case StateId::GROUP: GROUP_exit(); break;
                
                case StateId::G1: G1_exit(); break;
                
                case StateId::G2: G2_exit(); break;
                
                case StateId::S1: S1_exit(); break;
                
                default: return;  // Just to be safe. Prevents infinite loop if state ID memory is somehow corrupted.
            }
        }
    }
template <typename Base>

    
    
    ////////////////////////////////////////////////////////////////////////////////
    // event handlers for state ROOT
    ////////////////////////////////////////////////////////////////////////////////
    
    void RocketSm<Base>::ROOT_enter()
    {
        this->stateId = StateId::ROOT;
    }
template <typename Base>

    
    
    ////////////////////////////////////////////////////////////////////////////////
    // event handlers for state GROUP
    ////////////////////////////////////////////////////////////////////////////////
    
    void RocketSm<Base>::GROUP_enter()
    {
        this->stateId = StateId::GROUP;
    }
template <typename Base>

    
    void RocketSm<Base>::GROUP_exit()
    {
        this->stateId = StateId::ROOT;
    }
template <typename Base>

    
    void RocketSm<Base>::GROUP_ev1()
    {
        // group behavior
        // uml: EV1 TransitionTo(s1)
        {
            // Step 1: Exit states until we reach `ROOT` state (Least Common Ancestor for transition).
            exitUpToStateHandler(StateId::ROOT);
            
            // Step 2: Transition action: ``.
            
            // Step 3: Enter/move towards transition target `s1`.
            S1_enter();
            
            // Step 4: complete transition. Ends event dispatch. No other behaviors are checked.
            return;
        } // end of behavior for group
        
        // No ancestor handles this event.
    }
template <typename Base>

    
    
    ////////////////////////////////////////////////////////////////////////////////
    // event handlers for state G1
    ////////////////////////////////////////////////////////////////////////////////
    
    void RocketSm<Base>::G1_enter()
    {
        this->stateId = StateId::G1;
    }
template <typename Base>

    
    void RocketSm<Base>::G1_exit()
    {
        this->stateId = StateId::GROUP;
    }
template <typename Base>

    
    void RocketSm<Base>::G1_ev1()
    {
        bool consume_event = false;
        
        // g1 behavior
        // uml: EV1 [a > 20] TransitionTo(g2)
        if (a > 20)
        {
            // Step 1: Exit states until we reach `group` state (Least Common Ancestor for transition).
            G1_exit();
            
            // Step 2: Transition action: ``.
            
            // Step 3: Enter/move towards transition target `g2`.
            G2_enter();
            
            // Step 4: complete transition. Ends event dispatch. No other behaviors are checked.
            return;
        } // end of behavior for g1
        
        // Check if event has been consumed before calling ancestor handler.
        if (!consume_event)
        {
            GROUP_ev1();
        }
    }
template <typename Base>

    
    
    ////////////////////////////////////////////////////////////////////////////////
    // event handlers for state G2
    ////////////////////////////////////////////////////////////////////////////////
    
    void RocketSm<Base>::G2_enter()
    {
        this->stateId = StateId::G2;
    }
template <typename Base>

    
    void RocketSm<Base>::G2_exit()
    {
        this->stateId = StateId::GROUP;
    }
template <typename Base>

    
    void RocketSm<Base>::G2_ev2()
    {
        // g2 behavior
        // uml: EV2 TransitionTo(g1)
        {
            // Step 1: Exit states until we reach `group` state (Least Common Ancestor for transition).
            G2_exit();
            
            // Step 2: Transition action: ``.
            
            // Step 3: Enter/move towards transition target `g1`.
            G1_enter();
            
            // Step 4: complete transition. Ends event dispatch. No other behaviors are checked.
            return;
        } // end of behavior for g2
        
        // No ancestor handles this event.
    }
template <typename Base>

    
    
    ////////////////////////////////////////////////////////////////////////////////
    // event handlers for state S1
    ////////////////////////////////////////////////////////////////////////////////
    
    void RocketSm<Base>::S1_enter()
    {
        this->stateId = StateId::S1;
    }
template <typename Base>

    
    void RocketSm<Base>::S1_exit()
    {
        this->stateId = StateId::ROOT;
    }
template <typename Base>

    
    // Thread safe.
    char const * RocketSm<Base>::stateIdToString(StateId id)
    {
        switch (id)
        {
            case StateId::ROOT: return "ROOT";
            case StateId::GROUP: return "GROUP";
            case StateId::G1: return "G1";
            case StateId::G2: return "G2";
            case StateId::S1: return "S1";
            default: return "?";
        }
    }
template <typename Base>

    
    // Thread safe.
    char const * RocketSm<Base>::eventIdToString(EventId id)
    {
        switch (id)
        {
            case EventId::EV1: return "EV1";
            case EventId::EV2: return "EV2";
            default: return "?";
        }
    }
