// Autogenerated with StateSmith.
// Algorithm: Balanced2. See https://github.com/StateSmith/StateSmith/wiki/Algorithms

public class ____GilData_FileTop { }
// Generated state machine
public class Spec1Sm
{
public enum EventId
{
    EV1 = 0,
    EV2 = 1,
}

public const int EventIdCount = 2;

public enum StateId
{
    ROOT = 0,
    S = 1,
    S1 = 2,
    S11 = 3,
    T1 = 4,
    T11 = 5,
    T111 = 6,
}

public const int StateIdCount = 7;

    // Used internally by state machine. Feel free to inspect, but don't modify.
    public StateId state_id;

// State machine variables. Can be used for inputs, outputs, user variables...
public struct Vars
{
    public string ____GilData_FieldEchoStringVoid0;//"uint8_t count;"
}
    
    // Variables. Can be used for inputs, outputs, user variables...
    public Vars vars = new Vars();

// State machine constructor. Must be called before start or dispatch event functions. Not thread safe.
public Spec1Sm()
{
}

// Starts the state machine. Must be called before dispatching events. Not thread safe.
public void start()
{
    this.ROOT_enter();
    // ROOT behavior
    // uml: TransitionTo(ROOT.<InitialState>)
    {
        // Step 1: Exit states until we reach `ROOT` state (Least Common Ancestor for transition). Already at LCA, no exiting required.
        
        // Step 2: Transition action: ``.
        
        // Step 3: Enter/move towards transition target `ROOT.<InitialState>`.
        // ROOT.<InitialState> is a pseudo state and cannot have an `enter` trigger.
        
        // ROOT.<InitialState> behavior
        // uml: / { trace("Transition action `` for ROOT.<InitialState> to S."); } TransitionTo(S)
        {
            // Step 1: Exit states until we reach `ROOT` state (Least Common Ancestor for transition). Already at LCA, no exiting required.
            
            // Step 2: Transition action: `trace("Transition action `` for ROOT.<InitialState> to S.");`.
            ____GilData_EchoStringVoid("trace(\"Transition action `` for ROOT.<InitialState> to S.\");");
            
            // Step 3: Enter/move towards transition target `S`.
            this.S_enter();
            
            // S.<InitialState> behavior
            // uml: / { trace("Transition action `` for S.<InitialState> to S1."); } TransitionTo(S1)
            {
                // Step 1: Exit states until we reach `S` state (Least Common Ancestor for transition). Already at LCA, no exiting required.
                
                // Step 2: Transition action: `trace("Transition action `` for S.<InitialState> to S1.");`.
                ____GilData_EchoStringVoid("trace(\"Transition action `` for S.<InitialState> to S1.\");");
                
                // Step 3: Enter/move towards transition target `S1`.
                this.S1_enter();
                
                // Finish transition by calling pseudo state transition function.
                this.S1_InitialState_transition();
                return; // event processing immediately stops when a transition finishes. No other behaviors for this state are checked.
            } // end of behavior for S.<InitialState>
        } // end of behavior for ROOT.<InitialState>
    } // end of behavior for ROOT
}

// Dispatches an event to the state machine. Not thread safe.
// Note! This function assumes that the `event_id` parameter is valid.
public void dispatch_event(EventId event_id)
{
    switch (this.state_id)
    {
        // STATE: Spec1Sm
        case StateId.ROOT:
            // No events handled by this state (or its ancestors).
            break;
        
        // STATE: S
        case StateId.S:
            // No events handled by this state (or its ancestors).
            break;
        
        // STATE: S1
        case StateId.S1:
            // No events handled by this state (or its ancestors).
            break;
        
        // STATE: S11
        case StateId.S11:
            switch (event_id)
            {
                case EventId.EV1: this.S11_ev1(); break;
                
                default: break; // to avoid "unused enumeration value in switch" warning
            }
            break;
        
        // STATE: T1
        case StateId.T1:
            // No events handled by this state (or its ancestors).
            break;
        
        // STATE: T11
        case StateId.T11:
            switch (event_id)
            {
                case EventId.EV2: this.T11_ev2(); break;
                
                default: break; // to avoid "unused enumeration value in switch" warning
            }
            break;
        
        // STATE: T111
        case StateId.T111:
            switch (event_id)
            {
                case EventId.EV2: this.T11_ev2(); break; // First ancestor handler for this event
                
                default: break; // to avoid "unused enumeration value in switch" warning
            }
            break;
    }
    
}

// This function is used when StateSmith doesn't know what the active leaf state is at
// compile time due to sub states or when multiple states need to be exited.
private void exit_up_to_state_handler(StateId desired_state)
{
    while (this.state_id != desired_state)
    {
        switch (this.state_id)
        {
            case StateId.S: this.S_exit(); break;
            
            case StateId.S1: this.S1_exit(); break;
            
            case StateId.S11: this.S11_exit(); break;
            
            case StateId.T1: this.T1_exit(); break;
            
            case StateId.T11: this.T11_exit(); break;
            
            case StateId.T111: this.T111_exit(); break;
            
            default: return;  // Just to be safe. Prevents infinite loop if state ID memory is somehow corrupted.
        }
    }
}


////////////////////////////////////////////////////////////////////////////////
// event handlers for state ROOT
////////////////////////////////////////////////////////////////////////////////

private void ROOT_enter()
{
    this.state_id = StateId.ROOT;
    
    // ROOT behavior
    // uml: enter / { trace("Enter Spec1Sm."); }
    {
        // Step 1: execute action `trace("Enter Spec1Sm.");`
        ____GilData_EchoStringVoid("trace(\"Enter Spec1Sm.\");");
    } // end of behavior for ROOT
}


////////////////////////////////////////////////////////////////////////////////
// event handlers for state S
////////////////////////////////////////////////////////////////////////////////

private void S_enter()
{
    this.state_id = StateId.S;
    
    // S behavior
    // uml: enter / { trace("Enter S."); }
    {
        // Step 1: execute action `trace("Enter S.");`
        ____GilData_EchoStringVoid("trace(\"Enter S.\");");
    } // end of behavior for S
}

private void S_exit()
{
    // S behavior
    // uml: exit / { trace("Exit S."); }
    {
        // Step 1: execute action `trace("Exit S.");`
        ____GilData_EchoStringVoid("trace(\"Exit S.\");");
    } // end of behavior for S
    
    this.state_id = StateId.ROOT;
}


////////////////////////////////////////////////////////////////////////////////
// event handlers for state S1
////////////////////////////////////////////////////////////////////////////////

private void S1_enter()
{
    this.state_id = StateId.S1;
    
    // S1 behavior
    // uml: enter / { trace("Enter S1."); }
    {
        // Step 1: execute action `trace("Enter S1.");`
        ____GilData_EchoStringVoid("trace(\"Enter S1.\");");
    } // end of behavior for S1
}

private void S1_exit()
{
    // S1 behavior
    // uml: exit / { trace("Exit S1."); }
    {
        // Step 1: execute action `trace("Exit S1.");`
        ____GilData_EchoStringVoid("trace(\"Exit S1.\");");
    } // end of behavior for S1
    
    this.state_id = StateId.S;
}

private void S1_InitialState_transition()
{
    // S1.<InitialState> behavior
    // uml: / { trace("Transition action `` for S1.<InitialState> to S11."); } TransitionTo(S11)
    {
        // Step 1: Exit states until we reach `S1` state (Least Common Ancestor for transition). Already at LCA, no exiting required.
        
        // Step 2: Transition action: `trace("Transition action `` for S1.<InitialState> to S11.");`.
        ____GilData_EchoStringVoid("trace(\"Transition action `` for S1.<InitialState> to S11.\");");
        
        // Step 3: Enter/move towards transition target `S11`.
        this.S11_enter();
        
        // Step 4: complete transition. Ends event dispatch. No other behaviors are checked.
        return;
    } // end of behavior for S1.<InitialState>
}


////////////////////////////////////////////////////////////////////////////////
// event handlers for state S11
////////////////////////////////////////////////////////////////////////////////

private void S11_enter()
{
    this.state_id = StateId.S11;
    
    // S11 behavior
    // uml: enter / { trace("Enter S11."); }
    {
        // Step 1: execute action `trace("Enter S11.");`
        ____GilData_EchoStringVoid("trace(\"Enter S11.\");");
    } // end of behavior for S11
}

private void S11_exit()
{
    // S11 behavior
    // uml: exit / { trace("Exit S11."); }
    {
        // Step 1: execute action `trace("Exit S11.");`
        ____GilData_EchoStringVoid("trace(\"Exit S11.\");");
    } // end of behavior for S11
    
    this.state_id = StateId.S1;
}

private void S11_ev1()
{
    // S11 behavior
    // uml: EV1 [trace_guard("State S11: check behavior `EV1 TransitionTo(S1.<ExitPoint>(1))`.", true)] / { trace("Transition action `` for S11 to S1.<ExitPoint>(1)."); } TransitionTo(S1.<ExitPoint>(1))
    if (____GilData_VarArgsToBool(____GilData_EchoStringBool("trace_guard(\"State S11: check behavior `EV1 TransitionTo(S1.<ExitPoint>(1))`.\", true)")))
    {
        // Step 1: Exit states until we reach `S1` state (Least Common Ancestor for transition).
        this.S11_exit();
        
        // Step 2: Transition action: `trace("Transition action `` for S11 to S1.<ExitPoint>(1).");`.
        ____GilData_EchoStringVoid("trace(\"Transition action `` for S11 to S1.<ExitPoint>(1).\");");
        
        // Step 3: Enter/move towards transition target `S1.<ExitPoint>(1)`.
        // S1.<ExitPoint>(1) is a pseudo state and cannot have an `enter` trigger.
        
        // S1.<ExitPoint>(1) behavior
        // uml: / { trace("Transition action `` for S1.<ExitPoint>(1) to T11.<EntryPoint>(1)."); } TransitionTo(T11.<EntryPoint>(1))
        {
            // Step 1: Exit states until we reach `S` state (Least Common Ancestor for transition).
            this.S1_exit();
            
            // Step 2: Transition action: `trace("Transition action `` for S1.<ExitPoint>(1) to T11.<EntryPoint>(1).");`.
            ____GilData_EchoStringVoid("trace(\"Transition action `` for S1.<ExitPoint>(1) to T11.<EntryPoint>(1).\");");
            
            // Step 3: Enter/move towards transition target `T11.<EntryPoint>(1)`.
            this.T1_enter();
            this.T11_enter();
            // T11.<EntryPoint>(1) is a pseudo state and cannot have an `enter` trigger.
            
            // T11.<EntryPoint>(1) behavior
            // uml: / { trace("Transition action `` for T11.<EntryPoint>(1) to T111."); } TransitionTo(T111)
            {
                // Step 1: Exit states until we reach `T11` state (Least Common Ancestor for transition). Already at LCA, no exiting required.
                
                // Step 2: Transition action: `trace("Transition action `` for T11.<EntryPoint>(1) to T111.");`.
                ____GilData_EchoStringVoid("trace(\"Transition action `` for T11.<EntryPoint>(1) to T111.\");");
                
                // Step 3: Enter/move towards transition target `T111`.
                this.T111_enter();
                
                // Step 4: complete transition. Ends event dispatch. No other behaviors are checked.
                return;
            } // end of behavior for T11.<EntryPoint>(1)
        } // end of behavior for S1.<ExitPoint>(1)
    } // end of behavior for S11
    
    // No ancestor handles this event.
}


////////////////////////////////////////////////////////////////////////////////
// event handlers for state T1
////////////////////////////////////////////////////////////////////////////////

private void T1_enter()
{
    this.state_id = StateId.T1;
    
    // T1 behavior
    // uml: enter / { trace("Enter T1."); }
    {
        // Step 1: execute action `trace("Enter T1.");`
        ____GilData_EchoStringVoid("trace(\"Enter T1.\");");
    } // end of behavior for T1
}

private void T1_exit()
{
    // T1 behavior
    // uml: exit / { trace("Exit T1."); }
    {
        // Step 1: execute action `trace("Exit T1.");`
        ____GilData_EchoStringVoid("trace(\"Exit T1.\");");
    } // end of behavior for T1
    
    this.state_id = StateId.S;
}


////////////////////////////////////////////////////////////////////////////////
// event handlers for state T11
////////////////////////////////////////////////////////////////////////////////

private void T11_enter()
{
    this.state_id = StateId.T11;
    
    // T11 behavior
    // uml: enter / { trace("Enter T11."); }
    {
        // Step 1: execute action `trace("Enter T11.");`
        ____GilData_EchoStringVoid("trace(\"Enter T11.\");");
    } // end of behavior for T11
}

private void T11_exit()
{
    // T11 behavior
    // uml: exit / { trace("Exit T11."); }
    {
        // Step 1: execute action `trace("Exit T11.");`
        ____GilData_EchoStringVoid("trace(\"Exit T11.\");");
    } // end of behavior for T11
    
    this.state_id = StateId.T1;
}

private void T11_ev2()
{
    // T11 behavior
    // uml: EV2 [trace_guard("State T11: check behavior `EV2 TransitionTo(S1)`.", true)] / { trace("Transition action `` for T11 to S1."); } TransitionTo(S1)
    if (____GilData_VarArgsToBool(____GilData_EchoStringBool("trace_guard(\"State T11: check behavior `EV2 TransitionTo(S1)`.\", true)")))
    {
        // Step 1: Exit states until we reach `S` state (Least Common Ancestor for transition).
        this.exit_up_to_state_handler(StateId.S);
        
        // Step 2: Transition action: `trace("Transition action `` for T11 to S1.");`.
        ____GilData_EchoStringVoid("trace(\"Transition action `` for T11 to S1.\");");
        
        // Step 3: Enter/move towards transition target `S1`.
        this.S1_enter();
        
        // Finish transition by calling pseudo state transition function.
        this.S1_InitialState_transition();
        return; // event processing immediately stops when a transition finishes. No other behaviors for this state are checked.
    } // end of behavior for T11
    
    // No ancestor handles this event.
}


////////////////////////////////////////////////////////////////////////////////
// event handlers for state T111
////////////////////////////////////////////////////////////////////////////////

private void T111_enter()
{
    this.state_id = StateId.T111;
    
    // T111 behavior
    // uml: enter / { trace("Enter T111."); }
    {
        // Step 1: execute action `trace("Enter T111.");`
        ____GilData_EchoStringVoid("trace(\"Enter T111.\");");
    } // end of behavior for T111
}

private void T111_exit()
{
    // T111 behavior
    // uml: exit / { trace("Exit T111."); }
    {
        // Step 1: execute action `trace("Exit T111.");`
        ____GilData_EchoStringVoid("trace(\"Exit T111.\");");
    } // end of behavior for T111
    
    this.state_id = StateId.T11;
}

// Thread safe.
public static string state_id_to_string(StateId id)
{
    switch (id)
    {
        case StateId.ROOT: return "ROOT";
        case StateId.S: return "S";
        case StateId.S1: return "S1";
        case StateId.S11: return "S11";
        case StateId.T1: return "T1";
        case StateId.T11: return "T11";
        case StateId.T111: return "T111";
        default: return "?";
    }
}

// Thread safe.
public static string event_id_to_string(EventId id)
{
    switch (id)
    {
        case EventId.EV1: return "EV1";
        case EventId.EV2: return "EV2";
        default: return "?";
    }
}

    public static bool ____GilData_EchoStringBool(string toEcho) { return true; }
    public static void ____GilData_EchoStringVoid(string toEcho) { }
    public static bool ____GilData_VarArgsToBool(params object[] args) { return true; }
    public static void ____GilData_UnusedVar(object unusedVar) { }
}
