// Autogenerated with StateSmith.
// Algorithm: Balanced2. See https://github.com/StateSmith/StateSmith/wiki/Algorithms

public class ____GilData_FileTop { }
// Generated state machine
public class Spec2Sm
{
    public enum EventId
    {
        DO = 0, // The `do` event is special. State event handlers do not consume this event (ancestors all get it too) unless a transition occurs.
        EV1 = 1,
        EV10 = 2,
        EV2 = 3,
        EV3 = 4,
        EV4 = 5,
        EV5 = 6,
        EV6 = 7,
        EV7 = 8,
        EV8 = 9,
        EV9 = 10,
        EVBACK = 11,
        EVCLOSE = 12,
        EVOPEN = 13,
        EVSTEP = 14,
    }
    
    public const int EventIdCount = 15;
    
    public enum StateId
    {
        ROOT = 0,
        PREFIXING = 1,
        PREFIXING__ORDER_MENU = 2,
        PREFIXING__OM__BEVERAGE = 3,
        PREFIXING__OM__BEV__NONE = 4,
        PREFIXING__OM__BEV__TEA = 5,
        PREFIXING__OM__BEV__WATER = 6,
        PREFIXING__OM__VEG = 7,
        PREFIXING__OM__VEG__NONE = 8,
        PREFIXING__OM__VEG__POTATO = 9,
        PREFIXING__OM__VEG__YAM = 10,
        PREFIXING__SHOWS_MANUAL_PREFIX = 11,
        PREFIXING__SHOWS_MANUAL_PREFIX__ORDER_MENU = 12,
        PREFIXING__SHOWS_MANUAL_PREFIX__OM_BEVERAGE = 13,
        PREFIXING__SHOWS_MANUAL_PREFIX__OM_BEV_NONE = 14,
        PREFIXING__SHOWS_MANUAL_PREFIX__OM_BEV_TEA = 15,
        PREFIXING__SHOWS_MANUAL_PREFIX__OM_BEV_WATER = 16,
        PREFIXING__SHOWS_MANUAL_PREFIX__OM_VEG = 17,
        PREFIXING__SHOWS_MANUAL_PREFIX__OM_VEG_NONE = 18,
        PREFIXING__SHOWS_MANUAL_PREFIX__OM_VEG_POTATO = 19,
        PREFIXING__SHOWS_MANUAL_PREFIX__OM_VEG_YAM = 20,
        SPEC2SM__DECIDE = 21,
        TEST1_DO_EVENT_TESTING = 22,
        TEST1_ROOT = 23,
        TEST1_S1 = 24,
        TEST1_S1_1 = 25,
        TEST1_S2 = 26,
        TEST10_CHOICE_POINT = 27,
        TEST10_A = 28,
        TEST10_A_1 = 29,
        TEST10_ROOT = 30,
        TEST10_G = 31,
        TEST10_G_S0 = 32,
        TEST10_G_S1 = 33,
        TEST10_G_S2 = 34,
        TEST10_G_S3 = 35,
        TEST10_S1 = 36,
        TEST10_S4 = 37,
        TEST2_REGULAR_EVENT_TESTING = 38,
        TEST2_ROOT = 39,
        TEST2_S1 = 40,
        TEST2_S1_1 = 41,
        TEST2_S2 = 42,
        TEST3_BEHAVIOR_ORDERING = 43,
        TEST3_ROOT = 44,
        TEST3_S1 = 45,
        TEST3_S2 = 46,
        TEST3_S3 = 47,
        TEST4_PARENT_CHILD_TRANSITIONS = 48,
        TEST4_B_AND_OTHERS = 49,
        TEST4B_LOCAL = 50,
        TEST4B_G = 51,
        TEST4B_G_1 = 52,
        TEST4C_LOCAL_TO_ALIAS = 53,
        TEST4C_G = 54,
        TEST4C_G_1 = 55,
        TEST4D_EXTERNAL = 56,
        TEST4D_G = 57,
        TEST4D_G_1 = 58,
        TEST4_DECIDE = 59,
        TEST4_ROOT = 60,
        TEST4_S1 = 61,
        TEST4_S10 = 62,
        TEST4_S10_1 = 63,
        TEST4_S2 = 64,
        TEST4_S20 = 65,
        TEST4_S20_1 = 66,
        TEST4_S3 = 67,
        TEST5_PARENT_CHILD_TRANSITIONS_ALIAS = 68,
        TEST5_ROOT = 69,
        TEST5_S1 = 70,
        TEST5_S2 = 71,
        TEST5_S3 = 72,
        TEST6_VARS_EXPANSIONS = 73,
        TEST6_ROOT = 74,
        AUTO_VAR_TEST = 75,
        AUTO_VAR_TEST__S1 = 76,
        AUTO_VAR_TEST__S2 = 77,
        META_EXPANSIONS = 78,
        META_EXPANSIONS__S1 = 79,
        META_EXPANSIONS__S2 = 80,
        S3 = 81,
        S4 = 82,
        S5 = 83,
        NORMAL = 84,
        NORMAL__S1 = 85,
        NORMAL__S2 = 86,
        TEST6_VARS_EXPANSIONS__DECIDE = 87,
        TEST7_INITIAL_OR_HISTORY = 88,
        TEST7 = 89,
        T7__DEEP_HISTORY1 = 90,
        T7__DH1__SANTAS_WORKSHOP = 91,
        T7__DH1__ALIENS_DETECTED = 92,
        T7__DH1__GET_BACKUP = 93,
        T7__DH1__HERO = 94,
        T7__DH1__CALL_BATMAN = 95,
        T7__DH1__CALL_THOR = 96,
        T7__DH1__LOCAL_HELP = 97,
        T7__DH1__BUDDY_ELF = 98,
        T7__DH1__POLAR_BEARS = 99,
        T7__DH1__GIVE_COOKIES = 100,
        T7__DH1__SNOWBALL_FIGHT = 101,
        T7__DH1__BUILD = 102,
        T7__DH1__TOOL = 103,
        T7__DH1__CIRCULAR_SAW = 104,
        T7__DH1__IMPACT_DRILL = 105,
        T7__DH1__TOY = 106,
        T7__DH1__GLOW_WORM = 107,
        T7__DH1__RACE_CAR = 108,
        T7__DH1__ROBOT = 109,
        T7__DH1__BATTLEBOT = 110,
        T7__DH1__WALL_E = 111,
        T7__DH1__TEDDY_BEAR = 112,
        T7__DEEP_HISTORY2 = 113,
        T7__DEEP_HISTORY2__T7__STATE_0 = 114,
        T7__DEEP_HISTORY2__T7__STATE_1 = 115,
        T7__DEEP_HISTORY2__T7__STATE_2 = 116,
        T7__DEEP_HISTORY2__T7__STATE_6 = 117,
        T7__DEEP_HISTORY2__T7__STATE_9 = 118,
        T7__DEEP_HISTORY2__T7__STATE_3 = 119,
        T7__DEEP_HISTORY3 = 120,
        T7__DEEP_HISTORY3__T7__STATE_0 = 121,
        T7__DEEP_HISTORY3__T7__STATE_1 = 122,
        T7__DEEP_HISTORY3__T7__STATE_2 = 123,
        T7__DEEP_HISTORY3__T7__STATE_6 = 124,
        T7__DEEP_HISTORY3__T7__STATE_9 = 125,
        T7__DEEP_HISTORY3__T7__STATE_3 = 126,
        T7__HISTORY1 = 127,
        T7__H1__OFF = 128,
        T7__H1__OFF1 = 129,
        T7__H1__OFF2 = 130,
        T7__H1__OFF3 = 131,
        T7__H1__ON = 132,
        T7__H1__ON1 = 133,
        T7__H1__ON2 = 134,
        T7__H1__ON3 = 135,
        T7__INITIAL1 = 136,
        T7__INITIAL1__PARENT = 137,
        T7__INITIAL1__G = 138,
        T7__INITIAL1__G_S1 = 139,
        T7__INITIAL1__G_S2 = 140,
        T7__INITIAL1__G_S3 = 141,
        T7__INITIAL1__S1 = 142,
        TEST7_DECIDE = 143,
        TEST8_ENTRY_CHOICE = 144,
        TEST8_ROOT = 145,
        TEST8_G = 146,
        TEST8_G_S1 = 147,
        TEST8_G_S2 = 148,
        TEST8_G_S3 = 149,
        TEST8_S1 = 150,
        TEST9_EXIT_CHOICE = 151,
        TEST9_DECIDE = 152,
        TEST9_ROOT = 153,
        TEST9_G_S1 = 154,
        TEST9_G_S2 = 155,
        TEST9_G_S3 = 156,
        TEST9_G_S4 = 157,
        TEST9_S1 = 158,
        TEST9_S1_1 = 159,
        TEST9A_ROOT = 160,
        TEST9A_S1 = 161,
        TEST9A_S1_1 = 162,
        TEST9B_ROOT = 163,
        TEST9B_ROOT__A1 = 164,
        TEST9B_ROOT__A2 = 165,
        TEST9B_ROOT__A3 = 166,
        TEST9B_ROOT__A4 = 167,
        TEST9B_ROOT__B1 = 168,
        TEST9B_ROOT__B2 = 169,
        TEST9B_ROOT__B3 = 170,
        TEST9B_ROOT__B4 = 171,
        UNREACHABLE = 172,
        USELESS = 173,
    }
    
    public const int StateIdCount = 174;
    
    public enum T7__H1__ON_HistoryId
    {
        T7__H1__ON1 = 0, // default transition
        T7__H1__ON2 = 1,
        T7__H1__ON3 = 2,
    }

    
    public enum T7__H1__OFF_HistoryId
    {
        T7__H1__OFF1 = 0, // default transition
        T7__H1__OFF2 = 1,
        T7__H1__OFF3 = 2,
    }

    
    public enum T7__DH1__ALIENS_DETECTED_HistoryId
    {
        T7__DH1__SNOWBALL_FIGHT = 0, // default transition
        T7__DH1__GIVE_COOKIES = 1,
        T7__DH1__HERO = 2,
        T7__DH1__BUDDY_ELF = 3,
        T7__DH1__POLAR_BEARS = 4,
    }

    
    public enum T7__DH1__GET_BACKUP_HistoryId
    {
        T7__DH1__GET_BACKUP_CHOICEPOINT = 0, // default transition
        T7__DH1__HERO = 1,
        T7__DH1__BUDDY_ELF = 2,
        T7__DH1__POLAR_BEARS = 3,
    }

    
    public enum T7__DH1__BUILD_HistoryId
    {
        T7__DH1__TOY = 0, // default transition
        T7__DH1__TOOL = 1,
        T7__DH1__RACE_CAR = 2,
        T7__DH1__TEDDY_BEAR = 3,
        T7__DH1__GLOW_WORM = 4,
        T7__DH1__ROBOT = 5,
        T7__DH1__BATTLEBOT = 6,
        T7__DH1__WALL_E = 7,
        T7__DH1__IMPACT_DRILL = 8,
        T7__DH1__CIRCULAR_SAW = 9,
    }

    
    public enum T7__DEEP_HISTORY2__T7__state_0_HistoryId
    {
        T7__DEEP_HISTORY2__T7__STATE_1 = 0, // default transition
        T7__DEEP_HISTORY2__T7__STATE_2 = 1,
        T7__DEEP_HISTORY2__T7__STATE_6 = 2,
        T7__DEEP_HISTORY2__T7__STATE_9 = 3,
    }

    
    public enum T7__DEEP_HISTORY3__T7__state_0_HistoryId
    {
        T7__DEEP_HISTORY3__T7__STATE_1 = 0, // default transition
        T7__DEEP_HISTORY3__T7__STATE_2 = 1,
    }

    
    // Used internally by state machine. Feel free to inspect, but don't modify.
    public StateId stateId;
    
    // State machine variables. Can be used for inputs, outputs, user variables...
    public struct Vars
    {
        public T7__H1__ON_HistoryId T7__H1__ON_history;
        public T7__H1__OFF_HistoryId T7__H1__OFF_history;
        public T7__DH1__ALIENS_DETECTED_HistoryId T7__DH1__ALIENS_DETECTED_history;
        public T7__DH1__GET_BACKUP_HistoryId T7__DH1__GET_BACKUP_history;
        public T7__DH1__BUILD_HistoryId T7__DH1__BUILD_history;
        public T7__DEEP_HISTORY2__T7__state_0_HistoryId T7__DEEP_HISTORY2__T7__state_0_history;
        public T7__DEEP_HISTORY3__T7__state_0_HistoryId T7__DEEP_HISTORY3__T7__state_0_history;
        public string ____GilData_FieldEchoStringVoid0;//"public byte count;"
        public string ____GilData_FieldEchoStringVoid1;//"public byte auto_var_1;"
    }
    
    // Variables. Can be used for inputs, outputs, user variables...
    public Vars vars = new Vars();
    
    // State machine constructor. Must be called before start or dispatch event functions. Not thread safe.
    public Spec2Sm()
    {
    }
    
    // Starts the state machine. Must be called before dispatching events. Not thread safe.
    public void Start()
    {
        this.ROOT_enter();
        // ROOT behavior
        // uml: TransitionTo(ROOT.<InitialState>)
        {
            // Step 1: Exit states until we reach `ROOT` state (Least Common Ancestor for transition). Already at LCA, no exiting required.
            
            // Step 2: Transition action: ``.
            
            // Step 3: Enter/move towards transition target `ROOT.<InitialState>`.
            // ROOT.<InitialState> is a pseudo state and cannot have an `enter` trigger.
            
            // ROOT.<InitialState> behavior
            // uml: / { trace("Transition action `` for ROOT.<InitialState> to Spec2Sm__DECIDE."); } TransitionTo(Spec2Sm__DECIDE)
            {
                // Step 1: Exit states until we reach `ROOT` state (Least Common Ancestor for transition). Already at LCA, no exiting required.
                
                // Step 2: Transition action: `trace("Transition action `` for ROOT.<InitialState> to Spec2Sm__DECIDE.");`.
                ____GilData_EchoStringVoid("MainClass.Trace(\"Transition action `` for ROOT.<InitialState> to Spec2Sm__DECIDE.\");");
                
                // Step 3: Enter/move towards transition target `Spec2Sm__DECIDE`.
                this.SPEC2SM__DECIDE_enter();
                
                // Step 4: complete transition. Ends event dispatch. No other behaviors are checked.
                return;
            } // end of behavior for ROOT.<InitialState>
        } // end of behavior for ROOT
    }
    
    // Dispatches an event to the state machine. Not thread safe.
    // Note! This function assumes that the `eventId` parameter is valid.
    public void DispatchEvent(EventId eventId)
    {
        switch (this.stateId)
        {
            // STATE: Spec2Sm
            case StateId.ROOT:
                switch (eventId)
                {
                    case EventId.DO: this.ROOT_do(); break;
                }
                break;
            
            // STATE: PREFIXING
            case StateId.PREFIXING:
                switch (eventId)
                {
                    case EventId.DO: this.ROOT_do(); break; // First ancestor handler for this event
                }
                break;
            
            // STATE: PREFIXING__ORDER_MENU
            case StateId.PREFIXING__ORDER_MENU:
                switch (eventId)
                {
                    case EventId.DO: this.ROOT_do(); break; // First ancestor handler for this event
                }
                break;
            
            // STATE: PREFIXING__OM__BEVERAGE
            case StateId.PREFIXING__OM__BEVERAGE:
                switch (eventId)
                {
                    case EventId.EV2: this.PREFIXING__OM__BEVERAGE_ev2(); break;
                    case EventId.DO: this.ROOT_do(); break; // First ancestor handler for this event
                }
                break;
            
            // STATE: PREFIXING__OM__BEV__NONE
            case StateId.PREFIXING__OM__BEV__NONE:
                switch (eventId)
                {
                    case EventId.EV1: this.PREFIXING__OM__BEV__NONE_ev1(); break;
                    case EventId.DO: this.ROOT_do(); break; // First ancestor handler for this event
                    case EventId.EV2: this.PREFIXING__OM__BEVERAGE_ev2(); break; // First ancestor handler for this event
                }
                break;
            
            // STATE: PREFIXING__OM__BEV__TEA
            case StateId.PREFIXING__OM__BEV__TEA:
                switch (eventId)
                {
                    case EventId.DO: this.ROOT_do(); break; // First ancestor handler for this event
                    case EventId.EV2: this.PREFIXING__OM__BEVERAGE_ev2(); break; // First ancestor handler for this event
                }
                break;
            
            // STATE: PREFIXING__OM__BEV__WATER
            case StateId.PREFIXING__OM__BEV__WATER:
                switch (eventId)
                {
                    case EventId.EV1: this.PREFIXING__OM__BEV__WATER_ev1(); break;
                    case EventId.DO: this.ROOT_do(); break; // First ancestor handler for this event
                    case EventId.EV2: this.PREFIXING__OM__BEVERAGE_ev2(); break; // First ancestor handler for this event
                }
                break;
            
            // STATE: PREFIXING__OM__VEG
            case StateId.PREFIXING__OM__VEG:
                switch (eventId)
                {
                    case EventId.EV2: this.PREFIXING__OM__VEG_ev2(); break;
                    case EventId.DO: this.ROOT_do(); break; // First ancestor handler for this event
                }
                break;
            
            // STATE: PREFIXING__OM__VEG__NONE
            case StateId.PREFIXING__OM__VEG__NONE:
                switch (eventId)
                {
                    case EventId.EV1: this.PREFIXING__OM__VEG__NONE_ev1(); break;
                    case EventId.DO: this.ROOT_do(); break; // First ancestor handler for this event
                    case EventId.EV2: this.PREFIXING__OM__VEG_ev2(); break; // First ancestor handler for this event
                }
                break;
            
            // STATE: PREFIXING__OM__VEG__POTATO
            case StateId.PREFIXING__OM__VEG__POTATO:
                switch (eventId)
                {
                    case EventId.EV1: this.PREFIXING__OM__VEG__POTATO_ev1(); break;
                    case EventId.DO: this.ROOT_do(); break; // First ancestor handler for this event
                    case EventId.EV2: this.PREFIXING__OM__VEG_ev2(); break; // First ancestor handler for this event
                }
                break;
            
            // STATE: PREFIXING__OM__VEG__YAM
            case StateId.PREFIXING__OM__VEG__YAM:
                switch (eventId)
                {
                    case EventId.DO: this.ROOT_do(); break; // First ancestor handler for this event
                    case EventId.EV2: this.PREFIXING__OM__VEG_ev2(); break; // First ancestor handler for this event
                }
                break;
            
            // STATE: PREFIXING__SHOWS_MANUAL_PREFIX
            case StateId.PREFIXING__SHOWS_MANUAL_PREFIX:
                switch (eventId)
                {
                    case EventId.DO: this.ROOT_do(); break; // First ancestor handler for this event
                }
                break;
            
            // STATE: PREFIXING__SHOWS_MANUAL_PREFIX__ORDER_MENU
            case StateId.PREFIXING__SHOWS_MANUAL_PREFIX__ORDER_MENU:
                switch (eventId)
                {
                    case EventId.DO: this.ROOT_do(); break; // First ancestor handler for this event
                }
                break;
            
            // STATE: PREFIXING__SHOWS_MANUAL_PREFIX__OM_BEVERAGE
            case StateId.PREFIXING__SHOWS_MANUAL_PREFIX__OM_BEVERAGE:
                switch (eventId)
                {
                    case EventId.EV2: this.PREFIXING__SHOWS_MANUAL_PREFIX__OM_BEVERAGE_ev2(); break;
                    case EventId.DO: this.ROOT_do(); break; // First ancestor handler for this event
                }
                break;
            
            // STATE: PREFIXING__SHOWS_MANUAL_PREFIX__OM_BEV_NONE
            case StateId.PREFIXING__SHOWS_MANUAL_PREFIX__OM_BEV_NONE:
                switch (eventId)
                {
                    case EventId.EV1: this.PREFIXING__SHOWS_MANUAL_PREFIX__OM_BEV_NONE_ev1(); break;
                    case EventId.DO: this.ROOT_do(); break; // First ancestor handler for this event
                    case EventId.EV2: this.PREFIXING__SHOWS_MANUAL_PREFIX__OM_BEVERAGE_ev2(); break; // First ancestor handler for this event
                }
                break;
            
            // STATE: PREFIXING__SHOWS_MANUAL_PREFIX__OM_BEV_TEA
            case StateId.PREFIXING__SHOWS_MANUAL_PREFIX__OM_BEV_TEA:
                switch (eventId)
                {
                    case EventId.DO: this.ROOT_do(); break; // First ancestor handler for this event
                    case EventId.EV2: this.PREFIXING__SHOWS_MANUAL_PREFIX__OM_BEVERAGE_ev2(); break; // First ancestor handler for this event
                }
                break;
            
            // STATE: PREFIXING__SHOWS_MANUAL_PREFIX__OM_BEV_WATER
            case StateId.PREFIXING__SHOWS_MANUAL_PREFIX__OM_BEV_WATER:
                switch (eventId)
                {
                    case EventId.EV1: this.PREFIXING__SHOWS_MANUAL_PREFIX__OM_BEV_WATER_ev1(); break;
                    case EventId.DO: this.ROOT_do(); break; // First ancestor handler for this event
                    case EventId.EV2: this.PREFIXING__SHOWS_MANUAL_PREFIX__OM_BEVERAGE_ev2(); break; // First ancestor handler for this event
                }
                break;
            
            // STATE: PREFIXING__SHOWS_MANUAL_PREFIX__OM_VEG
            case StateId.PREFIXING__SHOWS_MANUAL_PREFIX__OM_VEG:
                switch (eventId)
                {
                    case EventId.EV2: this.PREFIXING__SHOWS_MANUAL_PREFIX__OM_VEG_ev2(); break;
                    case EventId.DO: this.ROOT_do(); break; // First ancestor handler for this event
                }
                break;
            
            // STATE: PREFIXING__SHOWS_MANUAL_PREFIX__OM_VEG_NONE
            case StateId.PREFIXING__SHOWS_MANUAL_PREFIX__OM_VEG_NONE:
                switch (eventId)
                {
                    case EventId.EV1: this.PREFIXING__SHOWS_MANUAL_PREFIX__OM_VEG_NONE_ev1(); break;
                    case EventId.DO: this.ROOT_do(); break; // First ancestor handler for this event
                    case EventId.EV2: this.PREFIXING__SHOWS_MANUAL_PREFIX__OM_VEG_ev2(); break; // First ancestor handler for this event
                }
                break;
            
            // STATE: PREFIXING__SHOWS_MANUAL_PREFIX__OM_VEG_POTATO
            case StateId.PREFIXING__SHOWS_MANUAL_PREFIX__OM_VEG_POTATO:
                switch (eventId)
                {
                    case EventId.EV1: this.PREFIXING__SHOWS_MANUAL_PREFIX__OM_VEG_POTATO_ev1(); break;
                    case EventId.DO: this.ROOT_do(); break; // First ancestor handler for this event
                    case EventId.EV2: this.PREFIXING__SHOWS_MANUAL_PREFIX__OM_VEG_ev2(); break; // First ancestor handler for this event
                }
                break;
            
            // STATE: PREFIXING__SHOWS_MANUAL_PREFIX__OM_VEG_YAM
            case StateId.PREFIXING__SHOWS_MANUAL_PREFIX__OM_VEG_YAM:
                switch (eventId)
                {
                    case EventId.DO: this.ROOT_do(); break; // First ancestor handler for this event
                    case EventId.EV2: this.PREFIXING__SHOWS_MANUAL_PREFIX__OM_VEG_ev2(); break; // First ancestor handler for this event
                }
                break;
            
            // STATE: Spec2Sm__DECIDE
            case StateId.SPEC2SM__DECIDE:
                switch (eventId)
                {
                    case EventId.EV1: this.SPEC2SM__DECIDE_ev1(); break;
                    case EventId.EV2: this.SPEC2SM__DECIDE_ev2(); break;
                    case EventId.EV3: this.SPEC2SM__DECIDE_ev3(); break;
                    case EventId.EV4: this.SPEC2SM__DECIDE_ev4(); break;
                    case EventId.EV5: this.SPEC2SM__DECIDE_ev5(); break;
                    case EventId.EV6: this.SPEC2SM__DECIDE_ev6(); break;
                    case EventId.EV7: this.SPEC2SM__DECIDE_ev7(); break;
                    case EventId.EV8: this.SPEC2SM__DECIDE_ev8(); break;
                    case EventId.EV9: this.SPEC2SM__DECIDE_ev9(); break;
                    case EventId.EV10: this.SPEC2SM__DECIDE_ev10(); break;
                    case EventId.DO: this.SPEC2SM__DECIDE_do(); break;
                }
                break;
            
            // STATE: TEST1_DO_EVENT_TESTING
            case StateId.TEST1_DO_EVENT_TESTING:
                switch (eventId)
                {
                    case EventId.DO: this.ROOT_do(); break; // First ancestor handler for this event
                }
                break;
            
            // STATE: TEST1_ROOT
            case StateId.TEST1_ROOT:
                switch (eventId)
                {
                    case EventId.DO: this.TEST1_ROOT_do(); break;
                }
                break;
            
            // STATE: TEST1_S1
            case StateId.TEST1_S1:
                switch (eventId)
                {
                    case EventId.DO: this.TEST1_ROOT_do(); break; // First ancestor handler for this event
                }
                break;
            
            // STATE: TEST1_S1_1
            case StateId.TEST1_S1_1:
                switch (eventId)
                {
                    case EventId.DO: this.TEST1_S1_1_do(); break;
                    case EventId.EV1: this.TEST1_S1_1_ev1(); break;
                }
                break;
            
            // STATE: TEST1_S2
            case StateId.TEST1_S2:
                switch (eventId)
                {
                    case EventId.DO: this.TEST1_S2_do(); break;
                }
                break;
            
            // STATE: TEST10_CHOICE_POINT
            case StateId.TEST10_CHOICE_POINT:
                switch (eventId)
                {
                    case EventId.DO: this.ROOT_do(); break; // First ancestor handler for this event
                }
                break;
            
            // STATE: TEST10_A
            case StateId.TEST10_A:
                switch (eventId)
                {
                    case EventId.DO: this.ROOT_do(); break; // First ancestor handler for this event
                }
                break;
            
            // STATE: TEST10_A_1
            case StateId.TEST10_A_1:
                switch (eventId)
                {
                    case EventId.DO: this.ROOT_do(); break; // First ancestor handler for this event
                }
                break;
            
            // STATE: TEST10_ROOT
            case StateId.TEST10_ROOT:
                switch (eventId)
                {
                    case EventId.EV5: this.TEST10_ROOT_ev5(); break;
                    case EventId.DO: this.ROOT_do(); break; // First ancestor handler for this event
                }
                break;
            
            // STATE: TEST10_G
            case StateId.TEST10_G:
                switch (eventId)
                {
                    case EventId.DO: this.ROOT_do(); break; // First ancestor handler for this event
                    case EventId.EV5: this.TEST10_ROOT_ev5(); break; // First ancestor handler for this event
                }
                break;
            
            // STATE: TEST10_G_S0
            case StateId.TEST10_G_S0:
                switch (eventId)
                {
                    case EventId.DO: this.ROOT_do(); break; // First ancestor handler for this event
                    case EventId.EV5: this.TEST10_ROOT_ev5(); break; // First ancestor handler for this event
                }
                break;
            
            // STATE: TEST10_G_S1
            case StateId.TEST10_G_S1:
                switch (eventId)
                {
                    case EventId.DO: this.ROOT_do(); break; // First ancestor handler for this event
                    case EventId.EV5: this.TEST10_ROOT_ev5(); break; // First ancestor handler for this event
                }
                break;
            
            // STATE: TEST10_G_S2
            case StateId.TEST10_G_S2:
                switch (eventId)
                {
                    case EventId.DO: this.ROOT_do(); break; // First ancestor handler for this event
                    case EventId.EV5: this.TEST10_ROOT_ev5(); break; // First ancestor handler for this event
                }
                break;
            
            // STATE: TEST10_G_S3
            case StateId.TEST10_G_S3:
                switch (eventId)
                {
                    case EventId.DO: this.ROOT_do(); break; // First ancestor handler for this event
                    case EventId.EV5: this.TEST10_ROOT_ev5(); break; // First ancestor handler for this event
                }
                break;
            
            // STATE: TEST10_S1
            case StateId.TEST10_S1:
                switch (eventId)
                {
                    case EventId.EV2: this.TEST10_S1_ev2(); break;
                    case EventId.EV3: this.TEST10_S1_ev3(); break;
                    case EventId.EV1: this.TEST10_S1_ev1(); break;
                    case EventId.EV10: this.TEST10_S1_ev10(); break;
                    case EventId.DO: this.ROOT_do(); break; // First ancestor handler for this event
                    case EventId.EV5: this.TEST10_ROOT_ev5(); break; // First ancestor handler for this event
                }
                break;
            
            // STATE: TEST10_S4
            case StateId.TEST10_S4:
                switch (eventId)
                {
                    case EventId.DO: this.ROOT_do(); break; // First ancestor handler for this event
                    case EventId.EV5: this.TEST10_ROOT_ev5(); break; // First ancestor handler for this event
                }
                break;
            
            // STATE: TEST2_REGULAR_EVENT_TESTING
            case StateId.TEST2_REGULAR_EVENT_TESTING:
                switch (eventId)
                {
                    case EventId.DO: this.ROOT_do(); break; // First ancestor handler for this event
                }
                break;
            
            // STATE: TEST2_ROOT
            case StateId.TEST2_ROOT:
                switch (eventId)
                {
                    case EventId.EV1: this.TEST2_ROOT_ev1(); break;
                    case EventId.EV2: this.TEST2_ROOT_ev2(); break;
                    case EventId.DO: this.TEST2_ROOT_do(); break;
                }
                break;
            
            // STATE: TEST2_S1
            case StateId.TEST2_S1:
                switch (eventId)
                {
                    case EventId.DO: this.TEST2_ROOT_do(); break; // First ancestor handler for this event
                    case EventId.EV1: this.TEST2_ROOT_ev1(); break; // First ancestor handler for this event
                    case EventId.EV2: this.TEST2_ROOT_ev2(); break; // First ancestor handler for this event
                }
                break;
            
            // STATE: TEST2_S1_1
            case StateId.TEST2_S1_1:
                switch (eventId)
                {
                    case EventId.EV1: this.TEST2_S1_1_ev1(); break;
                    case EventId.DO: this.TEST2_S1_1_do(); break;
                    case EventId.EV2: this.TEST2_ROOT_ev2(); break; // First ancestor handler for this event
                }
                break;
            
            // STATE: TEST2_S2
            case StateId.TEST2_S2:
                switch (eventId)
                {
                    case EventId.EV1: this.TEST2_S2_ev1(); break;
                    case EventId.EV2: this.TEST2_S2_ev2(); break;
                    case EventId.DO: this.TEST2_ROOT_do(); break; // First ancestor handler for this event
                }
                break;
            
            // STATE: TEST3_BEHAVIOR_ORDERING
            case StateId.TEST3_BEHAVIOR_ORDERING:
                switch (eventId)
                {
                    case EventId.DO: this.ROOT_do(); break; // First ancestor handler for this event
                }
                break;
            
            // STATE: TEST3_ROOT
            case StateId.TEST3_ROOT:
                switch (eventId)
                {
                    case EventId.EV1: this.TEST3_ROOT_ev1(); break;
                    case EventId.DO: this.ROOT_do(); break; // First ancestor handler for this event
                }
                break;
            
            // STATE: TEST3_S1
            case StateId.TEST3_S1:
                switch (eventId)
                {
                    case EventId.EV1: this.TEST3_S1_ev1(); break;
                    case EventId.DO: this.ROOT_do(); break; // First ancestor handler for this event
                }
                break;
            
            // STATE: TEST3_S2
            case StateId.TEST3_S2:
                switch (eventId)
                {
                    case EventId.EV1: this.TEST3_S2_ev1(); break;
                    case EventId.DO: this.ROOT_do(); break; // First ancestor handler for this event
                }
                break;
            
            // STATE: TEST3_S3
            case StateId.TEST3_S3:
                switch (eventId)
                {
                    case EventId.DO: this.ROOT_do(); break; // First ancestor handler for this event
                    case EventId.EV1: this.TEST3_ROOT_ev1(); break; // First ancestor handler for this event
                }
                break;
            
            // STATE: TEST4_PARENT_CHILD_TRANSITIONS
            case StateId.TEST4_PARENT_CHILD_TRANSITIONS:
                switch (eventId)
                {
                    case EventId.DO: this.ROOT_do(); break; // First ancestor handler for this event
                }
                break;
            
            // STATE: TEST4_B_AND_OTHERS
            case StateId.TEST4_B_AND_OTHERS:
                switch (eventId)
                {
                    case EventId.DO: this.ROOT_do(); break; // First ancestor handler for this event
                }
                break;
            
            // STATE: TEST4B_LOCAL
            case StateId.TEST4B_LOCAL:
                switch (eventId)
                {
                    case EventId.DO: this.ROOT_do(); break; // First ancestor handler for this event
                }
                break;
            
            // STATE: TEST4B_G
            case StateId.TEST4B_G:
                switch (eventId)
                {
                    case EventId.EV1: this.TEST4B_G_ev1(); break;
                    case EventId.DO: this.ROOT_do(); break; // First ancestor handler for this event
                }
                break;
            
            // STATE: TEST4B_G_1
            case StateId.TEST4B_G_1:
                switch (eventId)
                {
                    case EventId.EV2: this.TEST4B_G_1_ev2(); break;
                    case EventId.DO: this.ROOT_do(); break; // First ancestor handler for this event
                    case EventId.EV1: this.TEST4B_G_ev1(); break; // First ancestor handler for this event
                }
                break;
            
            // STATE: TEST4C_LOCAL_TO_ALIAS
            case StateId.TEST4C_LOCAL_TO_ALIAS:
                switch (eventId)
                {
                    case EventId.DO: this.ROOT_do(); break; // First ancestor handler for this event
                }
                break;
            
            // STATE: TEST4C_G
            case StateId.TEST4C_G:
                switch (eventId)
                {
                    case EventId.EV1: this.TEST4C_G_ev1(); break;
                    case EventId.DO: this.ROOT_do(); break; // First ancestor handler for this event
                }
                break;
            
            // STATE: TEST4C_G_1
            case StateId.TEST4C_G_1:
                switch (eventId)
                {
                    case EventId.EV2: this.TEST4C_G_1_ev2(); break;
                    case EventId.DO: this.ROOT_do(); break; // First ancestor handler for this event
                    case EventId.EV1: this.TEST4C_G_ev1(); break; // First ancestor handler for this event
                }
                break;
            
            // STATE: TEST4D_EXTERNAL
            case StateId.TEST4D_EXTERNAL:
                switch (eventId)
                {
                    case EventId.DO: this.ROOT_do(); break; // First ancestor handler for this event
                }
                break;
            
            // STATE: TEST4D_G
            case StateId.TEST4D_G:
                switch (eventId)
                {
                    case EventId.EV1: this.TEST4D_G_ev1(); break;
                    case EventId.DO: this.ROOT_do(); break; // First ancestor handler for this event
                }
                break;
            
            // STATE: TEST4D_G_1
            case StateId.TEST4D_G_1:
                switch (eventId)
                {
                    case EventId.EV2: this.TEST4D_G_1_ev2(); break;
                    case EventId.DO: this.ROOT_do(); break; // First ancestor handler for this event
                    case EventId.EV1: this.TEST4D_G_ev1(); break; // First ancestor handler for this event
                }
                break;
            
            // STATE: TEST4_DECIDE
            case StateId.TEST4_DECIDE:
                switch (eventId)
                {
                    case EventId.EV1: this.TEST4_DECIDE_ev1(); break;
                    case EventId.EV2: this.TEST4_DECIDE_ev2(); break;
                    case EventId.EV3: this.TEST4_DECIDE_ev3(); break;
                    case EventId.EV4: this.TEST4_DECIDE_ev4(); break;
                    case EventId.DO: this.ROOT_do(); break; // First ancestor handler for this event
                }
                break;
            
            // STATE: TEST4_ROOT
            case StateId.TEST4_ROOT:
                switch (eventId)
                {
                    case EventId.EV2: this.TEST4_ROOT_ev2(); break;
                    case EventId.EV3: this.TEST4_ROOT_ev3(); break;
                    case EventId.EV4: this.TEST4_ROOT_ev4(); break;
                    case EventId.DO: this.ROOT_do(); break; // First ancestor handler for this event
                }
                break;
            
            // STATE: TEST4_S1
            case StateId.TEST4_S1:
                switch (eventId)
                {
                    case EventId.EV1: this.TEST4_S1_ev1(); break;
                    case EventId.DO: this.ROOT_do(); break; // First ancestor handler for this event
                    case EventId.EV2: this.TEST4_ROOT_ev2(); break; // First ancestor handler for this event
                    case EventId.EV3: this.TEST4_ROOT_ev3(); break; // First ancestor handler for this event
                    case EventId.EV4: this.TEST4_ROOT_ev4(); break; // First ancestor handler for this event
                }
                break;
            
            // STATE: TEST4_S10
            case StateId.TEST4_S10:
                switch (eventId)
                {
                    case EventId.EV4: this.TEST4_S10_ev4(); break;
                    case EventId.DO: this.ROOT_do(); break; // First ancestor handler for this event
                    case EventId.EV2: this.TEST4_ROOT_ev2(); break; // First ancestor handler for this event
                    case EventId.EV3: this.TEST4_ROOT_ev3(); break; // First ancestor handler for this event
                }
                break;
            
            // STATE: TEST4_S10_1
            case StateId.TEST4_S10_1:
                switch (eventId)
                {
                    case EventId.DO: this.ROOT_do(); break; // First ancestor handler for this event
                    case EventId.EV2: this.TEST4_ROOT_ev2(); break; // First ancestor handler for this event
                    case EventId.EV3: this.TEST4_ROOT_ev3(); break; // First ancestor handler for this event
                    case EventId.EV4: this.TEST4_S10_ev4(); break; // First ancestor handler for this event
                }
                break;
            
            // STATE: TEST4_S2
            case StateId.TEST4_S2:
                switch (eventId)
                {
                    case EventId.EV1: this.TEST4_S2_ev1(); break;
                    case EventId.DO: this.ROOT_do(); break; // First ancestor handler for this event
                    case EventId.EV2: this.TEST4_ROOT_ev2(); break; // First ancestor handler for this event
                    case EventId.EV3: this.TEST4_ROOT_ev3(); break; // First ancestor handler for this event
                    case EventId.EV4: this.TEST4_ROOT_ev4(); break; // First ancestor handler for this event
                }
                break;
            
            // STATE: TEST4_S20
            case StateId.TEST4_S20:
                switch (eventId)
                {
                    case EventId.EV4: this.TEST4_S20_ev4(); break;
                    case EventId.DO: this.ROOT_do(); break; // First ancestor handler for this event
                    case EventId.EV2: this.TEST4_ROOT_ev2(); break; // First ancestor handler for this event
                    case EventId.EV3: this.TEST4_ROOT_ev3(); break; // First ancestor handler for this event
                }
                break;
            
            // STATE: TEST4_S20_1
            case StateId.TEST4_S20_1:
                switch (eventId)
                {
                    case EventId.DO: this.ROOT_do(); break; // First ancestor handler for this event
                    case EventId.EV2: this.TEST4_ROOT_ev2(); break; // First ancestor handler for this event
                    case EventId.EV3: this.TEST4_ROOT_ev3(); break; // First ancestor handler for this event
                    case EventId.EV4: this.TEST4_S20_ev4(); break; // First ancestor handler for this event
                }
                break;
            
            // STATE: TEST4_S3
            case StateId.TEST4_S3:
                switch (eventId)
                {
                    case EventId.EV1: this.TEST4_S3_ev1(); break;
                    case EventId.DO: this.ROOT_do(); break; // First ancestor handler for this event
                    case EventId.EV2: this.TEST4_ROOT_ev2(); break; // First ancestor handler for this event
                    case EventId.EV3: this.TEST4_ROOT_ev3(); break; // First ancestor handler for this event
                    case EventId.EV4: this.TEST4_ROOT_ev4(); break; // First ancestor handler for this event
                }
                break;
            
            // STATE: TEST5_PARENT_CHILD_TRANSITIONS_ALIAS
            case StateId.TEST5_PARENT_CHILD_TRANSITIONS_ALIAS:
                switch (eventId)
                {
                    case EventId.DO: this.ROOT_do(); break; // First ancestor handler for this event
                }
                break;
            
            // STATE: TEST5_ROOT
            case StateId.TEST5_ROOT:
                switch (eventId)
                {
                    case EventId.EV2: this.TEST5_ROOT_ev2(); break;
                    case EventId.DO: this.ROOT_do(); break; // First ancestor handler for this event
                }
                break;
            
            // STATE: TEST5_S1
            case StateId.TEST5_S1:
                switch (eventId)
                {
                    case EventId.EV1: this.TEST5_S1_ev1(); break;
                    case EventId.DO: this.ROOT_do(); break; // First ancestor handler for this event
                    case EventId.EV2: this.TEST5_ROOT_ev2(); break; // First ancestor handler for this event
                }
                break;
            
            // STATE: TEST5_S2
            case StateId.TEST5_S2:
                switch (eventId)
                {
                    case EventId.EV1: this.TEST5_S2_ev1(); break;
                    case EventId.DO: this.ROOT_do(); break; // First ancestor handler for this event
                    case EventId.EV2: this.TEST5_ROOT_ev2(); break; // First ancestor handler for this event
                }
                break;
            
            // STATE: TEST5_S3
            case StateId.TEST5_S3:
                switch (eventId)
                {
                    case EventId.EV1: this.TEST5_S3_ev1(); break;
                    case EventId.DO: this.ROOT_do(); break; // First ancestor handler for this event
                    case EventId.EV2: this.TEST5_ROOT_ev2(); break; // First ancestor handler for this event
                }
                break;
            
            // STATE: TEST6_VARS_EXPANSIONS
            case StateId.TEST6_VARS_EXPANSIONS:
                switch (eventId)
                {
                    case EventId.DO: this.ROOT_do(); break; // First ancestor handler for this event
                }
                break;
            
            // STATE: TEST6_ROOT
            case StateId.TEST6_ROOT:
                switch (eventId)
                {
                    case EventId.DO: this.ROOT_do(); break; // First ancestor handler for this event
                }
                break;
            
            // STATE: AUTO_VAR_TEST
            case StateId.AUTO_VAR_TEST:
                switch (eventId)
                {
                    case EventId.DO: this.ROOT_do(); break; // First ancestor handler for this event
                }
                break;
            
            // STATE: AUTO_VAR_TEST__S1
            case StateId.AUTO_VAR_TEST__S1:
                switch (eventId)
                {
                    case EventId.EV1: this.AUTO_VAR_TEST__S1_ev1(); break;
                    case EventId.DO: this.ROOT_do(); break; // First ancestor handler for this event
                }
                break;
            
            // STATE: AUTO_VAR_TEST__S2
            case StateId.AUTO_VAR_TEST__S2:
                switch (eventId)
                {
                    case EventId.DO: this.ROOT_do(); break; // First ancestor handler for this event
                }
                break;
            
            // STATE: META_EXPANSIONS
            case StateId.META_EXPANSIONS:
                switch (eventId)
                {
                    case EventId.DO: this.ROOT_do(); break; // First ancestor handler for this event
                }
                break;
            
            // STATE: META_EXPANSIONS__S1
            case StateId.META_EXPANSIONS__S1:
                switch (eventId)
                {
                    case EventId.EV1: this.META_EXPANSIONS__S1_ev1(); break;
                    case EventId.DO: this.ROOT_do(); break; // First ancestor handler for this event
                }
                break;
            
            // STATE: META_EXPANSIONS__S2
            case StateId.META_EXPANSIONS__S2:
                switch (eventId)
                {
                    case EventId.EV1: this.META_EXPANSIONS__S2_ev1(); break;
                    case EventId.EV2: this.META_EXPANSIONS__S2_ev2(); break;
                    case EventId.DO: this.ROOT_do(); break; // First ancestor handler for this event
                }
                break;
            
            // STATE: S3
            case StateId.S3:
                switch (eventId)
                {
                    case EventId.EV1: this.S3_ev1(); break;
                    case EventId.DO: this.ROOT_do(); break; // First ancestor handler for this event
                }
                break;
            
            // STATE: S4
            case StateId.S4:
                switch (eventId)
                {
                    case EventId.DO: this.ROOT_do(); break; // First ancestor handler for this event
                }
                break;
            
            // STATE: S5
            case StateId.S5:
                switch (eventId)
                {
                    case EventId.DO: this.ROOT_do(); break; // First ancestor handler for this event
                }
                break;
            
            // STATE: NORMAL
            case StateId.NORMAL:
                switch (eventId)
                {
                    case EventId.DO: this.ROOT_do(); break; // First ancestor handler for this event
                }
                break;
            
            // STATE: NORMAL__S1
            case StateId.NORMAL__S1:
                switch (eventId)
                {
                    case EventId.EV1: this.NORMAL__S1_ev1(); break;
                    case EventId.DO: this.ROOT_do(); break; // First ancestor handler for this event
                }
                break;
            
            // STATE: NORMAL__S2
            case StateId.NORMAL__S2:
                switch (eventId)
                {
                    case EventId.DO: this.ROOT_do(); break; // First ancestor handler for this event
                }
                break;
            
            // STATE: TEST6_VARS_EXPANSIONS__DECIDE
            case StateId.TEST6_VARS_EXPANSIONS__DECIDE:
                switch (eventId)
                {
                    case EventId.EV1: this.TEST6_VARS_EXPANSIONS__DECIDE_ev1(); break;
                    case EventId.EV2: this.TEST6_VARS_EXPANSIONS__DECIDE_ev2(); break;
                    case EventId.EV3: this.TEST6_VARS_EXPANSIONS__DECIDE_ev3(); break;
                    case EventId.DO: this.ROOT_do(); break; // First ancestor handler for this event
                }
                break;
            
            // STATE: TEST7_INITIAL_OR_HISTORY
            case StateId.TEST7_INITIAL_OR_HISTORY:
                switch (eventId)
                {
                    case EventId.DO: this.ROOT_do(); break; // First ancestor handler for this event
                }
                break;
            
            // STATE: TEST7
            case StateId.TEST7:
                switch (eventId)
                {
                    case EventId.DO: this.ROOT_do(); break; // First ancestor handler for this event
                }
                break;
            
            // STATE: T7__DEEP_HISTORY1
            case StateId.T7__DEEP_HISTORY1:
                switch (eventId)
                {
                    case EventId.DO: this.ROOT_do(); break; // First ancestor handler for this event
                }
                break;
            
            // STATE: T7__DH1__SANTAS_WORKSHOP
            case StateId.T7__DH1__SANTAS_WORKSHOP:
                switch (eventId)
                {
                    case EventId.DO: this.ROOT_do(); break; // First ancestor handler for this event
                }
                break;
            
            // STATE: T7__DH1__ALIENS_DETECTED
            case StateId.T7__DH1__ALIENS_DETECTED:
                switch (eventId)
                {
                    case EventId.EV8: this.T7__DH1__ALIENS_DETECTED_ev8(); break;
                    case EventId.DO: this.ROOT_do(); break; // First ancestor handler for this event
                }
                break;
            
            // STATE: T7__DH1__GET_BACKUP
            case StateId.T7__DH1__GET_BACKUP:
                switch (eventId)
                {
                    case EventId.DO: this.ROOT_do(); break; // First ancestor handler for this event
                    case EventId.EV8: this.T7__DH1__ALIENS_DETECTED_ev8(); break; // First ancestor handler for this event
                }
                break;
            
            // STATE: T7__DH1__HERO
            case StateId.T7__DH1__HERO:
                switch (eventId)
                {
                    case EventId.DO: this.ROOT_do(); break; // First ancestor handler for this event
                    case EventId.EV8: this.T7__DH1__ALIENS_DETECTED_ev8(); break; // First ancestor handler for this event
                }
                break;
            
            // STATE: T7__DH1__CALL_BATMAN
            case StateId.T7__DH1__CALL_BATMAN:
                switch (eventId)
                {
                    case EventId.EV1: this.T7__DH1__CALL_BATMAN_ev1(); break;
                    case EventId.DO: this.ROOT_do(); break; // First ancestor handler for this event
                    case EventId.EV8: this.T7__DH1__ALIENS_DETECTED_ev8(); break; // First ancestor handler for this event
                }
                break;
            
            // STATE: T7__DH1__CALL_THOR
            case StateId.T7__DH1__CALL_THOR:
                switch (eventId)
                {
                    case EventId.EV1: this.T7__DH1__CALL_THOR_ev1(); break;
                    case EventId.DO: this.ROOT_do(); break; // First ancestor handler for this event
                    case EventId.EV8: this.T7__DH1__ALIENS_DETECTED_ev8(); break; // First ancestor handler for this event
                }
                break;
            
            // STATE: T7__DH1__LOCAL_HELP
            case StateId.T7__DH1__LOCAL_HELP:
                switch (eventId)
                {
                    case EventId.DO: this.ROOT_do(); break; // First ancestor handler for this event
                    case EventId.EV8: this.T7__DH1__ALIENS_DETECTED_ev8(); break; // First ancestor handler for this event
                }
                break;
            
            // STATE: T7__DH1__BUDDY_ELF
            case StateId.T7__DH1__BUDDY_ELF:
                switch (eventId)
                {
                    case EventId.EV1: this.T7__DH1__BUDDY_ELF_ev1(); break;
                    case EventId.DO: this.ROOT_do(); break; // First ancestor handler for this event
                    case EventId.EV8: this.T7__DH1__ALIENS_DETECTED_ev8(); break; // First ancestor handler for this event
                }
                break;
            
            // STATE: T7__DH1__POLAR_BEARS
            case StateId.T7__DH1__POLAR_BEARS:
                switch (eventId)
                {
                    case EventId.DO: this.ROOT_do(); break; // First ancestor handler for this event
                    case EventId.EV8: this.T7__DH1__ALIENS_DETECTED_ev8(); break; // First ancestor handler for this event
                }
                break;
            
            // STATE: T7__DH1__GIVE_COOKIES
            case StateId.T7__DH1__GIVE_COOKIES:
                switch (eventId)
                {
                    case EventId.EV1: this.T7__DH1__GIVE_COOKIES_ev1(); break;
                    case EventId.DO: this.ROOT_do(); break; // First ancestor handler for this event
                    case EventId.EV8: this.T7__DH1__ALIENS_DETECTED_ev8(); break; // First ancestor handler for this event
                }
                break;
            
            // STATE: T7__DH1__SNOWBALL_FIGHT
            case StateId.T7__DH1__SNOWBALL_FIGHT:
                switch (eventId)
                {
                    case EventId.EV1: this.T7__DH1__SNOWBALL_FIGHT_ev1(); break;
                    case EventId.DO: this.ROOT_do(); break; // First ancestor handler for this event
                    case EventId.EV8: this.T7__DH1__ALIENS_DETECTED_ev8(); break; // First ancestor handler for this event
                }
                break;
            
            // STATE: T7__DH1__BUILD
            case StateId.T7__DH1__BUILD:
                switch (eventId)
                {
                    case EventId.EV6: this.T7__DH1__BUILD_ev6(); break;
                    case EventId.EV7: this.T7__DH1__BUILD_ev7(); break;
                    case EventId.DO: this.ROOT_do(); break; // First ancestor handler for this event
                }
                break;
            
            // STATE: T7__DH1__TOOL
            case StateId.T7__DH1__TOOL:
                switch (eventId)
                {
                    case EventId.EV2: this.T7__DH1__TOOL_ev2(); break;
                    case EventId.DO: this.ROOT_do(); break; // First ancestor handler for this event
                    case EventId.EV6: this.T7__DH1__BUILD_ev6(); break; // First ancestor handler for this event
                    case EventId.EV7: this.T7__DH1__BUILD_ev7(); break; // First ancestor handler for this event
                }
                break;
            
            // STATE: T7__DH1__CIRCULAR_SAW
            case StateId.T7__DH1__CIRCULAR_SAW:
                switch (eventId)
                {
                    case EventId.DO: this.ROOT_do(); break; // First ancestor handler for this event
                    case EventId.EV2: this.T7__DH1__TOOL_ev2(); break; // First ancestor handler for this event
                    case EventId.EV6: this.T7__DH1__BUILD_ev6(); break; // First ancestor handler for this event
                    case EventId.EV7: this.T7__DH1__BUILD_ev7(); break; // First ancestor handler for this event
                }
                break;
            
            // STATE: T7__DH1__IMPACT_DRILL
            case StateId.T7__DH1__IMPACT_DRILL:
                switch (eventId)
                {
                    case EventId.EV1: this.T7__DH1__IMPACT_DRILL_ev1(); break;
                    case EventId.DO: this.ROOT_do(); break; // First ancestor handler for this event
                    case EventId.EV2: this.T7__DH1__TOOL_ev2(); break; // First ancestor handler for this event
                    case EventId.EV6: this.T7__DH1__BUILD_ev6(); break; // First ancestor handler for this event
                    case EventId.EV7: this.T7__DH1__BUILD_ev7(); break; // First ancestor handler for this event
                }
                break;
            
            // STATE: T7__DH1__TOY
            case StateId.T7__DH1__TOY:
                switch (eventId)
                {
                    case EventId.EV1: this.T7__DH1__TOY_ev1(); break;
                    case EventId.DO: this.ROOT_do(); break; // First ancestor handler for this event
                    case EventId.EV6: this.T7__DH1__BUILD_ev6(); break; // First ancestor handler for this event
                    case EventId.EV7: this.T7__DH1__BUILD_ev7(); break; // First ancestor handler for this event
                }
                break;
            
            // STATE: T7__DH1__GLOW_WORM
            case StateId.T7__DH1__GLOW_WORM:
                switch (eventId)
                {
                    case EventId.EV1: this.T7__DH1__GLOW_WORM_ev1(); break;
                    case EventId.DO: this.ROOT_do(); break; // First ancestor handler for this event
                    case EventId.EV6: this.T7__DH1__BUILD_ev6(); break; // First ancestor handler for this event
                    case EventId.EV7: this.T7__DH1__BUILD_ev7(); break; // First ancestor handler for this event
                }
                break;
            
            // STATE: T7__DH1__RACE_CAR
            case StateId.T7__DH1__RACE_CAR:
                switch (eventId)
                {
                    case EventId.EV1: this.T7__DH1__RACE_CAR_ev1(); break;
                    case EventId.DO: this.ROOT_do(); break; // First ancestor handler for this event
                    case EventId.EV6: this.T7__DH1__BUILD_ev6(); break; // First ancestor handler for this event
                    case EventId.EV7: this.T7__DH1__BUILD_ev7(); break; // First ancestor handler for this event
                }
                break;
            
            // STATE: T7__DH1__ROBOT
            case StateId.T7__DH1__ROBOT:
                switch (eventId)
                {
                    case EventId.DO: this.ROOT_do(); break; // First ancestor handler for this event
                    case EventId.EV1: this.T7__DH1__TOY_ev1(); break; // First ancestor handler for this event
                    case EventId.EV6: this.T7__DH1__BUILD_ev6(); break; // First ancestor handler for this event
                    case EventId.EV7: this.T7__DH1__BUILD_ev7(); break; // First ancestor handler for this event
                }
                break;
            
            // STATE: T7__DH1__BATTLEBOT
            case StateId.T7__DH1__BATTLEBOT:
                switch (eventId)
                {
                    case EventId.EV1: this.T7__DH1__BATTLEBOT_ev1(); break;
                    case EventId.DO: this.ROOT_do(); break; // First ancestor handler for this event
                    case EventId.EV6: this.T7__DH1__BUILD_ev6(); break; // First ancestor handler for this event
                    case EventId.EV7: this.T7__DH1__BUILD_ev7(); break; // First ancestor handler for this event
                }
                break;
            
            // STATE: T7__DH1__WALL_E
            case StateId.T7__DH1__WALL_E:
                switch (eventId)
                {
                    case EventId.DO: this.ROOT_do(); break; // First ancestor handler for this event
                    case EventId.EV1: this.T7__DH1__TOY_ev1(); break; // First ancestor handler for this event
                    case EventId.EV6: this.T7__DH1__BUILD_ev6(); break; // First ancestor handler for this event
                    case EventId.EV7: this.T7__DH1__BUILD_ev7(); break; // First ancestor handler for this event
                }
                break;
            
            // STATE: T7__DH1__TEDDY_BEAR
            case StateId.T7__DH1__TEDDY_BEAR:
                switch (eventId)
                {
                    case EventId.EV1: this.T7__DH1__TEDDY_BEAR_ev1(); break;
                    case EventId.DO: this.ROOT_do(); break; // First ancestor handler for this event
                    case EventId.EV6: this.T7__DH1__BUILD_ev6(); break; // First ancestor handler for this event
                    case EventId.EV7: this.T7__DH1__BUILD_ev7(); break; // First ancestor handler for this event
                }
                break;
            
            // STATE: T7__DEEP_HISTORY2
            case StateId.T7__DEEP_HISTORY2:
                switch (eventId)
                {
                    case EventId.DO: this.ROOT_do(); break; // First ancestor handler for this event
                }
                break;
            
            // STATE: T7__DEEP_HISTORY2__T7__state_0
            case StateId.T7__DEEP_HISTORY2__T7__STATE_0:
                switch (eventId)
                {
                    case EventId.EVOPEN: this.T7__DEEP_HISTORY2__T7__STATE_0_evopen(); break;
                    case EventId.DO: this.ROOT_do(); break; // First ancestor handler for this event
                }
                break;
            
            // STATE: T7__DEEP_HISTORY2__T7__state_1
            case StateId.T7__DEEP_HISTORY2__T7__STATE_1:
                switch (eventId)
                {
                    case EventId.EVSTEP: this.T7__DEEP_HISTORY2__T7__STATE_1_evstep(); break;
                    case EventId.DO: this.ROOT_do(); break; // First ancestor handler for this event
                    case EventId.EVOPEN: this.T7__DEEP_HISTORY2__T7__STATE_0_evopen(); break; // First ancestor handler for this event
                }
                break;
            
            // STATE: T7__DEEP_HISTORY2__T7__state_2
            case StateId.T7__DEEP_HISTORY2__T7__STATE_2:
                switch (eventId)
                {
                    case EventId.EVBACK: this.T7__DEEP_HISTORY2__T7__STATE_2_evback(); break;
                    case EventId.DO: this.ROOT_do(); break; // First ancestor handler for this event
                    case EventId.EVOPEN: this.T7__DEEP_HISTORY2__T7__STATE_0_evopen(); break; // First ancestor handler for this event
                }
                break;
            
            // STATE: T7__DEEP_HISTORY2__T7__state_6
            case StateId.T7__DEEP_HISTORY2__T7__STATE_6:
                switch (eventId)
                {
                    case EventId.EVSTEP: this.T7__DEEP_HISTORY2__T7__STATE_6_evstep(); break;
                    case EventId.DO: this.ROOT_do(); break; // First ancestor handler for this event
                    case EventId.EVOPEN: this.T7__DEEP_HISTORY2__T7__STATE_0_evopen(); break; // First ancestor handler for this event
                    case EventId.EVBACK: this.T7__DEEP_HISTORY2__T7__STATE_2_evback(); break; // First ancestor handler for this event
                }
                break;
            
            // STATE: T7__DEEP_HISTORY2__T7__state_9
            case StateId.T7__DEEP_HISTORY2__T7__STATE_9:
                switch (eventId)
                {
                    case EventId.DO: this.ROOT_do(); break; // First ancestor handler for this event
                    case EventId.EVOPEN: this.T7__DEEP_HISTORY2__T7__STATE_0_evopen(); break; // First ancestor handler for this event
                    case EventId.EVBACK: this.T7__DEEP_HISTORY2__T7__STATE_2_evback(); break; // First ancestor handler for this event
                }
                break;
            
            // STATE: T7__DEEP_HISTORY2__T7__state_3
            case StateId.T7__DEEP_HISTORY2__T7__STATE_3:
                switch (eventId)
                {
                    case EventId.EVCLOSE: this.T7__DEEP_HISTORY2__T7__STATE_3_evclose(); break;
                    case EventId.DO: this.ROOT_do(); break; // First ancestor handler for this event
                }
                break;
            
            // STATE: T7__DEEP_HISTORY3
            case StateId.T7__DEEP_HISTORY3:
                switch (eventId)
                {
                    case EventId.DO: this.ROOT_do(); break; // First ancestor handler for this event
                }
                break;
            
            // STATE: T7__DEEP_HISTORY3__T7__state_0
            case StateId.T7__DEEP_HISTORY3__T7__STATE_0:
                switch (eventId)
                {
                    case EventId.EVOPEN: this.T7__DEEP_HISTORY3__T7__STATE_0_evopen(); break;
                    case EventId.DO: this.ROOT_do(); break; // First ancestor handler for this event
                }
                break;
            
            // STATE: T7__DEEP_HISTORY3__T7__state_1
            case StateId.T7__DEEP_HISTORY3__T7__STATE_1:
                switch (eventId)
                {
                    case EventId.EVSTEP: this.T7__DEEP_HISTORY3__T7__STATE_1_evstep(); break;
                    case EventId.DO: this.ROOT_do(); break; // First ancestor handler for this event
                    case EventId.EVOPEN: this.T7__DEEP_HISTORY3__T7__STATE_0_evopen(); break; // First ancestor handler for this event
                }
                break;
            
            // STATE: T7__DEEP_HISTORY3__T7__state_2
            case StateId.T7__DEEP_HISTORY3__T7__STATE_2:
                switch (eventId)
                {
                    case EventId.EVBACK: this.T7__DEEP_HISTORY3__T7__STATE_2_evback(); break;
                    case EventId.DO: this.ROOT_do(); break; // First ancestor handler for this event
                    case EventId.EVOPEN: this.T7__DEEP_HISTORY3__T7__STATE_0_evopen(); break; // First ancestor handler for this event
                }
                break;
            
            // STATE: T7__DEEP_HISTORY3__T7__state_6
            case StateId.T7__DEEP_HISTORY3__T7__STATE_6:
                switch (eventId)
                {
                    case EventId.EVSTEP: this.T7__DEEP_HISTORY3__T7__STATE_6_evstep(); break;
                    case EventId.DO: this.ROOT_do(); break; // First ancestor handler for this event
                    case EventId.EVOPEN: this.T7__DEEP_HISTORY3__T7__STATE_0_evopen(); break; // First ancestor handler for this event
                    case EventId.EVBACK: this.T7__DEEP_HISTORY3__T7__STATE_2_evback(); break; // First ancestor handler for this event
                }
                break;
            
            // STATE: T7__DEEP_HISTORY3__T7__state_9
            case StateId.T7__DEEP_HISTORY3__T7__STATE_9:
                switch (eventId)
                {
                    case EventId.DO: this.ROOT_do(); break; // First ancestor handler for this event
                    case EventId.EVOPEN: this.T7__DEEP_HISTORY3__T7__STATE_0_evopen(); break; // First ancestor handler for this event
                    case EventId.EVBACK: this.T7__DEEP_HISTORY3__T7__STATE_2_evback(); break; // First ancestor handler for this event
                }
                break;
            
            // STATE: T7__DEEP_HISTORY3__T7__state_3
            case StateId.T7__DEEP_HISTORY3__T7__STATE_3:
                switch (eventId)
                {
                    case EventId.EVCLOSE: this.T7__DEEP_HISTORY3__T7__STATE_3_evclose(); break;
                    case EventId.DO: this.ROOT_do(); break; // First ancestor handler for this event
                }
                break;
            
            // STATE: T7__HISTORY1
            case StateId.T7__HISTORY1:
                switch (eventId)
                {
                    case EventId.DO: this.ROOT_do(); break; // First ancestor handler for this event
                }
                break;
            
            // STATE: T7__H1__OFF
            case StateId.T7__H1__OFF:
                switch (eventId)
                {
                    case EventId.EV3: this.T7__H1__OFF_ev3(); break;
                    case EventId.EV4: this.T7__H1__OFF_ev4(); break;
                    case EventId.EV7: this.T7__H1__OFF_ev7(); break;
                    case EventId.DO: this.ROOT_do(); break; // First ancestor handler for this event
                }
                break;
            
            // STATE: T7__H1__OFF1
            case StateId.T7__H1__OFF1:
                switch (eventId)
                {
                    case EventId.EV1: this.T7__H1__OFF1_ev1(); break;
                    case EventId.DO: this.ROOT_do(); break; // First ancestor handler for this event
                    case EventId.EV3: this.T7__H1__OFF_ev3(); break; // First ancestor handler for this event
                    case EventId.EV4: this.T7__H1__OFF_ev4(); break; // First ancestor handler for this event
                    case EventId.EV7: this.T7__H1__OFF_ev7(); break; // First ancestor handler for this event
                }
                break;
            
            // STATE: T7__H1__OFF2
            case StateId.T7__H1__OFF2:
                switch (eventId)
                {
                    case EventId.EV1: this.T7__H1__OFF2_ev1(); break;
                    case EventId.DO: this.ROOT_do(); break; // First ancestor handler for this event
                    case EventId.EV3: this.T7__H1__OFF_ev3(); break; // First ancestor handler for this event
                    case EventId.EV4: this.T7__H1__OFF_ev4(); break; // First ancestor handler for this event
                    case EventId.EV7: this.T7__H1__OFF_ev7(); break; // First ancestor handler for this event
                }
                break;
            
            // STATE: T7__H1__OFF3
            case StateId.T7__H1__OFF3:
                switch (eventId)
                {
                    case EventId.DO: this.ROOT_do(); break; // First ancestor handler for this event
                    case EventId.EV3: this.T7__H1__OFF_ev3(); break; // First ancestor handler for this event
                    case EventId.EV4: this.T7__H1__OFF_ev4(); break; // First ancestor handler for this event
                    case EventId.EV7: this.T7__H1__OFF_ev7(); break; // First ancestor handler for this event
                }
                break;
            
            // STATE: T7__H1__ON
            case StateId.T7__H1__ON:
                switch (eventId)
                {
                    case EventId.EV6: this.T7__H1__ON_ev6(); break;
                    case EventId.DO: this.ROOT_do(); break; // First ancestor handler for this event
                }
                break;
            
            // STATE: T7__H1__ON1
            case StateId.T7__H1__ON1:
                switch (eventId)
                {
                    case EventId.EV1: this.T7__H1__ON1_ev1(); break;
                    case EventId.DO: this.ROOT_do(); break; // First ancestor handler for this event
                    case EventId.EV6: this.T7__H1__ON_ev6(); break; // First ancestor handler for this event
                }
                break;
            
            // STATE: T7__H1__ON2
            case StateId.T7__H1__ON2:
                switch (eventId)
                {
                    case EventId.EV1: this.T7__H1__ON2_ev1(); break;
                    case EventId.DO: this.ROOT_do(); break; // First ancestor handler for this event
                    case EventId.EV6: this.T7__H1__ON_ev6(); break; // First ancestor handler for this event
                }
                break;
            
            // STATE: T7__H1__ON3
            case StateId.T7__H1__ON3:
                switch (eventId)
                {
                    case EventId.EV1: this.T7__H1__ON3_ev1(); break;
                    case EventId.DO: this.ROOT_do(); break; // First ancestor handler for this event
                    case EventId.EV6: this.T7__H1__ON_ev6(); break; // First ancestor handler for this event
                }
                break;
            
            // STATE: T7__INITIAL1
            case StateId.T7__INITIAL1:
                switch (eventId)
                {
                    case EventId.DO: this.ROOT_do(); break; // First ancestor handler for this event
                }
                break;
            
            // STATE: T7__INITIAL1__PARENT
            case StateId.T7__INITIAL1__PARENT:
                switch (eventId)
                {
                    case EventId.EV5: this.T7__INITIAL1__PARENT_ev5(); break;
                    case EventId.DO: this.ROOT_do(); break; // First ancestor handler for this event
                }
                break;
            
            // STATE: T7__INITIAL1__G
            case StateId.T7__INITIAL1__G:
                switch (eventId)
                {
                    case EventId.EV2: this.T7__INITIAL1__G_ev2(); break;
                    case EventId.DO: this.ROOT_do(); break; // First ancestor handler for this event
                    case EventId.EV5: this.T7__INITIAL1__PARENT_ev5(); break; // First ancestor handler for this event
                }
                break;
            
            // STATE: T7__INITIAL1__G_S1
            case StateId.T7__INITIAL1__G_S1:
                switch (eventId)
                {
                    case EventId.DO: this.ROOT_do(); break; // First ancestor handler for this event
                    case EventId.EV2: this.T7__INITIAL1__G_ev2(); break; // First ancestor handler for this event
                    case EventId.EV5: this.T7__INITIAL1__PARENT_ev5(); break; // First ancestor handler for this event
                }
                break;
            
            // STATE: T7__INITIAL1__G_S2
            case StateId.T7__INITIAL1__G_S2:
                switch (eventId)
                {
                    case EventId.DO: this.ROOT_do(); break; // First ancestor handler for this event
                    case EventId.EV2: this.T7__INITIAL1__G_ev2(); break; // First ancestor handler for this event
                    case EventId.EV5: this.T7__INITIAL1__PARENT_ev5(); break; // First ancestor handler for this event
                }
                break;
            
            // STATE: T7__INITIAL1__G_S3
            case StateId.T7__INITIAL1__G_S3:
                switch (eventId)
                {
                    case EventId.DO: this.ROOT_do(); break; // First ancestor handler for this event
                    case EventId.EV2: this.T7__INITIAL1__G_ev2(); break; // First ancestor handler for this event
                    case EventId.EV5: this.T7__INITIAL1__PARENT_ev5(); break; // First ancestor handler for this event
                }
                break;
            
            // STATE: T7__INITIAL1__S1
            case StateId.T7__INITIAL1__S1:
                switch (eventId)
                {
                    case EventId.EV1: this.T7__INITIAL1__S1_ev1(); break;
                    case EventId.EV3: this.T7__INITIAL1__S1_ev3(); break;
                    case EventId.DO: this.ROOT_do(); break; // First ancestor handler for this event
                    case EventId.EV5: this.T7__INITIAL1__PARENT_ev5(); break; // First ancestor handler for this event
                }
                break;
            
            // STATE: TEST7_DECIDE
            case StateId.TEST7_DECIDE:
                switch (eventId)
                {
                    case EventId.EV1: this.TEST7_DECIDE_ev1(); break;
                    case EventId.EV2: this.TEST7_DECIDE_ev2(); break;
                    case EventId.EV3: this.TEST7_DECIDE_ev3(); break;
                    case EventId.EV4: this.TEST7_DECIDE_ev4(); break;
                    case EventId.EV5: this.TEST7_DECIDE_ev5(); break;
                    case EventId.DO: this.ROOT_do(); break; // First ancestor handler for this event
                }
                break;
            
            // STATE: TEST8_ENTRY_CHOICE
            case StateId.TEST8_ENTRY_CHOICE:
                switch (eventId)
                {
                    case EventId.DO: this.ROOT_do(); break; // First ancestor handler for this event
                }
                break;
            
            // STATE: TEST8_ROOT
            case StateId.TEST8_ROOT:
                switch (eventId)
                {
                    case EventId.EV5: this.TEST8_ROOT_ev5(); break;
                    case EventId.EV3: this.TEST8_ROOT_ev3(); break;
                    case EventId.DO: this.ROOT_do(); break; // First ancestor handler for this event
                }
                break;
            
            // STATE: TEST8_G
            case StateId.TEST8_G:
                switch (eventId)
                {
                    case EventId.EV2: this.TEST8_G_ev2(); break;
                    case EventId.DO: this.ROOT_do(); break; // First ancestor handler for this event
                    case EventId.EV3: this.TEST8_ROOT_ev3(); break; // First ancestor handler for this event
                    case EventId.EV5: this.TEST8_ROOT_ev5(); break; // First ancestor handler for this event
                }
                break;
            
            // STATE: TEST8_G_S1
            case StateId.TEST8_G_S1:
                switch (eventId)
                {
                    case EventId.DO: this.ROOT_do(); break; // First ancestor handler for this event
                    case EventId.EV2: this.TEST8_G_ev2(); break; // First ancestor handler for this event
                    case EventId.EV3: this.TEST8_ROOT_ev3(); break; // First ancestor handler for this event
                    case EventId.EV5: this.TEST8_ROOT_ev5(); break; // First ancestor handler for this event
                }
                break;
            
            // STATE: TEST8_G_S2
            case StateId.TEST8_G_S2:
                switch (eventId)
                {
                    case EventId.DO: this.ROOT_do(); break; // First ancestor handler for this event
                    case EventId.EV2: this.TEST8_G_ev2(); break; // First ancestor handler for this event
                    case EventId.EV3: this.TEST8_ROOT_ev3(); break; // First ancestor handler for this event
                    case EventId.EV5: this.TEST8_ROOT_ev5(); break; // First ancestor handler for this event
                }
                break;
            
            // STATE: TEST8_G_S3
            case StateId.TEST8_G_S3:
                switch (eventId)
                {
                    case EventId.DO: this.ROOT_do(); break; // First ancestor handler for this event
                    case EventId.EV2: this.TEST8_G_ev2(); break; // First ancestor handler for this event
                    case EventId.EV3: this.TEST8_ROOT_ev3(); break; // First ancestor handler for this event
                    case EventId.EV5: this.TEST8_ROOT_ev5(); break; // First ancestor handler for this event
                }
                break;
            
            // STATE: TEST8_S1
            case StateId.TEST8_S1:
                switch (eventId)
                {
                    case EventId.EV1: this.TEST8_S1_ev1(); break;
                    case EventId.EV3: this.TEST8_S1_ev3(); break;
                    case EventId.EV6: this.TEST8_S1_ev6(); break;
                    case EventId.DO: this.ROOT_do(); break; // First ancestor handler for this event
                    case EventId.EV5: this.TEST8_ROOT_ev5(); break; // First ancestor handler for this event
                }
                break;
            
            // STATE: TEST9_EXIT_CHOICE
            case StateId.TEST9_EXIT_CHOICE:
                switch (eventId)
                {
                    case EventId.DO: this.ROOT_do(); break; // First ancestor handler for this event
                }
                break;
            
            // STATE: TEST9_DECIDE
            case StateId.TEST9_DECIDE:
                switch (eventId)
                {
                    case EventId.EV1: this.TEST9_DECIDE_ev1(); break;
                    case EventId.EV2: this.TEST9_DECIDE_ev2(); break;
                    case EventId.EV3: this.TEST9_DECIDE_ev3(); break;
                    case EventId.DO: this.ROOT_do(); break; // First ancestor handler for this event
                }
                break;
            
            // STATE: TEST9_ROOT
            case StateId.TEST9_ROOT:
                switch (eventId)
                {
                    case EventId.EV5: this.TEST9_ROOT_ev5(); break;
                    case EventId.DO: this.ROOT_do(); break; // First ancestor handler for this event
                }
                break;
            
            // STATE: TEST9_G_S1
            case StateId.TEST9_G_S1:
                switch (eventId)
                {
                    case EventId.DO: this.ROOT_do(); break; // First ancestor handler for this event
                    case EventId.EV5: this.TEST9_ROOT_ev5(); break; // First ancestor handler for this event
                }
                break;
            
            // STATE: TEST9_G_S2
            case StateId.TEST9_G_S2:
                switch (eventId)
                {
                    case EventId.DO: this.ROOT_do(); break; // First ancestor handler for this event
                    case EventId.EV5: this.TEST9_ROOT_ev5(); break; // First ancestor handler for this event
                }
                break;
            
            // STATE: TEST9_G_S3
            case StateId.TEST9_G_S3:
                switch (eventId)
                {
                    case EventId.DO: this.ROOT_do(); break; // First ancestor handler for this event
                    case EventId.EV5: this.TEST9_ROOT_ev5(); break; // First ancestor handler for this event
                }
                break;
            
            // STATE: TEST9_G_S4
            case StateId.TEST9_G_S4:
                switch (eventId)
                {
                    case EventId.DO: this.ROOT_do(); break; // First ancestor handler for this event
                    case EventId.EV5: this.TEST9_ROOT_ev5(); break; // First ancestor handler for this event
                }
                break;
            
            // STATE: TEST9_S1
            case StateId.TEST9_S1:
                switch (eventId)
                {
                    case EventId.DO: this.ROOT_do(); break; // First ancestor handler for this event
                    case EventId.EV5: this.TEST9_ROOT_ev5(); break; // First ancestor handler for this event
                }
                break;
            
            // STATE: TEST9_S1_1
            case StateId.TEST9_S1_1:
                switch (eventId)
                {
                    case EventId.EV1: this.TEST9_S1_1_ev1(); break;
                    case EventId.DO: this.ROOT_do(); break; // First ancestor handler for this event
                    case EventId.EV5: this.TEST9_ROOT_ev5(); break; // First ancestor handler for this event
                }
                break;
            
            // STATE: TEST9A_ROOT
            case StateId.TEST9A_ROOT:
                switch (eventId)
                {
                    case EventId.DO: this.ROOT_do(); break; // First ancestor handler for this event
                }
                break;
            
            // STATE: TEST9A_S1
            case StateId.TEST9A_S1:
                switch (eventId)
                {
                    case EventId.DO: this.ROOT_do(); break; // First ancestor handler for this event
                }
                break;
            
            // STATE: TEST9A_S1_1
            case StateId.TEST9A_S1_1:
                switch (eventId)
                {
                    case EventId.EV1: this.TEST9A_S1_1_ev1(); break;
                    case EventId.DO: this.ROOT_do(); break; // First ancestor handler for this event
                }
                break;
            
            // STATE: TEST9B_ROOT
            case StateId.TEST9B_ROOT:
                switch (eventId)
                {
                    case EventId.EV1: this.TEST9B_ROOT_ev1(); break;
                    case EventId.DO: this.ROOT_do(); break; // First ancestor handler for this event
                }
                break;
            
            // STATE: TEST9B_ROOT__A1
            case StateId.TEST9B_ROOT__A1:
                switch (eventId)
                {
                    case EventId.DO: this.ROOT_do(); break; // First ancestor handler for this event
                    case EventId.EV1: this.TEST9B_ROOT_ev1(); break; // First ancestor handler for this event
                }
                break;
            
            // STATE: TEST9B_ROOT__A2
            case StateId.TEST9B_ROOT__A2:
                switch (eventId)
                {
                    case EventId.DO: this.ROOT_do(); break; // First ancestor handler for this event
                    case EventId.EV1: this.TEST9B_ROOT_ev1(); break; // First ancestor handler for this event
                }
                break;
            
            // STATE: TEST9B_ROOT__A3
            case StateId.TEST9B_ROOT__A3:
                switch (eventId)
                {
                    case EventId.DO: this.ROOT_do(); break; // First ancestor handler for this event
                    case EventId.EV1: this.TEST9B_ROOT_ev1(); break; // First ancestor handler for this event
                }
                break;
            
            // STATE: TEST9B_ROOT__A4
            case StateId.TEST9B_ROOT__A4:
                switch (eventId)
                {
                    case EventId.EV1: this.TEST9B_ROOT__A4_ev1(); break;
                    case EventId.DO: this.ROOT_do(); break; // First ancestor handler for this event
                }
                break;
            
            // STATE: TEST9B_ROOT__B1
            case StateId.TEST9B_ROOT__B1:
                switch (eventId)
                {
                    case EventId.DO: this.ROOT_do(); break; // First ancestor handler for this event
                    case EventId.EV1: this.TEST9B_ROOT_ev1(); break; // First ancestor handler for this event
                }
                break;
            
            // STATE: TEST9B_ROOT__B2
            case StateId.TEST9B_ROOT__B2:
                switch (eventId)
                {
                    case EventId.DO: this.ROOT_do(); break; // First ancestor handler for this event
                    case EventId.EV1: this.TEST9B_ROOT_ev1(); break; // First ancestor handler for this event
                }
                break;
            
            // STATE: TEST9B_ROOT__B3
            case StateId.TEST9B_ROOT__B3:
                switch (eventId)
                {
                    case EventId.DO: this.ROOT_do(); break; // First ancestor handler for this event
                    case EventId.EV1: this.TEST9B_ROOT_ev1(); break; // First ancestor handler for this event
                }
                break;
            
            // STATE: TEST9B_ROOT__B4
            case StateId.TEST9B_ROOT__B4:
                switch (eventId)
                {
                    case EventId.DO: this.ROOT_do(); break; // First ancestor handler for this event
                    case EventId.EV1: this.TEST9B_ROOT_ev1(); break; // First ancestor handler for this event
                }
                break;
            
            // STATE: UNREACHABLE
            case StateId.UNREACHABLE:
                switch (eventId)
                {
                    case EventId.DO: this.ROOT_do(); break; // First ancestor handler for this event
                }
                break;
            
            // STATE: USELESS
            case StateId.USELESS:
                switch (eventId)
                {
                    case EventId.DO: this.ROOT_do(); break; // First ancestor handler for this event
                }
                break;
        }
        
    }
    
    // This function is used when StateSmith doesn't know what the active leaf state is at
    // compile time due to sub states or when multiple states need to be exited.
    private void ExitUpToStateHandler(StateId desiredState)
    {
        while (this.stateId != desiredState)
        {
            switch (this.stateId)
            {
                case StateId.PREFIXING: this.PREFIXING_exit(); break;
                
                case StateId.PREFIXING__ORDER_MENU: this.PREFIXING__ORDER_MENU_exit(); break;
                
                case StateId.PREFIXING__OM__BEVERAGE: this.PREFIXING__OM__BEVERAGE_exit(); break;
                
                case StateId.PREFIXING__OM__BEV__NONE: this.PREFIXING__OM__BEV__NONE_exit(); break;
                
                case StateId.PREFIXING__OM__BEV__TEA: this.PREFIXING__OM__BEV__TEA_exit(); break;
                
                case StateId.PREFIXING__OM__BEV__WATER: this.PREFIXING__OM__BEV__WATER_exit(); break;
                
                case StateId.PREFIXING__OM__VEG: this.PREFIXING__OM__VEG_exit(); break;
                
                case StateId.PREFIXING__OM__VEG__NONE: this.PREFIXING__OM__VEG__NONE_exit(); break;
                
                case StateId.PREFIXING__OM__VEG__POTATO: this.PREFIXING__OM__VEG__POTATO_exit(); break;
                
                case StateId.PREFIXING__OM__VEG__YAM: this.PREFIXING__OM__VEG__YAM_exit(); break;
                
                case StateId.PREFIXING__SHOWS_MANUAL_PREFIX: this.PREFIXING__SHOWS_MANUAL_PREFIX_exit(); break;
                
                case StateId.PREFIXING__SHOWS_MANUAL_PREFIX__ORDER_MENU: this.PREFIXING__SHOWS_MANUAL_PREFIX__ORDER_MENU_exit(); break;
                
                case StateId.PREFIXING__SHOWS_MANUAL_PREFIX__OM_BEVERAGE: this.PREFIXING__SHOWS_MANUAL_PREFIX__OM_BEVERAGE_exit(); break;
                
                case StateId.PREFIXING__SHOWS_MANUAL_PREFIX__OM_BEV_NONE: this.PREFIXING__SHOWS_MANUAL_PREFIX__OM_BEV_NONE_exit(); break;
                
                case StateId.PREFIXING__SHOWS_MANUAL_PREFIX__OM_BEV_TEA: this.PREFIXING__SHOWS_MANUAL_PREFIX__OM_BEV_TEA_exit(); break;
                
                case StateId.PREFIXING__SHOWS_MANUAL_PREFIX__OM_BEV_WATER: this.PREFIXING__SHOWS_MANUAL_PREFIX__OM_BEV_WATER_exit(); break;
                
                case StateId.PREFIXING__SHOWS_MANUAL_PREFIX__OM_VEG: this.PREFIXING__SHOWS_MANUAL_PREFIX__OM_VEG_exit(); break;
                
                case StateId.PREFIXING__SHOWS_MANUAL_PREFIX__OM_VEG_NONE: this.PREFIXING__SHOWS_MANUAL_PREFIX__OM_VEG_NONE_exit(); break;
                
                case StateId.PREFIXING__SHOWS_MANUAL_PREFIX__OM_VEG_POTATO: this.PREFIXING__SHOWS_MANUAL_PREFIX__OM_VEG_POTATO_exit(); break;
                
                case StateId.PREFIXING__SHOWS_MANUAL_PREFIX__OM_VEG_YAM: this.PREFIXING__SHOWS_MANUAL_PREFIX__OM_VEG_YAM_exit(); break;
                
                case StateId.SPEC2SM__DECIDE: this.SPEC2SM__DECIDE_exit(); break;
                
                case StateId.TEST1_DO_EVENT_TESTING: this.TEST1_DO_EVENT_TESTING_exit(); break;
                
                case StateId.TEST1_ROOT: this.TEST1_ROOT_exit(); break;
                
                case StateId.TEST1_S1: this.TEST1_S1_exit(); break;
                
                case StateId.TEST1_S1_1: this.TEST1_S1_1_exit(); break;
                
                case StateId.TEST1_S2: this.TEST1_S2_exit(); break;
                
                case StateId.TEST10_CHOICE_POINT: this.TEST10_CHOICE_POINT_exit(); break;
                
                case StateId.TEST10_A: this.TEST10_A_exit(); break;
                
                case StateId.TEST10_A_1: this.TEST10_A_1_exit(); break;
                
                case StateId.TEST10_ROOT: this.TEST10_ROOT_exit(); break;
                
                case StateId.TEST10_G: this.TEST10_G_exit(); break;
                
                case StateId.TEST10_G_S0: this.TEST10_G_S0_exit(); break;
                
                case StateId.TEST10_G_S1: this.TEST10_G_S1_exit(); break;
                
                case StateId.TEST10_G_S2: this.TEST10_G_S2_exit(); break;
                
                case StateId.TEST10_G_S3: this.TEST10_G_S3_exit(); break;
                
                case StateId.TEST10_S1: this.TEST10_S1_exit(); break;
                
                case StateId.TEST10_S4: this.TEST10_S4_exit(); break;
                
                case StateId.TEST2_REGULAR_EVENT_TESTING: this.TEST2_REGULAR_EVENT_TESTING_exit(); break;
                
                case StateId.TEST2_ROOT: this.TEST2_ROOT_exit(); break;
                
                case StateId.TEST2_S1: this.TEST2_S1_exit(); break;
                
                case StateId.TEST2_S1_1: this.TEST2_S1_1_exit(); break;
                
                case StateId.TEST2_S2: this.TEST2_S2_exit(); break;
                
                case StateId.TEST3_BEHAVIOR_ORDERING: this.TEST3_BEHAVIOR_ORDERING_exit(); break;
                
                case StateId.TEST3_ROOT: this.TEST3_ROOT_exit(); break;
                
                case StateId.TEST3_S1: this.TEST3_S1_exit(); break;
                
                case StateId.TEST3_S2: this.TEST3_S2_exit(); break;
                
                case StateId.TEST3_S3: this.TEST3_S3_exit(); break;
                
                case StateId.TEST4_PARENT_CHILD_TRANSITIONS: this.TEST4_PARENT_CHILD_TRANSITIONS_exit(); break;
                
                case StateId.TEST4_B_AND_OTHERS: this.TEST4_B_AND_OTHERS_exit(); break;
                
                case StateId.TEST4B_LOCAL: this.TEST4B_LOCAL_exit(); break;
                
                case StateId.TEST4B_G: this.TEST4B_G_exit(); break;
                
                case StateId.TEST4B_G_1: this.TEST4B_G_1_exit(); break;
                
                case StateId.TEST4C_LOCAL_TO_ALIAS: this.TEST4C_LOCAL_TO_ALIAS_exit(); break;
                
                case StateId.TEST4C_G: this.TEST4C_G_exit(); break;
                
                case StateId.TEST4C_G_1: this.TEST4C_G_1_exit(); break;
                
                case StateId.TEST4D_EXTERNAL: this.TEST4D_EXTERNAL_exit(); break;
                
                case StateId.TEST4D_G: this.TEST4D_G_exit(); break;
                
                case StateId.TEST4D_G_1: this.TEST4D_G_1_exit(); break;
                
                case StateId.TEST4_DECIDE: this.TEST4_DECIDE_exit(); break;
                
                case StateId.TEST4_ROOT: this.TEST4_ROOT_exit(); break;
                
                case StateId.TEST4_S1: this.TEST4_S1_exit(); break;
                
                case StateId.TEST4_S10: this.TEST4_S10_exit(); break;
                
                case StateId.TEST4_S10_1: this.TEST4_S10_1_exit(); break;
                
                case StateId.TEST4_S2: this.TEST4_S2_exit(); break;
                
                case StateId.TEST4_S20: this.TEST4_S20_exit(); break;
                
                case StateId.TEST4_S20_1: this.TEST4_S20_1_exit(); break;
                
                case StateId.TEST4_S3: this.TEST4_S3_exit(); break;
                
                case StateId.TEST5_PARENT_CHILD_TRANSITIONS_ALIAS: this.TEST5_PARENT_CHILD_TRANSITIONS_ALIAS_exit(); break;
                
                case StateId.TEST5_ROOT: this.TEST5_ROOT_exit(); break;
                
                case StateId.TEST5_S1: this.TEST5_S1_exit(); break;
                
                case StateId.TEST5_S2: this.TEST5_S2_exit(); break;
                
                case StateId.TEST5_S3: this.TEST5_S3_exit(); break;
                
                case StateId.TEST6_VARS_EXPANSIONS: this.TEST6_VARS_EXPANSIONS_exit(); break;
                
                case StateId.TEST6_ROOT: this.TEST6_ROOT_exit(); break;
                
                case StateId.AUTO_VAR_TEST: this.AUTO_VAR_TEST_exit(); break;
                
                case StateId.AUTO_VAR_TEST__S1: this.AUTO_VAR_TEST__S1_exit(); break;
                
                case StateId.AUTO_VAR_TEST__S2: this.AUTO_VAR_TEST__S2_exit(); break;
                
                case StateId.META_EXPANSIONS: this.META_EXPANSIONS_exit(); break;
                
                case StateId.META_EXPANSIONS__S1: this.META_EXPANSIONS__S1_exit(); break;
                
                case StateId.META_EXPANSIONS__S2: this.META_EXPANSIONS__S2_exit(); break;
                
                case StateId.S3: this.S3_exit(); break;
                
                case StateId.S4: this.S4_exit(); break;
                
                case StateId.S5: this.S5_exit(); break;
                
                case StateId.NORMAL: this.NORMAL_exit(); break;
                
                case StateId.NORMAL__S1: this.NORMAL__S1_exit(); break;
                
                case StateId.NORMAL__S2: this.NORMAL__S2_exit(); break;
                
                case StateId.TEST6_VARS_EXPANSIONS__DECIDE: this.TEST6_VARS_EXPANSIONS__DECIDE_exit(); break;
                
                case StateId.TEST7_INITIAL_OR_HISTORY: this.TEST7_INITIAL_OR_HISTORY_exit(); break;
                
                case StateId.TEST7: this.TEST7_exit(); break;
                
                case StateId.T7__DEEP_HISTORY1: this.T7__DEEP_HISTORY1_exit(); break;
                
                case StateId.T7__DH1__SANTAS_WORKSHOP: this.T7__DH1__SANTAS_WORKSHOP_exit(); break;
                
                case StateId.T7__DH1__ALIENS_DETECTED: this.T7__DH1__ALIENS_DETECTED_exit(); break;
                
                case StateId.T7__DH1__GET_BACKUP: this.T7__DH1__GET_BACKUP_exit(); break;
                
                case StateId.T7__DH1__HERO: this.T7__DH1__HERO_exit(); break;
                
                case StateId.T7__DH1__CALL_BATMAN: this.T7__DH1__CALL_BATMAN_exit(); break;
                
                case StateId.T7__DH1__CALL_THOR: this.T7__DH1__CALL_THOR_exit(); break;
                
                case StateId.T7__DH1__LOCAL_HELP: this.T7__DH1__LOCAL_HELP_exit(); break;
                
                case StateId.T7__DH1__BUDDY_ELF: this.T7__DH1__BUDDY_ELF_exit(); break;
                
                case StateId.T7__DH1__POLAR_BEARS: this.T7__DH1__POLAR_BEARS_exit(); break;
                
                case StateId.T7__DH1__GIVE_COOKIES: this.T7__DH1__GIVE_COOKIES_exit(); break;
                
                case StateId.T7__DH1__SNOWBALL_FIGHT: this.T7__DH1__SNOWBALL_FIGHT_exit(); break;
                
                case StateId.T7__DH1__BUILD: this.T7__DH1__BUILD_exit(); break;
                
                case StateId.T7__DH1__TOOL: this.T7__DH1__TOOL_exit(); break;
                
                case StateId.T7__DH1__CIRCULAR_SAW: this.T7__DH1__CIRCULAR_SAW_exit(); break;
                
                case StateId.T7__DH1__IMPACT_DRILL: this.T7__DH1__IMPACT_DRILL_exit(); break;
                
                case StateId.T7__DH1__TOY: this.T7__DH1__TOY_exit(); break;
                
                case StateId.T7__DH1__GLOW_WORM: this.T7__DH1__GLOW_WORM_exit(); break;
                
                case StateId.T7__DH1__RACE_CAR: this.T7__DH1__RACE_CAR_exit(); break;
                
                case StateId.T7__DH1__ROBOT: this.T7__DH1__ROBOT_exit(); break;
                
                case StateId.T7__DH1__BATTLEBOT: this.T7__DH1__BATTLEBOT_exit(); break;
                
                case StateId.T7__DH1__WALL_E: this.T7__DH1__WALL_E_exit(); break;
                
                case StateId.T7__DH1__TEDDY_BEAR: this.T7__DH1__TEDDY_BEAR_exit(); break;
                
                case StateId.T7__DEEP_HISTORY2: this.T7__DEEP_HISTORY2_exit(); break;
                
                case StateId.T7__DEEP_HISTORY2__T7__STATE_0: this.T7__DEEP_HISTORY2__T7__STATE_0_exit(); break;
                
                case StateId.T7__DEEP_HISTORY2__T7__STATE_1: this.T7__DEEP_HISTORY2__T7__STATE_1_exit(); break;
                
                case StateId.T7__DEEP_HISTORY2__T7__STATE_2: this.T7__DEEP_HISTORY2__T7__STATE_2_exit(); break;
                
                case StateId.T7__DEEP_HISTORY2__T7__STATE_6: this.T7__DEEP_HISTORY2__T7__STATE_6_exit(); break;
                
                case StateId.T7__DEEP_HISTORY2__T7__STATE_9: this.T7__DEEP_HISTORY2__T7__STATE_9_exit(); break;
                
                case StateId.T7__DEEP_HISTORY2__T7__STATE_3: this.T7__DEEP_HISTORY2__T7__STATE_3_exit(); break;
                
                case StateId.T7__DEEP_HISTORY3: this.T7__DEEP_HISTORY3_exit(); break;
                
                case StateId.T7__DEEP_HISTORY3__T7__STATE_0: this.T7__DEEP_HISTORY3__T7__STATE_0_exit(); break;
                
                case StateId.T7__DEEP_HISTORY3__T7__STATE_1: this.T7__DEEP_HISTORY3__T7__STATE_1_exit(); break;
                
                case StateId.T7__DEEP_HISTORY3__T7__STATE_2: this.T7__DEEP_HISTORY3__T7__STATE_2_exit(); break;
                
                case StateId.T7__DEEP_HISTORY3__T7__STATE_6: this.T7__DEEP_HISTORY3__T7__STATE_6_exit(); break;
                
                case StateId.T7__DEEP_HISTORY3__T7__STATE_9: this.T7__DEEP_HISTORY3__T7__STATE_9_exit(); break;
                
                case StateId.T7__DEEP_HISTORY3__T7__STATE_3: this.T7__DEEP_HISTORY3__T7__STATE_3_exit(); break;
                
                case StateId.T7__HISTORY1: this.T7__HISTORY1_exit(); break;
                
                case StateId.T7__H1__OFF: this.T7__H1__OFF_exit(); break;
                
                case StateId.T7__H1__OFF1: this.T7__H1__OFF1_exit(); break;
                
                case StateId.T7__H1__OFF2: this.T7__H1__OFF2_exit(); break;
                
                case StateId.T7__H1__OFF3: this.T7__H1__OFF3_exit(); break;
                
                case StateId.T7__H1__ON: this.T7__H1__ON_exit(); break;
                
                case StateId.T7__H1__ON1: this.T7__H1__ON1_exit(); break;
                
                case StateId.T7__H1__ON2: this.T7__H1__ON2_exit(); break;
                
                case StateId.T7__H1__ON3: this.T7__H1__ON3_exit(); break;
                
                case StateId.T7__INITIAL1: this.T7__INITIAL1_exit(); break;
                
                case StateId.T7__INITIAL1__PARENT: this.T7__INITIAL1__PARENT_exit(); break;
                
                case StateId.T7__INITIAL1__G: this.T7__INITIAL1__G_exit(); break;
                
                case StateId.T7__INITIAL1__G_S1: this.T7__INITIAL1__G_S1_exit(); break;
                
                case StateId.T7__INITIAL1__G_S2: this.T7__INITIAL1__G_S2_exit(); break;
                
                case StateId.T7__INITIAL1__G_S3: this.T7__INITIAL1__G_S3_exit(); break;
                
                case StateId.T7__INITIAL1__S1: this.T7__INITIAL1__S1_exit(); break;
                
                case StateId.TEST7_DECIDE: this.TEST7_DECIDE_exit(); break;
                
                case StateId.TEST8_ENTRY_CHOICE: this.TEST8_ENTRY_CHOICE_exit(); break;
                
                case StateId.TEST8_ROOT: this.TEST8_ROOT_exit(); break;
                
                case StateId.TEST8_G: this.TEST8_G_exit(); break;
                
                case StateId.TEST8_G_S1: this.TEST8_G_S1_exit(); break;
                
                case StateId.TEST8_G_S2: this.TEST8_G_S2_exit(); break;
                
                case StateId.TEST8_G_S3: this.TEST8_G_S3_exit(); break;
                
                case StateId.TEST8_S1: this.TEST8_S1_exit(); break;
                
                case StateId.TEST9_EXIT_CHOICE: this.TEST9_EXIT_CHOICE_exit(); break;
                
                case StateId.TEST9_DECIDE: this.TEST9_DECIDE_exit(); break;
                
                case StateId.TEST9_ROOT: this.TEST9_ROOT_exit(); break;
                
                case StateId.TEST9_G_S1: this.TEST9_G_S1_exit(); break;
                
                case StateId.TEST9_G_S2: this.TEST9_G_S2_exit(); break;
                
                case StateId.TEST9_G_S3: this.TEST9_G_S3_exit(); break;
                
                case StateId.TEST9_G_S4: this.TEST9_G_S4_exit(); break;
                
                case StateId.TEST9_S1: this.TEST9_S1_exit(); break;
                
                case StateId.TEST9_S1_1: this.TEST9_S1_1_exit(); break;
                
                case StateId.TEST9A_ROOT: this.TEST9A_ROOT_exit(); break;
                
                case StateId.TEST9A_S1: this.TEST9A_S1_exit(); break;
                
                case StateId.TEST9A_S1_1: this.TEST9A_S1_1_exit(); break;
                
                case StateId.TEST9B_ROOT: this.TEST9B_ROOT_exit(); break;
                
                case StateId.TEST9B_ROOT__A1: this.TEST9B_ROOT__A1_exit(); break;
                
                case StateId.TEST9B_ROOT__A2: this.TEST9B_ROOT__A2_exit(); break;
                
                case StateId.TEST9B_ROOT__A3: this.TEST9B_ROOT__A3_exit(); break;
                
                case StateId.TEST9B_ROOT__A4: this.TEST9B_ROOT__A4_exit(); break;
                
                case StateId.TEST9B_ROOT__B1: this.TEST9B_ROOT__B1_exit(); break;
                
                case StateId.TEST9B_ROOT__B2: this.TEST9B_ROOT__B2_exit(); break;
                
                case StateId.TEST9B_ROOT__B3: this.TEST9B_ROOT__B3_exit(); break;
                
                case StateId.TEST9B_ROOT__B4: this.TEST9B_ROOT__B4_exit(); break;
                
                case StateId.UNREACHABLE: this.UNREACHABLE_exit(); break;
                
                case StateId.USELESS: this.USELESS_exit(); break;
                
                default: return;  // Just to be safe. Prevents infinite loop if state ID memory is somehow corrupted.
            }
        }
    }
    
    
    ////////////////////////////////////////////////////////////////////////////////
    // event handlers for state ROOT
    ////////////////////////////////////////////////////////////////////////////////
    
    private void ROOT_enter()
    {
        this.stateId = StateId.ROOT;
        
        // ROOT behavior
        // uml: enter / { trace("Enter Spec2Sm."); }
        {
            // Step 1: execute action `trace("Enter Spec2Sm.");`
            ____GilData_EchoStringVoid("MainClass.Trace(\"Enter Spec2Sm.\");");
        } // end of behavior for ROOT
    }
    
    private void ROOT_do()
    {
        // ROOT behavior
        // uml: do [trace_guard("State Spec2Sm: check behavior `do`.", true)]
        if (____GilData_VarArgsToBool(____GilData_EchoStringBool("trace_guard(\"State Spec2Sm: check behavior `do`.\", true)")))
        {
            // Step 1: execute action ``
        } // end of behavior for ROOT
        
        // No ancestor handles this event.
    }
    
    
    ////////////////////////////////////////////////////////////////////////////////
    // event handlers for state PREFIXING
    ////////////////////////////////////////////////////////////////////////////////
    
    private void PREFIXING_enter()
    {
        this.stateId = StateId.PREFIXING;
        
        // PREFIXING behavior
        // uml: enter / { trace("Enter PREFIXING."); }
        {
            // Step 1: execute action `trace("Enter PREFIXING.");`
            ____GilData_EchoStringVoid("MainClass.Trace(\"Enter PREFIXING.\");");
        } // end of behavior for PREFIXING
    }
    
    private void PREFIXING_exit()
    {
        // PREFIXING behavior
        // uml: exit / { trace("Exit PREFIXING."); }
        {
            // Step 1: execute action `trace("Exit PREFIXING.");`
            ____GilData_EchoStringVoid("MainClass.Trace(\"Exit PREFIXING.\");");
        } // end of behavior for PREFIXING
        
        this.stateId = StateId.ROOT;
    }
    
    
    ////////////////////////////////////////////////////////////////////////////////
    // event handlers for state PREFIXING__ORDER_MENU
    ////////////////////////////////////////////////////////////////////////////////
    
    private void PREFIXING__ORDER_MENU_enter()
    {
        this.stateId = StateId.PREFIXING__ORDER_MENU;
        
        // PREFIXING__ORDER_MENU behavior
        // uml: enter / { trace("Enter PREFIXING__ORDER_MENU."); }
        {
            // Step 1: execute action `trace("Enter PREFIXING__ORDER_MENU.");`
            ____GilData_EchoStringVoid("MainClass.Trace(\"Enter PREFIXING__ORDER_MENU.\");");
        } // end of behavior for PREFIXING__ORDER_MENU
    }
    
    private void PREFIXING__ORDER_MENU_exit()
    {
        // PREFIXING__ORDER_MENU behavior
        // uml: exit / { trace("Exit PREFIXING__ORDER_MENU."); }
        {
            // Step 1: execute action `trace("Exit PREFIXING__ORDER_MENU.");`
            ____GilData_EchoStringVoid("MainClass.Trace(\"Exit PREFIXING__ORDER_MENU.\");");
        } // end of behavior for PREFIXING__ORDER_MENU
        
        this.stateId = StateId.PREFIXING;
    }
    
    
    ////////////////////////////////////////////////////////////////////////////////
    // event handlers for state PREFIXING__OM__BEVERAGE
    ////////////////////////////////////////////////////////////////////////////////
    
    private void PREFIXING__OM__BEVERAGE_enter()
    {
        this.stateId = StateId.PREFIXING__OM__BEVERAGE;
        
        // PREFIXING__OM__BEVERAGE behavior
        // uml: enter / { trace("Enter PREFIXING__OM__BEVERAGE."); }
        {
            // Step 1: execute action `trace("Enter PREFIXING__OM__BEVERAGE.");`
            ____GilData_EchoStringVoid("MainClass.Trace(\"Enter PREFIXING__OM__BEVERAGE.\");");
        } // end of behavior for PREFIXING__OM__BEVERAGE
    }
    
    private void PREFIXING__OM__BEVERAGE_exit()
    {
        // PREFIXING__OM__BEVERAGE behavior
        // uml: exit / { trace("Exit PREFIXING__OM__BEVERAGE."); }
        {
            // Step 1: execute action `trace("Exit PREFIXING__OM__BEVERAGE.");`
            ____GilData_EchoStringVoid("MainClass.Trace(\"Exit PREFIXING__OM__BEVERAGE.\");");
        } // end of behavior for PREFIXING__OM__BEVERAGE
        
        this.stateId = StateId.PREFIXING__ORDER_MENU;
    }
    
    private void PREFIXING__OM__BEVERAGE_ev2()
    {
        // PREFIXING__OM__BEVERAGE behavior
        // uml: EV2 [trace_guard("State PREFIXING__OM__BEVERAGE: check behavior `EV2 TransitionTo(PREFIXING__OM__VEG)`.", true)] / { trace("Transition action `` for PREFIXING__OM__BEVERAGE to PREFIXING__OM__VEG."); } TransitionTo(PREFIXING__OM__VEG)
        if (____GilData_VarArgsToBool(____GilData_EchoStringBool("trace_guard(\"State PREFIXING__OM__BEVERAGE: check behavior `EV2 TransitionTo(PREFIXING__OM__VEG)`.\", true)")))
        {
            // Step 1: Exit states until we reach `PREFIXING__ORDER_MENU` state (Least Common Ancestor for transition).
            this.ExitUpToStateHandler(StateId.PREFIXING__ORDER_MENU);
            
            // Step 2: Transition action: `trace("Transition action `` for PREFIXING__OM__BEVERAGE to PREFIXING__OM__VEG.");`.
            ____GilData_EchoStringVoid("MainClass.Trace(\"Transition action `` for PREFIXING__OM__BEVERAGE to PREFIXING__OM__VEG.\");");
            
            // Step 3: Enter/move towards transition target `PREFIXING__OM__VEG`.
            this.PREFIXING__OM__VEG_enter();
            
            // PREFIXING__OM__VEG.<InitialState> behavior
            // uml: / { trace("Transition action `` for PREFIXING__OM__VEG.<InitialState> to PREFIXING__OM__VEG__NONE."); } TransitionTo(PREFIXING__OM__VEG__NONE)
            {
                // Step 1: Exit states until we reach `PREFIXING__OM__VEG` state (Least Common Ancestor for transition). Already at LCA, no exiting required.
                
                // Step 2: Transition action: `trace("Transition action `` for PREFIXING__OM__VEG.<InitialState> to PREFIXING__OM__VEG__NONE.");`.
                ____GilData_EchoStringVoid("MainClass.Trace(\"Transition action `` for PREFIXING__OM__VEG.<InitialState> to PREFIXING__OM__VEG__NONE.\");");
                
                // Step 3: Enter/move towards transition target `PREFIXING__OM__VEG__NONE`.
                this.PREFIXING__OM__VEG__NONE_enter();
                
                // Step 4: complete transition. Ends event dispatch. No other behaviors are checked.
                return;
            } // end of behavior for PREFIXING__OM__VEG.<InitialState>
        } // end of behavior for PREFIXING__OM__BEVERAGE
        
        // No ancestor handles this event.
    }
    
    private void PREFIXING__OM__BEVERAGE_InitialState_transition()
    {
        // PREFIXING__OM__BEVERAGE.<InitialState> behavior
        // uml: / { trace("Transition action `` for PREFIXING__OM__BEVERAGE.<InitialState> to PREFIXING__OM__BEV__NONE."); } TransitionTo(PREFIXING__OM__BEV__NONE)
        {
            // Step 1: Exit states until we reach `PREFIXING__OM__BEVERAGE` state (Least Common Ancestor for transition). Already at LCA, no exiting required.
            
            // Step 2: Transition action: `trace("Transition action `` for PREFIXING__OM__BEVERAGE.<InitialState> to PREFIXING__OM__BEV__NONE.");`.
            ____GilData_EchoStringVoid("MainClass.Trace(\"Transition action `` for PREFIXING__OM__BEVERAGE.<InitialState> to PREFIXING__OM__BEV__NONE.\");");
            
            // Step 3: Enter/move towards transition target `PREFIXING__OM__BEV__NONE`.
            this.PREFIXING__OM__BEV__NONE_enter();
            
            // Step 4: complete transition. Ends event dispatch. No other behaviors are checked.
            return;
        } // end of behavior for PREFIXING__OM__BEVERAGE.<InitialState>
    }
    
    
    ////////////////////////////////////////////////////////////////////////////////
    // event handlers for state PREFIXING__OM__BEV__NONE
    ////////////////////////////////////////////////////////////////////////////////
    
    private void PREFIXING__OM__BEV__NONE_enter()
    {
        this.stateId = StateId.PREFIXING__OM__BEV__NONE;
        
        // PREFIXING__OM__BEV__NONE behavior
        // uml: enter / { trace("Enter PREFIXING__OM__BEV__NONE."); }
        {
            // Step 1: execute action `trace("Enter PREFIXING__OM__BEV__NONE.");`
            ____GilData_EchoStringVoid("MainClass.Trace(\"Enter PREFIXING__OM__BEV__NONE.\");");
        } // end of behavior for PREFIXING__OM__BEV__NONE
    }
    
    private void PREFIXING__OM__BEV__NONE_exit()
    {
        // PREFIXING__OM__BEV__NONE behavior
        // uml: exit / { trace("Exit PREFIXING__OM__BEV__NONE."); }
        {
            // Step 1: execute action `trace("Exit PREFIXING__OM__BEV__NONE.");`
            ____GilData_EchoStringVoid("MainClass.Trace(\"Exit PREFIXING__OM__BEV__NONE.\");");
        } // end of behavior for PREFIXING__OM__BEV__NONE
        
        this.stateId = StateId.PREFIXING__OM__BEVERAGE;
    }
    
    private void PREFIXING__OM__BEV__NONE_ev1()
    {
        // PREFIXING__OM__BEV__NONE behavior
        // uml: EV1 [trace_guard("State PREFIXING__OM__BEV__NONE: check behavior `EV1 TransitionTo(PREFIXING__OM__BEV__WATER)`.", true)] / { trace("Transition action `` for PREFIXING__OM__BEV__NONE to PREFIXING__OM__BEV__WATER."); } TransitionTo(PREFIXING__OM__BEV__WATER)
        if (____GilData_VarArgsToBool(____GilData_EchoStringBool("trace_guard(\"State PREFIXING__OM__BEV__NONE: check behavior `EV1 TransitionTo(PREFIXING__OM__BEV__WATER)`.\", true)")))
        {
            // Step 1: Exit states until we reach `PREFIXING__OM__BEVERAGE` state (Least Common Ancestor for transition).
            this.PREFIXING__OM__BEV__NONE_exit();
            
            // Step 2: Transition action: `trace("Transition action `` for PREFIXING__OM__BEV__NONE to PREFIXING__OM__BEV__WATER.");`.
            ____GilData_EchoStringVoid("MainClass.Trace(\"Transition action `` for PREFIXING__OM__BEV__NONE to PREFIXING__OM__BEV__WATER.\");");
            
            // Step 3: Enter/move towards transition target `PREFIXING__OM__BEV__WATER`.
            this.PREFIXING__OM__BEV__WATER_enter();
            
            // Step 4: complete transition. Ends event dispatch. No other behaviors are checked.
            return;
        } // end of behavior for PREFIXING__OM__BEV__NONE
        
        // No ancestor handles this event.
    }
    
    
    ////////////////////////////////////////////////////////////////////////////////
    // event handlers for state PREFIXING__OM__BEV__TEA
    ////////////////////////////////////////////////////////////////////////////////
    
    private void PREFIXING__OM__BEV__TEA_enter()
    {
        this.stateId = StateId.PREFIXING__OM__BEV__TEA;
        
        // PREFIXING__OM__BEV__TEA behavior
        // uml: enter / { trace("Enter PREFIXING__OM__BEV__TEA."); }
        {
            // Step 1: execute action `trace("Enter PREFIXING__OM__BEV__TEA.");`
            ____GilData_EchoStringVoid("MainClass.Trace(\"Enter PREFIXING__OM__BEV__TEA.\");");
        } // end of behavior for PREFIXING__OM__BEV__TEA
    }
    
    private void PREFIXING__OM__BEV__TEA_exit()
    {
        // PREFIXING__OM__BEV__TEA behavior
        // uml: exit / { trace("Exit PREFIXING__OM__BEV__TEA."); }
        {
            // Step 1: execute action `trace("Exit PREFIXING__OM__BEV__TEA.");`
            ____GilData_EchoStringVoid("MainClass.Trace(\"Exit PREFIXING__OM__BEV__TEA.\");");
        } // end of behavior for PREFIXING__OM__BEV__TEA
        
        this.stateId = StateId.PREFIXING__OM__BEVERAGE;
    }
    
    
    ////////////////////////////////////////////////////////////////////////////////
    // event handlers for state PREFIXING__OM__BEV__WATER
    ////////////////////////////////////////////////////////////////////////////////
    
    private void PREFIXING__OM__BEV__WATER_enter()
    {
        this.stateId = StateId.PREFIXING__OM__BEV__WATER;
        
        // PREFIXING__OM__BEV__WATER behavior
        // uml: enter / { trace("Enter PREFIXING__OM__BEV__WATER."); }
        {
            // Step 1: execute action `trace("Enter PREFIXING__OM__BEV__WATER.");`
            ____GilData_EchoStringVoid("MainClass.Trace(\"Enter PREFIXING__OM__BEV__WATER.\");");
        } // end of behavior for PREFIXING__OM__BEV__WATER
    }
    
    private void PREFIXING__OM__BEV__WATER_exit()
    {
        // PREFIXING__OM__BEV__WATER behavior
        // uml: exit / { trace("Exit PREFIXING__OM__BEV__WATER."); }
        {
            // Step 1: execute action `trace("Exit PREFIXING__OM__BEV__WATER.");`
            ____GilData_EchoStringVoid("MainClass.Trace(\"Exit PREFIXING__OM__BEV__WATER.\");");
        } // end of behavior for PREFIXING__OM__BEV__WATER
        
        this.stateId = StateId.PREFIXING__OM__BEVERAGE;
    }
    
    private void PREFIXING__OM__BEV__WATER_ev1()
    {
        // PREFIXING__OM__BEV__WATER behavior
        // uml: EV1 [trace_guard("State PREFIXING__OM__BEV__WATER: check behavior `EV1 TransitionTo(PREFIXING__OM__BEV__TEA)`.", true)] / { trace("Transition action `` for PREFIXING__OM__BEV__WATER to PREFIXING__OM__BEV__TEA."); } TransitionTo(PREFIXING__OM__BEV__TEA)
        if (____GilData_VarArgsToBool(____GilData_EchoStringBool("trace_guard(\"State PREFIXING__OM__BEV__WATER: check behavior `EV1 TransitionTo(PREFIXING__OM__BEV__TEA)`.\", true)")))
        {
            // Step 1: Exit states until we reach `PREFIXING__OM__BEVERAGE` state (Least Common Ancestor for transition).
            this.PREFIXING__OM__BEV__WATER_exit();
            
            // Step 2: Transition action: `trace("Transition action `` for PREFIXING__OM__BEV__WATER to PREFIXING__OM__BEV__TEA.");`.
            ____GilData_EchoStringVoid("MainClass.Trace(\"Transition action `` for PREFIXING__OM__BEV__WATER to PREFIXING__OM__BEV__TEA.\");");
            
            // Step 3: Enter/move towards transition target `PREFIXING__OM__BEV__TEA`.
            this.PREFIXING__OM__BEV__TEA_enter();
            
            // Step 4: complete transition. Ends event dispatch. No other behaviors are checked.
            return;
        } // end of behavior for PREFIXING__OM__BEV__WATER
        
        // No ancestor handles this event.
    }
    
    
    ////////////////////////////////////////////////////////////////////////////////
    // event handlers for state PREFIXING__OM__VEG
    ////////////////////////////////////////////////////////////////////////////////
    
    private void PREFIXING__OM__VEG_enter()
    {
        this.stateId = StateId.PREFIXING__OM__VEG;
        
        // PREFIXING__OM__VEG behavior
        // uml: enter / { trace("Enter PREFIXING__OM__VEG."); }
        {
            // Step 1: execute action `trace("Enter PREFIXING__OM__VEG.");`
            ____GilData_EchoStringVoid("MainClass.Trace(\"Enter PREFIXING__OM__VEG.\");");
        } // end of behavior for PREFIXING__OM__VEG
    }
    
    private void PREFIXING__OM__VEG_exit()
    {
        // PREFIXING__OM__VEG behavior
        // uml: exit / { trace("Exit PREFIXING__OM__VEG."); }
        {
            // Step 1: execute action `trace("Exit PREFIXING__OM__VEG.");`
            ____GilData_EchoStringVoid("MainClass.Trace(\"Exit PREFIXING__OM__VEG.\");");
        } // end of behavior for PREFIXING__OM__VEG
        
        this.stateId = StateId.PREFIXING__ORDER_MENU;
    }
    
    private void PREFIXING__OM__VEG_ev2()
    {
        // PREFIXING__OM__VEG behavior
        // uml: EV2 [trace_guard("State PREFIXING__OM__VEG: check behavior `EV2 TransitionTo(PREFIXING__OM__BEVERAGE)`.", true)] / { trace("Transition action `` for PREFIXING__OM__VEG to PREFIXING__OM__BEVERAGE."); } TransitionTo(PREFIXING__OM__BEVERAGE)
        if (____GilData_VarArgsToBool(____GilData_EchoStringBool("trace_guard(\"State PREFIXING__OM__VEG: check behavior `EV2 TransitionTo(PREFIXING__OM__BEVERAGE)`.\", true)")))
        {
            // Step 1: Exit states until we reach `PREFIXING__ORDER_MENU` state (Least Common Ancestor for transition).
            this.ExitUpToStateHandler(StateId.PREFIXING__ORDER_MENU);
            
            // Step 2: Transition action: `trace("Transition action `` for PREFIXING__OM__VEG to PREFIXING__OM__BEVERAGE.");`.
            ____GilData_EchoStringVoid("MainClass.Trace(\"Transition action `` for PREFIXING__OM__VEG to PREFIXING__OM__BEVERAGE.\");");
            
            // Step 3: Enter/move towards transition target `PREFIXING__OM__BEVERAGE`.
            this.PREFIXING__OM__BEVERAGE_enter();
            
            // Finish transition by calling pseudo state transition function.
            this.PREFIXING__OM__BEVERAGE_InitialState_transition();
            return; // event processing immediately stops when a transition finishes. No other behaviors for this state are checked.
        } // end of behavior for PREFIXING__OM__VEG
        
        // No ancestor handles this event.
    }
    
    
    ////////////////////////////////////////////////////////////////////////////////
    // event handlers for state PREFIXING__OM__VEG__NONE
    ////////////////////////////////////////////////////////////////////////////////
    
    private void PREFIXING__OM__VEG__NONE_enter()
    {
        this.stateId = StateId.PREFIXING__OM__VEG__NONE;
        
        // PREFIXING__OM__VEG__NONE behavior
        // uml: enter / { trace("Enter PREFIXING__OM__VEG__NONE."); }
        {
            // Step 1: execute action `trace("Enter PREFIXING__OM__VEG__NONE.");`
            ____GilData_EchoStringVoid("MainClass.Trace(\"Enter PREFIXING__OM__VEG__NONE.\");");
        } // end of behavior for PREFIXING__OM__VEG__NONE
    }
    
    private void PREFIXING__OM__VEG__NONE_exit()
    {
        // PREFIXING__OM__VEG__NONE behavior
        // uml: exit / { trace("Exit PREFIXING__OM__VEG__NONE."); }
        {
            // Step 1: execute action `trace("Exit PREFIXING__OM__VEG__NONE.");`
            ____GilData_EchoStringVoid("MainClass.Trace(\"Exit PREFIXING__OM__VEG__NONE.\");");
        } // end of behavior for PREFIXING__OM__VEG__NONE
        
        this.stateId = StateId.PREFIXING__OM__VEG;
    }
    
    private void PREFIXING__OM__VEG__NONE_ev1()
    {
        // PREFIXING__OM__VEG__NONE behavior
        // uml: EV1 [trace_guard("State PREFIXING__OM__VEG__NONE: check behavior `EV1 TransitionTo(PREFIXING__OM__VEG__POTATO)`.", true)] / { trace("Transition action `` for PREFIXING__OM__VEG__NONE to PREFIXING__OM__VEG__POTATO."); } TransitionTo(PREFIXING__OM__VEG__POTATO)
        if (____GilData_VarArgsToBool(____GilData_EchoStringBool("trace_guard(\"State PREFIXING__OM__VEG__NONE: check behavior `EV1 TransitionTo(PREFIXING__OM__VEG__POTATO)`.\", true)")))
        {
            // Step 1: Exit states until we reach `PREFIXING__OM__VEG` state (Least Common Ancestor for transition).
            this.PREFIXING__OM__VEG__NONE_exit();
            
            // Step 2: Transition action: `trace("Transition action `` for PREFIXING__OM__VEG__NONE to PREFIXING__OM__VEG__POTATO.");`.
            ____GilData_EchoStringVoid("MainClass.Trace(\"Transition action `` for PREFIXING__OM__VEG__NONE to PREFIXING__OM__VEG__POTATO.\");");
            
            // Step 3: Enter/move towards transition target `PREFIXING__OM__VEG__POTATO`.
            this.PREFIXING__OM__VEG__POTATO_enter();
            
            // Step 4: complete transition. Ends event dispatch. No other behaviors are checked.
            return;
        } // end of behavior for PREFIXING__OM__VEG__NONE
        
        // No ancestor handles this event.
    }
    
    
    ////////////////////////////////////////////////////////////////////////////////
    // event handlers for state PREFIXING__OM__VEG__POTATO
    ////////////////////////////////////////////////////////////////////////////////
    
    private void PREFIXING__OM__VEG__POTATO_enter()
    {
        this.stateId = StateId.PREFIXING__OM__VEG__POTATO;
        
        // PREFIXING__OM__VEG__POTATO behavior
        // uml: enter / { trace("Enter PREFIXING__OM__VEG__POTATO."); }
        {
            // Step 1: execute action `trace("Enter PREFIXING__OM__VEG__POTATO.");`
            ____GilData_EchoStringVoid("MainClass.Trace(\"Enter PREFIXING__OM__VEG__POTATO.\");");
        } // end of behavior for PREFIXING__OM__VEG__POTATO
    }
    
    private void PREFIXING__OM__VEG__POTATO_exit()
    {
        // PREFIXING__OM__VEG__POTATO behavior
        // uml: exit / { trace("Exit PREFIXING__OM__VEG__POTATO."); }
        {
            // Step 1: execute action `trace("Exit PREFIXING__OM__VEG__POTATO.");`
            ____GilData_EchoStringVoid("MainClass.Trace(\"Exit PREFIXING__OM__VEG__POTATO.\");");
        } // end of behavior for PREFIXING__OM__VEG__POTATO
        
        this.stateId = StateId.PREFIXING__OM__VEG;
    }
    
    private void PREFIXING__OM__VEG__POTATO_ev1()
    {
        // PREFIXING__OM__VEG__POTATO behavior
        // uml: EV1 [trace_guard("State PREFIXING__OM__VEG__POTATO: check behavior `EV1 TransitionTo(PREFIXING__OM__VEG__YAM)`.", true)] / { trace("Transition action `` for PREFIXING__OM__VEG__POTATO to PREFIXING__OM__VEG__YAM."); } TransitionTo(PREFIXING__OM__VEG__YAM)
        if (____GilData_VarArgsToBool(____GilData_EchoStringBool("trace_guard(\"State PREFIXING__OM__VEG__POTATO: check behavior `EV1 TransitionTo(PREFIXING__OM__VEG__YAM)`.\", true)")))
        {
            // Step 1: Exit states until we reach `PREFIXING__OM__VEG` state (Least Common Ancestor for transition).
            this.PREFIXING__OM__VEG__POTATO_exit();
            
            // Step 2: Transition action: `trace("Transition action `` for PREFIXING__OM__VEG__POTATO to PREFIXING__OM__VEG__YAM.");`.
            ____GilData_EchoStringVoid("MainClass.Trace(\"Transition action `` for PREFIXING__OM__VEG__POTATO to PREFIXING__OM__VEG__YAM.\");");
            
            // Step 3: Enter/move towards transition target `PREFIXING__OM__VEG__YAM`.
            this.PREFIXING__OM__VEG__YAM_enter();
            
            // Step 4: complete transition. Ends event dispatch. No other behaviors are checked.
            return;
        } // end of behavior for PREFIXING__OM__VEG__POTATO
        
        // No ancestor handles this event.
    }
    
    
    ////////////////////////////////////////////////////////////////////////////////
    // event handlers for state PREFIXING__OM__VEG__YAM
    ////////////////////////////////////////////////////////////////////////////////
    
    private void PREFIXING__OM__VEG__YAM_enter()
    {
        this.stateId = StateId.PREFIXING__OM__VEG__YAM;
        
        // PREFIXING__OM__VEG__YAM behavior
        // uml: enter / { trace("Enter PREFIXING__OM__VEG__YAM."); }
        {
            // Step 1: execute action `trace("Enter PREFIXING__OM__VEG__YAM.");`
            ____GilData_EchoStringVoid("MainClass.Trace(\"Enter PREFIXING__OM__VEG__YAM.\");");
        } // end of behavior for PREFIXING__OM__VEG__YAM
    }
    
    private void PREFIXING__OM__VEG__YAM_exit()
    {
        // PREFIXING__OM__VEG__YAM behavior
        // uml: exit / { trace("Exit PREFIXING__OM__VEG__YAM."); }
        {
            // Step 1: execute action `trace("Exit PREFIXING__OM__VEG__YAM.");`
            ____GilData_EchoStringVoid("MainClass.Trace(\"Exit PREFIXING__OM__VEG__YAM.\");");
        } // end of behavior for PREFIXING__OM__VEG__YAM
        
        this.stateId = StateId.PREFIXING__OM__VEG;
    }
    
    
    ////////////////////////////////////////////////////////////////////////////////
    // event handlers for state PREFIXING__SHOWS_MANUAL_PREFIX
    ////////////////////////////////////////////////////////////////////////////////
    
    private void PREFIXING__SHOWS_MANUAL_PREFIX_enter()
    {
        this.stateId = StateId.PREFIXING__SHOWS_MANUAL_PREFIX;
        
        // PREFIXING__SHOWS_MANUAL_PREFIX behavior
        // uml: enter / { trace("Enter PREFIXING__SHOWS_MANUAL_PREFIX."); }
        {
            // Step 1: execute action `trace("Enter PREFIXING__SHOWS_MANUAL_PREFIX.");`
            ____GilData_EchoStringVoid("MainClass.Trace(\"Enter PREFIXING__SHOWS_MANUAL_PREFIX.\");");
        } // end of behavior for PREFIXING__SHOWS_MANUAL_PREFIX
    }
    
    private void PREFIXING__SHOWS_MANUAL_PREFIX_exit()
    {
        // PREFIXING__SHOWS_MANUAL_PREFIX behavior
        // uml: exit / { trace("Exit PREFIXING__SHOWS_MANUAL_PREFIX."); }
        {
            // Step 1: execute action `trace("Exit PREFIXING__SHOWS_MANUAL_PREFIX.");`
            ____GilData_EchoStringVoid("MainClass.Trace(\"Exit PREFIXING__SHOWS_MANUAL_PREFIX.\");");
        } // end of behavior for PREFIXING__SHOWS_MANUAL_PREFIX
        
        this.stateId = StateId.PREFIXING;
    }
    
    
    ////////////////////////////////////////////////////////////////////////////////
    // event handlers for state PREFIXING__SHOWS_MANUAL_PREFIX__ORDER_MENU
    ////////////////////////////////////////////////////////////////////////////////
    
    private void PREFIXING__SHOWS_MANUAL_PREFIX__ORDER_MENU_enter()
    {
        this.stateId = StateId.PREFIXING__SHOWS_MANUAL_PREFIX__ORDER_MENU;
        
        // PREFIXING__SHOWS_MANUAL_PREFIX__ORDER_MENU behavior
        // uml: enter / { trace("Enter PREFIXING__SHOWS_MANUAL_PREFIX__ORDER_MENU."); }
        {
            // Step 1: execute action `trace("Enter PREFIXING__SHOWS_MANUAL_PREFIX__ORDER_MENU.");`
            ____GilData_EchoStringVoid("MainClass.Trace(\"Enter PREFIXING__SHOWS_MANUAL_PREFIX__ORDER_MENU.\");");
        } // end of behavior for PREFIXING__SHOWS_MANUAL_PREFIX__ORDER_MENU
    }
    
    private void PREFIXING__SHOWS_MANUAL_PREFIX__ORDER_MENU_exit()
    {
        // PREFIXING__SHOWS_MANUAL_PREFIX__ORDER_MENU behavior
        // uml: exit / { trace("Exit PREFIXING__SHOWS_MANUAL_PREFIX__ORDER_MENU."); }
        {
            // Step 1: execute action `trace("Exit PREFIXING__SHOWS_MANUAL_PREFIX__ORDER_MENU.");`
            ____GilData_EchoStringVoid("MainClass.Trace(\"Exit PREFIXING__SHOWS_MANUAL_PREFIX__ORDER_MENU.\");");
        } // end of behavior for PREFIXING__SHOWS_MANUAL_PREFIX__ORDER_MENU
        
        this.stateId = StateId.PREFIXING__SHOWS_MANUAL_PREFIX;
    }
    
    
    ////////////////////////////////////////////////////////////////////////////////
    // event handlers for state PREFIXING__SHOWS_MANUAL_PREFIX__OM_BEVERAGE
    ////////////////////////////////////////////////////////////////////////////////
    
    private void PREFIXING__SHOWS_MANUAL_PREFIX__OM_BEVERAGE_enter()
    {
        this.stateId = StateId.PREFIXING__SHOWS_MANUAL_PREFIX__OM_BEVERAGE;
        
        // PREFIXING__SHOWS_MANUAL_PREFIX__OM_BEVERAGE behavior
        // uml: enter / { trace("Enter PREFIXING__SHOWS_MANUAL_PREFIX__OM_BEVERAGE."); }
        {
            // Step 1: execute action `trace("Enter PREFIXING__SHOWS_MANUAL_PREFIX__OM_BEVERAGE.");`
            ____GilData_EchoStringVoid("MainClass.Trace(\"Enter PREFIXING__SHOWS_MANUAL_PREFIX__OM_BEVERAGE.\");");
        } // end of behavior for PREFIXING__SHOWS_MANUAL_PREFIX__OM_BEVERAGE
    }
    
    private void PREFIXING__SHOWS_MANUAL_PREFIX__OM_BEVERAGE_exit()
    {
        // PREFIXING__SHOWS_MANUAL_PREFIX__OM_BEVERAGE behavior
        // uml: exit / { trace("Exit PREFIXING__SHOWS_MANUAL_PREFIX__OM_BEVERAGE."); }
        {
            // Step 1: execute action `trace("Exit PREFIXING__SHOWS_MANUAL_PREFIX__OM_BEVERAGE.");`
            ____GilData_EchoStringVoid("MainClass.Trace(\"Exit PREFIXING__SHOWS_MANUAL_PREFIX__OM_BEVERAGE.\");");
        } // end of behavior for PREFIXING__SHOWS_MANUAL_PREFIX__OM_BEVERAGE
        
        this.stateId = StateId.PREFIXING__SHOWS_MANUAL_PREFIX__ORDER_MENU;
    }
    
    private void PREFIXING__SHOWS_MANUAL_PREFIX__OM_BEVERAGE_ev2()
    {
        // PREFIXING__SHOWS_MANUAL_PREFIX__OM_BEVERAGE behavior
        // uml: EV2 [trace_guard("State PREFIXING__SHOWS_MANUAL_PREFIX__OM_BEVERAGE: check behavior `EV2 TransitionTo(PREFIXING__SHOWS_MANUAL_PREFIX__OM_VEG)`.", true)] / { trace("Transition action `` for PREFIXING__SHOWS_MANUAL_PREFIX__OM_BEVERAGE to PREFIXING__SHOWS_MANUAL_PREFIX__OM_VEG."); } TransitionTo(PREFIXING__SHOWS_MANUAL_PREFIX__OM_VEG)
        if (____GilData_VarArgsToBool(____GilData_EchoStringBool("trace_guard(\"State PREFIXING__SHOWS_MANUAL_PREFIX__OM_BEVERAGE: check behavior `EV2 TransitionTo(PREFIXING__SHOWS_MANUAL_PREFIX__OM_VEG)`.\", true)")))
        {
            // Step 1: Exit states until we reach `PREFIXING__SHOWS_MANUAL_PREFIX__ORDER_MENU` state (Least Common Ancestor for transition).
            this.ExitUpToStateHandler(StateId.PREFIXING__SHOWS_MANUAL_PREFIX__ORDER_MENU);
            
            // Step 2: Transition action: `trace("Transition action `` for PREFIXING__SHOWS_MANUAL_PREFIX__OM_BEVERAGE to PREFIXING__SHOWS_MANUAL_PREFIX__OM_VEG.");`.
            ____GilData_EchoStringVoid("MainClass.Trace(\"Transition action `` for PREFIXING__SHOWS_MANUAL_PREFIX__OM_BEVERAGE to PREFIXING__SHOWS_MANUAL_PREFIX__OM_VEG.\");");
            
            // Step 3: Enter/move towards transition target `PREFIXING__SHOWS_MANUAL_PREFIX__OM_VEG`.
            this.PREFIXING__SHOWS_MANUAL_PREFIX__OM_VEG_enter();
            
            // PREFIXING__SHOWS_MANUAL_PREFIX__OM_VEG.<InitialState> behavior
            // uml: / { trace("Transition action `` for PREFIXING__SHOWS_MANUAL_PREFIX__OM_VEG.<InitialState> to PREFIXING__SHOWS_MANUAL_PREFIX__OM_VEG_NONE."); } TransitionTo(PREFIXING__SHOWS_MANUAL_PREFIX__OM_VEG_NONE)
            {
                // Step 1: Exit states until we reach `PREFIXING__SHOWS_MANUAL_PREFIX__OM_VEG` state (Least Common Ancestor for transition). Already at LCA, no exiting required.
                
                // Step 2: Transition action: `trace("Transition action `` for PREFIXING__SHOWS_MANUAL_PREFIX__OM_VEG.<InitialState> to PREFIXING__SHOWS_MANUAL_PREFIX__OM_VEG_NONE.");`.
                ____GilData_EchoStringVoid("MainClass.Trace(\"Transition action `` for PREFIXING__SHOWS_MANUAL_PREFIX__OM_VEG.<InitialState> to PREFIXING__SHOWS_MANUAL_PREFIX__OM_VEG_NONE.\");");
                
                // Step 3: Enter/move towards transition target `PREFIXING__SHOWS_MANUAL_PREFIX__OM_VEG_NONE`.
                this.PREFIXING__SHOWS_MANUAL_PREFIX__OM_VEG_NONE_enter();
                
                // Step 4: complete transition. Ends event dispatch. No other behaviors are checked.
                return;
            } // end of behavior for PREFIXING__SHOWS_MANUAL_PREFIX__OM_VEG.<InitialState>
        } // end of behavior for PREFIXING__SHOWS_MANUAL_PREFIX__OM_BEVERAGE
        
        // No ancestor handles this event.
    }
    
    private void PREFIXING__SHOWS_MANUAL_PREFIX__OM_BEVERAGE_InitialState_transition()
    {
        // PREFIXING__SHOWS_MANUAL_PREFIX__OM_BEVERAGE.<InitialState> behavior
        // uml: / { trace("Transition action `` for PREFIXING__SHOWS_MANUAL_PREFIX__OM_BEVERAGE.<InitialState> to PREFIXING__SHOWS_MANUAL_PREFIX__OM_BEV_NONE."); } TransitionTo(PREFIXING__SHOWS_MANUAL_PREFIX__OM_BEV_NONE)
        {
            // Step 1: Exit states until we reach `PREFIXING__SHOWS_MANUAL_PREFIX__OM_BEVERAGE` state (Least Common Ancestor for transition). Already at LCA, no exiting required.
            
            // Step 2: Transition action: `trace("Transition action `` for PREFIXING__SHOWS_MANUAL_PREFIX__OM_BEVERAGE.<InitialState> to PREFIXING__SHOWS_MANUAL_PREFIX__OM_BEV_NONE.");`.
            ____GilData_EchoStringVoid("MainClass.Trace(\"Transition action `` for PREFIXING__SHOWS_MANUAL_PREFIX__OM_BEVERAGE.<InitialState> to PREFIXING__SHOWS_MANUAL_PREFIX__OM_BEV_NONE.\");");
            
            // Step 3: Enter/move towards transition target `PREFIXING__SHOWS_MANUAL_PREFIX__OM_BEV_NONE`.
            this.PREFIXING__SHOWS_MANUAL_PREFIX__OM_BEV_NONE_enter();
            
            // Step 4: complete transition. Ends event dispatch. No other behaviors are checked.
            return;
        } // end of behavior for PREFIXING__SHOWS_MANUAL_PREFIX__OM_BEVERAGE.<InitialState>
    }
    
    
    ////////////////////////////////////////////////////////////////////////////////
    // event handlers for state PREFIXING__SHOWS_MANUAL_PREFIX__OM_BEV_NONE
    ////////////////////////////////////////////////////////////////////////////////
    
    private void PREFIXING__SHOWS_MANUAL_PREFIX__OM_BEV_NONE_enter()
    {
        this.stateId = StateId.PREFIXING__SHOWS_MANUAL_PREFIX__OM_BEV_NONE;
        
        // PREFIXING__SHOWS_MANUAL_PREFIX__OM_BEV_NONE behavior
        // uml: enter / { trace("Enter PREFIXING__SHOWS_MANUAL_PREFIX__OM_BEV_NONE."); }
        {
            // Step 1: execute action `trace("Enter PREFIXING__SHOWS_MANUAL_PREFIX__OM_BEV_NONE.");`
            ____GilData_EchoStringVoid("MainClass.Trace(\"Enter PREFIXING__SHOWS_MANUAL_PREFIX__OM_BEV_NONE.\");");
        } // end of behavior for PREFIXING__SHOWS_MANUAL_PREFIX__OM_BEV_NONE
    }
    
    private void PREFIXING__SHOWS_MANUAL_PREFIX__OM_BEV_NONE_exit()
    {
        // PREFIXING__SHOWS_MANUAL_PREFIX__OM_BEV_NONE behavior
        // uml: exit / { trace("Exit PREFIXING__SHOWS_MANUAL_PREFIX__OM_BEV_NONE."); }
        {
            // Step 1: execute action `trace("Exit PREFIXING__SHOWS_MANUAL_PREFIX__OM_BEV_NONE.");`
            ____GilData_EchoStringVoid("MainClass.Trace(\"Exit PREFIXING__SHOWS_MANUAL_PREFIX__OM_BEV_NONE.\");");
        } // end of behavior for PREFIXING__SHOWS_MANUAL_PREFIX__OM_BEV_NONE
        
        this.stateId = StateId.PREFIXING__SHOWS_MANUAL_PREFIX__OM_BEVERAGE;
    }
    
    private void PREFIXING__SHOWS_MANUAL_PREFIX__OM_BEV_NONE_ev1()
    {
        // PREFIXING__SHOWS_MANUAL_PREFIX__OM_BEV_NONE behavior
        // uml: EV1 [trace_guard("State PREFIXING__SHOWS_MANUAL_PREFIX__OM_BEV_NONE: check behavior `EV1 TransitionTo(PREFIXING__SHOWS_MANUAL_PREFIX__OM_BEV_WATER)`.", true)] / { trace("Transition action `` for PREFIXING__SHOWS_MANUAL_PREFIX__OM_BEV_NONE to PREFIXING__SHOWS_MANUAL_PREFIX__OM_BEV_WATER."); } TransitionTo(PREFIXING__SHOWS_MANUAL_PREFIX__OM_BEV_WATER)
        if (____GilData_VarArgsToBool(____GilData_EchoStringBool("trace_guard(\"State PREFIXING__SHOWS_MANUAL_PREFIX__OM_BEV_NONE: check behavior `EV1 TransitionTo(PREFIXING__SHOWS_MANUAL_PREFIX__OM_BEV_WATER)`.\", true)")))
        {
            // Step 1: Exit states until we reach `PREFIXING__SHOWS_MANUAL_PREFIX__OM_BEVERAGE` state (Least Common Ancestor for transition).
            this.PREFIXING__SHOWS_MANUAL_PREFIX__OM_BEV_NONE_exit();
            
            // Step 2: Transition action: `trace("Transition action `` for PREFIXING__SHOWS_MANUAL_PREFIX__OM_BEV_NONE to PREFIXING__SHOWS_MANUAL_PREFIX__OM_BEV_WATER.");`.
            ____GilData_EchoStringVoid("MainClass.Trace(\"Transition action `` for PREFIXING__SHOWS_MANUAL_PREFIX__OM_BEV_NONE to PREFIXING__SHOWS_MANUAL_PREFIX__OM_BEV_WATER.\");");
            
            // Step 3: Enter/move towards transition target `PREFIXING__SHOWS_MANUAL_PREFIX__OM_BEV_WATER`.
            this.PREFIXING__SHOWS_MANUAL_PREFIX__OM_BEV_WATER_enter();
            
            // Step 4: complete transition. Ends event dispatch. No other behaviors are checked.
            return;
        } // end of behavior for PREFIXING__SHOWS_MANUAL_PREFIX__OM_BEV_NONE
        
        // No ancestor handles this event.
    }
    
    
    ////////////////////////////////////////////////////////////////////////////////
    // event handlers for state PREFIXING__SHOWS_MANUAL_PREFIX__OM_BEV_TEA
    ////////////////////////////////////////////////////////////////////////////////
    
    private void PREFIXING__SHOWS_MANUAL_PREFIX__OM_BEV_TEA_enter()
    {
        this.stateId = StateId.PREFIXING__SHOWS_MANUAL_PREFIX__OM_BEV_TEA;
        
        // PREFIXING__SHOWS_MANUAL_PREFIX__OM_BEV_TEA behavior
        // uml: enter / { trace("Enter PREFIXING__SHOWS_MANUAL_PREFIX__OM_BEV_TEA."); }
        {
            // Step 1: execute action `trace("Enter PREFIXING__SHOWS_MANUAL_PREFIX__OM_BEV_TEA.");`
            ____GilData_EchoStringVoid("MainClass.Trace(\"Enter PREFIXING__SHOWS_MANUAL_PREFIX__OM_BEV_TEA.\");");
        } // end of behavior for PREFIXING__SHOWS_MANUAL_PREFIX__OM_BEV_TEA
    }
    
    private void PREFIXING__SHOWS_MANUAL_PREFIX__OM_BEV_TEA_exit()
    {
        // PREFIXING__SHOWS_MANUAL_PREFIX__OM_BEV_TEA behavior
        // uml: exit / { trace("Exit PREFIXING__SHOWS_MANUAL_PREFIX__OM_BEV_TEA."); }
        {
            // Step 1: execute action `trace("Exit PREFIXING__SHOWS_MANUAL_PREFIX__OM_BEV_TEA.");`
            ____GilData_EchoStringVoid("MainClass.Trace(\"Exit PREFIXING__SHOWS_MANUAL_PREFIX__OM_BEV_TEA.\");");
        } // end of behavior for PREFIXING__SHOWS_MANUAL_PREFIX__OM_BEV_TEA
        
        this.stateId = StateId.PREFIXING__SHOWS_MANUAL_PREFIX__OM_BEVERAGE;
    }
    
    
    ////////////////////////////////////////////////////////////////////////////////
    // event handlers for state PREFIXING__SHOWS_MANUAL_PREFIX__OM_BEV_WATER
    ////////////////////////////////////////////////////////////////////////////////
    
    private void PREFIXING__SHOWS_MANUAL_PREFIX__OM_BEV_WATER_enter()
    {
        this.stateId = StateId.PREFIXING__SHOWS_MANUAL_PREFIX__OM_BEV_WATER;
        
        // PREFIXING__SHOWS_MANUAL_PREFIX__OM_BEV_WATER behavior
        // uml: enter / { trace("Enter PREFIXING__SHOWS_MANUAL_PREFIX__OM_BEV_WATER."); }
        {
            // Step 1: execute action `trace("Enter PREFIXING__SHOWS_MANUAL_PREFIX__OM_BEV_WATER.");`
            ____GilData_EchoStringVoid("MainClass.Trace(\"Enter PREFIXING__SHOWS_MANUAL_PREFIX__OM_BEV_WATER.\");");
        } // end of behavior for PREFIXING__SHOWS_MANUAL_PREFIX__OM_BEV_WATER
    }
    
    private void PREFIXING__SHOWS_MANUAL_PREFIX__OM_BEV_WATER_exit()
    {
        // PREFIXING__SHOWS_MANUAL_PREFIX__OM_BEV_WATER behavior
        // uml: exit / { trace("Exit PREFIXING__SHOWS_MANUAL_PREFIX__OM_BEV_WATER."); }
        {
            // Step 1: execute action `trace("Exit PREFIXING__SHOWS_MANUAL_PREFIX__OM_BEV_WATER.");`
            ____GilData_EchoStringVoid("MainClass.Trace(\"Exit PREFIXING__SHOWS_MANUAL_PREFIX__OM_BEV_WATER.\");");
        } // end of behavior for PREFIXING__SHOWS_MANUAL_PREFIX__OM_BEV_WATER
        
        this.stateId = StateId.PREFIXING__SHOWS_MANUAL_PREFIX__OM_BEVERAGE;
    }
    
    private void PREFIXING__SHOWS_MANUAL_PREFIX__OM_BEV_WATER_ev1()
    {
        // PREFIXING__SHOWS_MANUAL_PREFIX__OM_BEV_WATER behavior
        // uml: EV1 [trace_guard("State PREFIXING__SHOWS_MANUAL_PREFIX__OM_BEV_WATER: check behavior `EV1 TransitionTo(PREFIXING__SHOWS_MANUAL_PREFIX__OM_BEV_TEA)`.", true)] / { trace("Transition action `` for PREFIXING__SHOWS_MANUAL_PREFIX__OM_BEV_WATER to PREFIXING__SHOWS_MANUAL_PREFIX__OM_BEV_TEA."); } TransitionTo(PREFIXING__SHOWS_MANUAL_PREFIX__OM_BEV_TEA)
        if (____GilData_VarArgsToBool(____GilData_EchoStringBool("trace_guard(\"State PREFIXING__SHOWS_MANUAL_PREFIX__OM_BEV_WATER: check behavior `EV1 TransitionTo(PREFIXING__SHOWS_MANUAL_PREFIX__OM_BEV_TEA)`.\", true)")))
        {
            // Step 1: Exit states until we reach `PREFIXING__SHOWS_MANUAL_PREFIX__OM_BEVERAGE` state (Least Common Ancestor for transition).
            this.PREFIXING__SHOWS_MANUAL_PREFIX__OM_BEV_WATER_exit();
            
            // Step 2: Transition action: `trace("Transition action `` for PREFIXING__SHOWS_MANUAL_PREFIX__OM_BEV_WATER to PREFIXING__SHOWS_MANUAL_PREFIX__OM_BEV_TEA.");`.
            ____GilData_EchoStringVoid("MainClass.Trace(\"Transition action `` for PREFIXING__SHOWS_MANUAL_PREFIX__OM_BEV_WATER to PREFIXING__SHOWS_MANUAL_PREFIX__OM_BEV_TEA.\");");
            
            // Step 3: Enter/move towards transition target `PREFIXING__SHOWS_MANUAL_PREFIX__OM_BEV_TEA`.
            this.PREFIXING__SHOWS_MANUAL_PREFIX__OM_BEV_TEA_enter();
            
            // Step 4: complete transition. Ends event dispatch. No other behaviors are checked.
            return;
        } // end of behavior for PREFIXING__SHOWS_MANUAL_PREFIX__OM_BEV_WATER
        
        // No ancestor handles this event.
    }
    
    
    ////////////////////////////////////////////////////////////////////////////////
    // event handlers for state PREFIXING__SHOWS_MANUAL_PREFIX__OM_VEG
    ////////////////////////////////////////////////////////////////////////////////
    
    private void PREFIXING__SHOWS_MANUAL_PREFIX__OM_VEG_enter()
    {
        this.stateId = StateId.PREFIXING__SHOWS_MANUAL_PREFIX__OM_VEG;
        
        // PREFIXING__SHOWS_MANUAL_PREFIX__OM_VEG behavior
        // uml: enter / { trace("Enter PREFIXING__SHOWS_MANUAL_PREFIX__OM_VEG."); }
        {
            // Step 1: execute action `trace("Enter PREFIXING__SHOWS_MANUAL_PREFIX__OM_VEG.");`
            ____GilData_EchoStringVoid("MainClass.Trace(\"Enter PREFIXING__SHOWS_MANUAL_PREFIX__OM_VEG.\");");
        } // end of behavior for PREFIXING__SHOWS_MANUAL_PREFIX__OM_VEG
    }
    
    private void PREFIXING__SHOWS_MANUAL_PREFIX__OM_VEG_exit()
    {
        // PREFIXING__SHOWS_MANUAL_PREFIX__OM_VEG behavior
        // uml: exit / { trace("Exit PREFIXING__SHOWS_MANUAL_PREFIX__OM_VEG."); }
        {
            // Step 1: execute action `trace("Exit PREFIXING__SHOWS_MANUAL_PREFIX__OM_VEG.");`
            ____GilData_EchoStringVoid("MainClass.Trace(\"Exit PREFIXING__SHOWS_MANUAL_PREFIX__OM_VEG.\");");
        } // end of behavior for PREFIXING__SHOWS_MANUAL_PREFIX__OM_VEG
        
        this.stateId = StateId.PREFIXING__SHOWS_MANUAL_PREFIX__ORDER_MENU;
    }
    
    private void PREFIXING__SHOWS_MANUAL_PREFIX__OM_VEG_ev2()
    {
        // PREFIXING__SHOWS_MANUAL_PREFIX__OM_VEG behavior
        // uml: EV2 [trace_guard("State PREFIXING__SHOWS_MANUAL_PREFIX__OM_VEG: check behavior `EV2 TransitionTo(PREFIXING__SHOWS_MANUAL_PREFIX__OM_BEVERAGE)`.", true)] / { trace("Transition action `` for PREFIXING__SHOWS_MANUAL_PREFIX__OM_VEG to PREFIXING__SHOWS_MANUAL_PREFIX__OM_BEVERAGE."); } TransitionTo(PREFIXING__SHOWS_MANUAL_PREFIX__OM_BEVERAGE)
        if (____GilData_VarArgsToBool(____GilData_EchoStringBool("trace_guard(\"State PREFIXING__SHOWS_MANUAL_PREFIX__OM_VEG: check behavior `EV2 TransitionTo(PREFIXING__SHOWS_MANUAL_PREFIX__OM_BEVERAGE)`.\", true)")))
        {
            // Step 1: Exit states until we reach `PREFIXING__SHOWS_MANUAL_PREFIX__ORDER_MENU` state (Least Common Ancestor for transition).
            this.ExitUpToStateHandler(StateId.PREFIXING__SHOWS_MANUAL_PREFIX__ORDER_MENU);
            
            // Step 2: Transition action: `trace("Transition action `` for PREFIXING__SHOWS_MANUAL_PREFIX__OM_VEG to PREFIXING__SHOWS_MANUAL_PREFIX__OM_BEVERAGE.");`.
            ____GilData_EchoStringVoid("MainClass.Trace(\"Transition action `` for PREFIXING__SHOWS_MANUAL_PREFIX__OM_VEG to PREFIXING__SHOWS_MANUAL_PREFIX__OM_BEVERAGE.\");");
            
            // Step 3: Enter/move towards transition target `PREFIXING__SHOWS_MANUAL_PREFIX__OM_BEVERAGE`.
            this.PREFIXING__SHOWS_MANUAL_PREFIX__OM_BEVERAGE_enter();
            
            // Finish transition by calling pseudo state transition function.
            this.PREFIXING__SHOWS_MANUAL_PREFIX__OM_BEVERAGE_InitialState_transition();
            return; // event processing immediately stops when a transition finishes. No other behaviors for this state are checked.
        } // end of behavior for PREFIXING__SHOWS_MANUAL_PREFIX__OM_VEG
        
        // No ancestor handles this event.
    }
    
    
    ////////////////////////////////////////////////////////////////////////////////
    // event handlers for state PREFIXING__SHOWS_MANUAL_PREFIX__OM_VEG_NONE
    ////////////////////////////////////////////////////////////////////////////////
    
    private void PREFIXING__SHOWS_MANUAL_PREFIX__OM_VEG_NONE_enter()
    {
        this.stateId = StateId.PREFIXING__SHOWS_MANUAL_PREFIX__OM_VEG_NONE;
        
        // PREFIXING__SHOWS_MANUAL_PREFIX__OM_VEG_NONE behavior
        // uml: enter / { trace("Enter PREFIXING__SHOWS_MANUAL_PREFIX__OM_VEG_NONE."); }
        {
            // Step 1: execute action `trace("Enter PREFIXING__SHOWS_MANUAL_PREFIX__OM_VEG_NONE.");`
            ____GilData_EchoStringVoid("MainClass.Trace(\"Enter PREFIXING__SHOWS_MANUAL_PREFIX__OM_VEG_NONE.\");");
        } // end of behavior for PREFIXING__SHOWS_MANUAL_PREFIX__OM_VEG_NONE
    }
    
    private void PREFIXING__SHOWS_MANUAL_PREFIX__OM_VEG_NONE_exit()
    {
        // PREFIXING__SHOWS_MANUAL_PREFIX__OM_VEG_NONE behavior
        // uml: exit / { trace("Exit PREFIXING__SHOWS_MANUAL_PREFIX__OM_VEG_NONE."); }
        {
            // Step 1: execute action `trace("Exit PREFIXING__SHOWS_MANUAL_PREFIX__OM_VEG_NONE.");`
            ____GilData_EchoStringVoid("MainClass.Trace(\"Exit PREFIXING__SHOWS_MANUAL_PREFIX__OM_VEG_NONE.\");");
        } // end of behavior for PREFIXING__SHOWS_MANUAL_PREFIX__OM_VEG_NONE
        
        this.stateId = StateId.PREFIXING__SHOWS_MANUAL_PREFIX__OM_VEG;
    }
    
    private void PREFIXING__SHOWS_MANUAL_PREFIX__OM_VEG_NONE_ev1()
    {
        // PREFIXING__SHOWS_MANUAL_PREFIX__OM_VEG_NONE behavior
        // uml: EV1 [trace_guard("State PREFIXING__SHOWS_MANUAL_PREFIX__OM_VEG_NONE: check behavior `EV1 TransitionTo(PREFIXING__SHOWS_MANUAL_PREFIX__OM_VEG_POTATO)`.", true)] / { trace("Transition action `` for PREFIXING__SHOWS_MANUAL_PREFIX__OM_VEG_NONE to PREFIXING__SHOWS_MANUAL_PREFIX__OM_VEG_POTATO."); } TransitionTo(PREFIXING__SHOWS_MANUAL_PREFIX__OM_VEG_POTATO)
        if (____GilData_VarArgsToBool(____GilData_EchoStringBool("trace_guard(\"State PREFIXING__SHOWS_MANUAL_PREFIX__OM_VEG_NONE: check behavior `EV1 TransitionTo(PREFIXING__SHOWS_MANUAL_PREFIX__OM_VEG_POTATO)`.\", true)")))
        {
            // Step 1: Exit states until we reach `PREFIXING__SHOWS_MANUAL_PREFIX__OM_VEG` state (Least Common Ancestor for transition).
            this.PREFIXING__SHOWS_MANUAL_PREFIX__OM_VEG_NONE_exit();
            
            // Step 2: Transition action: `trace("Transition action `` for PREFIXING__SHOWS_MANUAL_PREFIX__OM_VEG_NONE to PREFIXING__SHOWS_MANUAL_PREFIX__OM_VEG_POTATO.");`.
            ____GilData_EchoStringVoid("MainClass.Trace(\"Transition action `` for PREFIXING__SHOWS_MANUAL_PREFIX__OM_VEG_NONE to PREFIXING__SHOWS_MANUAL_PREFIX__OM_VEG_POTATO.\");");
            
            // Step 3: Enter/move towards transition target `PREFIXING__SHOWS_MANUAL_PREFIX__OM_VEG_POTATO`.
            this.PREFIXING__SHOWS_MANUAL_PREFIX__OM_VEG_POTATO_enter();
            
            // Step 4: complete transition. Ends event dispatch. No other behaviors are checked.
            return;
        } // end of behavior for PREFIXING__SHOWS_MANUAL_PREFIX__OM_VEG_NONE
        
        // No ancestor handles this event.
    }
    
    
    ////////////////////////////////////////////////////////////////////////////////
    // event handlers for state PREFIXING__SHOWS_MANUAL_PREFIX__OM_VEG_POTATO
    ////////////////////////////////////////////////////////////////////////////////
    
    private void PREFIXING__SHOWS_MANUAL_PREFIX__OM_VEG_POTATO_enter()
    {
        this.stateId = StateId.PREFIXING__SHOWS_MANUAL_PREFIX__OM_VEG_POTATO;
        
        // PREFIXING__SHOWS_MANUAL_PREFIX__OM_VEG_POTATO behavior
        // uml: enter / { trace("Enter PREFIXING__SHOWS_MANUAL_PREFIX__OM_VEG_POTATO."); }
        {
            // Step 1: execute action `trace("Enter PREFIXING__SHOWS_MANUAL_PREFIX__OM_VEG_POTATO.");`
            ____GilData_EchoStringVoid("MainClass.Trace(\"Enter PREFIXING__SHOWS_MANUAL_PREFIX__OM_VEG_POTATO.\");");
        } // end of behavior for PREFIXING__SHOWS_MANUAL_PREFIX__OM_VEG_POTATO
    }
    
    private void PREFIXING__SHOWS_MANUAL_PREFIX__OM_VEG_POTATO_exit()
    {
        // PREFIXING__SHOWS_MANUAL_PREFIX__OM_VEG_POTATO behavior
        // uml: exit / { trace("Exit PREFIXING__SHOWS_MANUAL_PREFIX__OM_VEG_POTATO."); }
        {
            // Step 1: execute action `trace("Exit PREFIXING__SHOWS_MANUAL_PREFIX__OM_VEG_POTATO.");`
            ____GilData_EchoStringVoid("MainClass.Trace(\"Exit PREFIXING__SHOWS_MANUAL_PREFIX__OM_VEG_POTATO.\");");
        } // end of behavior for PREFIXING__SHOWS_MANUAL_PREFIX__OM_VEG_POTATO
        
        this.stateId = StateId.PREFIXING__SHOWS_MANUAL_PREFIX__OM_VEG;
    }
    
    private void PREFIXING__SHOWS_MANUAL_PREFIX__OM_VEG_POTATO_ev1()
    {
        // PREFIXING__SHOWS_MANUAL_PREFIX__OM_VEG_POTATO behavior
        // uml: EV1 [trace_guard("State PREFIXING__SHOWS_MANUAL_PREFIX__OM_VEG_POTATO: check behavior `EV1 TransitionTo(PREFIXING__SHOWS_MANUAL_PREFIX__OM_VEG_YAM)`.", true)] / { trace("Transition action `` for PREFIXING__SHOWS_MANUAL_PREFIX__OM_VEG_POTATO to PREFIXING__SHOWS_MANUAL_PREFIX__OM_VEG_YAM."); } TransitionTo(PREFIXING__SHOWS_MANUAL_PREFIX__OM_VEG_YAM)
        if (____GilData_VarArgsToBool(____GilData_EchoStringBool("trace_guard(\"State PREFIXING__SHOWS_MANUAL_PREFIX__OM_VEG_POTATO: check behavior `EV1 TransitionTo(PREFIXING__SHOWS_MANUAL_PREFIX__OM_VEG_YAM)`.\", true)")))
        {
            // Step 1: Exit states until we reach `PREFIXING__SHOWS_MANUAL_PREFIX__OM_VEG` state (Least Common Ancestor for transition).
            this.PREFIXING__SHOWS_MANUAL_PREFIX__OM_VEG_POTATO_exit();
            
            // Step 2: Transition action: `trace("Transition action `` for PREFIXING__SHOWS_MANUAL_PREFIX__OM_VEG_POTATO to PREFIXING__SHOWS_MANUAL_PREFIX__OM_VEG_YAM.");`.
            ____GilData_EchoStringVoid("MainClass.Trace(\"Transition action `` for PREFIXING__SHOWS_MANUAL_PREFIX__OM_VEG_POTATO to PREFIXING__SHOWS_MANUAL_PREFIX__OM_VEG_YAM.\");");
            
            // Step 3: Enter/move towards transition target `PREFIXING__SHOWS_MANUAL_PREFIX__OM_VEG_YAM`.
            this.PREFIXING__SHOWS_MANUAL_PREFIX__OM_VEG_YAM_enter();
            
            // Step 4: complete transition. Ends event dispatch. No other behaviors are checked.
            return;
        } // end of behavior for PREFIXING__SHOWS_MANUAL_PREFIX__OM_VEG_POTATO
        
        // No ancestor handles this event.
    }
    
    
    ////////////////////////////////////////////////////////////////////////////////
    // event handlers for state PREFIXING__SHOWS_MANUAL_PREFIX__OM_VEG_YAM
    ////////////////////////////////////////////////////////////////////////////////
    
    private void PREFIXING__SHOWS_MANUAL_PREFIX__OM_VEG_YAM_enter()
    {
        this.stateId = StateId.PREFIXING__SHOWS_MANUAL_PREFIX__OM_VEG_YAM;
        
        // PREFIXING__SHOWS_MANUAL_PREFIX__OM_VEG_YAM behavior
        // uml: enter / { trace("Enter PREFIXING__SHOWS_MANUAL_PREFIX__OM_VEG_YAM."); }
        {
            // Step 1: execute action `trace("Enter PREFIXING__SHOWS_MANUAL_PREFIX__OM_VEG_YAM.");`
            ____GilData_EchoStringVoid("MainClass.Trace(\"Enter PREFIXING__SHOWS_MANUAL_PREFIX__OM_VEG_YAM.\");");
        } // end of behavior for PREFIXING__SHOWS_MANUAL_PREFIX__OM_VEG_YAM
    }
    
    private void PREFIXING__SHOWS_MANUAL_PREFIX__OM_VEG_YAM_exit()
    {
        // PREFIXING__SHOWS_MANUAL_PREFIX__OM_VEG_YAM behavior
        // uml: exit / { trace("Exit PREFIXING__SHOWS_MANUAL_PREFIX__OM_VEG_YAM."); }
        {
            // Step 1: execute action `trace("Exit PREFIXING__SHOWS_MANUAL_PREFIX__OM_VEG_YAM.");`
            ____GilData_EchoStringVoid("MainClass.Trace(\"Exit PREFIXING__SHOWS_MANUAL_PREFIX__OM_VEG_YAM.\");");
        } // end of behavior for PREFIXING__SHOWS_MANUAL_PREFIX__OM_VEG_YAM
        
        this.stateId = StateId.PREFIXING__SHOWS_MANUAL_PREFIX__OM_VEG;
    }
    
    
    ////////////////////////////////////////////////////////////////////////////////
    // event handlers for state SPEC2SM__DECIDE
    ////////////////////////////////////////////////////////////////////////////////
    
    private void SPEC2SM__DECIDE_enter()
    {
        this.stateId = StateId.SPEC2SM__DECIDE;
        
        // Spec2Sm__DECIDE behavior
        // uml: enter / { trace("Enter Spec2Sm__DECIDE."); }
        {
            // Step 1: execute action `trace("Enter Spec2Sm__DECIDE.");`
            ____GilData_EchoStringVoid("MainClass.Trace(\"Enter Spec2Sm__DECIDE.\");");
        } // end of behavior for Spec2Sm__DECIDE
    }
    
    private void SPEC2SM__DECIDE_exit()
    {
        // Spec2Sm__DECIDE behavior
        // uml: exit / { trace("Exit Spec2Sm__DECIDE."); }
        {
            // Step 1: execute action `trace("Exit Spec2Sm__DECIDE.");`
            ____GilData_EchoStringVoid("MainClass.Trace(\"Exit Spec2Sm__DECIDE.\");");
        } // end of behavior for Spec2Sm__DECIDE
        
        this.stateId = StateId.ROOT;
    }
    
    private void SPEC2SM__DECIDE_do()
    {
        bool consume_event = false;
        
        // Spec2Sm__DECIDE behavior
        // uml: do [trace_guard("State Spec2Sm__DECIDE: check behavior `do TransitionTo(USELESS)`.", true)] / { trace("Transition action `` for Spec2Sm__DECIDE to USELESS."); } TransitionTo(USELESS)
        if (____GilData_VarArgsToBool(____GilData_EchoStringBool("trace_guard(\"State Spec2Sm__DECIDE: check behavior `do TransitionTo(USELESS)`.\", true)")))
        {
            // Step 1: Exit states until we reach `ROOT` state (Least Common Ancestor for transition).
            this.SPEC2SM__DECIDE_exit();
            
            // Step 2: Transition action: `trace("Transition action `` for Spec2Sm__DECIDE to USELESS.");`.
            ____GilData_EchoStringVoid("MainClass.Trace(\"Transition action `` for Spec2Sm__DECIDE to USELESS.\");");
            
            // Step 3: Enter/move towards transition target `USELESS`.
            this.USELESS_enter();
            
            // Step 4: complete transition. Ends event dispatch. No other behaviors are checked.
            return;
        } // end of behavior for Spec2Sm__DECIDE
        
        // Check if event has been consumed before calling ancestor handler.
        if (!consume_event)
        {
            this.ROOT_do();
        }
    }
    
    private void SPEC2SM__DECIDE_ev1()
    {
        // Spec2Sm__DECIDE behavior
        // uml: 1. EV1 [trace_guard("State Spec2Sm__DECIDE: check behavior `1. EV1 TransitionTo(TEST1_DO_EVENT_TESTING)`.", true)] / { trace("Transition action `` for Spec2Sm__DECIDE to TEST1_DO_EVENT_TESTING."); } TransitionTo(TEST1_DO_EVENT_TESTING)
        if (____GilData_VarArgsToBool(____GilData_EchoStringBool("trace_guard(\"State Spec2Sm__DECIDE: check behavior `1. EV1 TransitionTo(TEST1_DO_EVENT_TESTING)`.\", true)")))
        {
            // Step 1: Exit states until we reach `ROOT` state (Least Common Ancestor for transition).
            this.SPEC2SM__DECIDE_exit();
            
            // Step 2: Transition action: `trace("Transition action `` for Spec2Sm__DECIDE to TEST1_DO_EVENT_TESTING.");`.
            ____GilData_EchoStringVoid("MainClass.Trace(\"Transition action `` for Spec2Sm__DECIDE to TEST1_DO_EVENT_TESTING.\");");
            
            // Step 3: Enter/move towards transition target `TEST1_DO_EVENT_TESTING`.
            this.TEST1_DO_EVENT_TESTING_enter();
            
            // TEST1_DO_EVENT_TESTING.<InitialState> behavior
            // uml: / { trace("Transition action `` for TEST1_DO_EVENT_TESTING.<InitialState> to TEST1_ROOT."); } TransitionTo(TEST1_ROOT)
            {
                // Step 1: Exit states until we reach `TEST1_DO_EVENT_TESTING` state (Least Common Ancestor for transition). Already at LCA, no exiting required.
                
                // Step 2: Transition action: `trace("Transition action `` for TEST1_DO_EVENT_TESTING.<InitialState> to TEST1_ROOT.");`.
                ____GilData_EchoStringVoid("MainClass.Trace(\"Transition action `` for TEST1_DO_EVENT_TESTING.<InitialState> to TEST1_ROOT.\");");
                
                // Step 3: Enter/move towards transition target `TEST1_ROOT`.
                this.TEST1_ROOT_enter();
                
                // TEST1_ROOT.<InitialState> behavior
                // uml: / { trace("Transition action `` for TEST1_ROOT.<InitialState> to TEST1_S1_1."); } TransitionTo(TEST1_S1_1)
                {
                    // Step 1: Exit states until we reach `TEST1_ROOT` state (Least Common Ancestor for transition). Already at LCA, no exiting required.
                    
                    // Step 2: Transition action: `trace("Transition action `` for TEST1_ROOT.<InitialState> to TEST1_S1_1.");`.
                    ____GilData_EchoStringVoid("MainClass.Trace(\"Transition action `` for TEST1_ROOT.<InitialState> to TEST1_S1_1.\");");
                    
                    // Step 3: Enter/move towards transition target `TEST1_S1_1`.
                    this.TEST1_S1_enter();
                    this.TEST1_S1_1_enter();
                    
                    // Step 4: complete transition. Ends event dispatch. No other behaviors are checked.
                    return;
                } // end of behavior for TEST1_ROOT.<InitialState>
            } // end of behavior for TEST1_DO_EVENT_TESTING.<InitialState>
        } // end of behavior for Spec2Sm__DECIDE
        
        // Spec2Sm__DECIDE behavior
        // uml: EV1 [trace_guard("State Spec2Sm__DECIDE: check behavior `EV1 TransitionTo(UNREACHABLE)`.", true)] / { trace("Transition action `` for Spec2Sm__DECIDE to UNREACHABLE."); } TransitionTo(UNREACHABLE)
        if (____GilData_VarArgsToBool(____GilData_EchoStringBool("trace_guard(\"State Spec2Sm__DECIDE: check behavior `EV1 TransitionTo(UNREACHABLE)`.\", true)")))
        {
            // Step 1: Exit states until we reach `ROOT` state (Least Common Ancestor for transition).
            this.SPEC2SM__DECIDE_exit();
            
            // Step 2: Transition action: `trace("Transition action `` for Spec2Sm__DECIDE to UNREACHABLE.");`.
            ____GilData_EchoStringVoid("MainClass.Trace(\"Transition action `` for Spec2Sm__DECIDE to UNREACHABLE.\");");
            
            // Step 3: Enter/move towards transition target `UNREACHABLE`.
            this.UNREACHABLE_enter();
            
            // Step 4: complete transition. Ends event dispatch. No other behaviors are checked.
            return;
        } // end of behavior for Spec2Sm__DECIDE
        
        // No ancestor handles this event.
    }
    
    private void SPEC2SM__DECIDE_ev10()
    {
        // Spec2Sm__DECIDE behavior
        // uml: EV10 [trace_guard("State Spec2Sm__DECIDE: check behavior `EV10 TransitionTo(TEST10_CHOICE_POINT)`.", true)] / { trace("Transition action `` for Spec2Sm__DECIDE to TEST10_CHOICE_POINT."); } TransitionTo(TEST10_CHOICE_POINT)
        if (____GilData_VarArgsToBool(____GilData_EchoStringBool("trace_guard(\"State Spec2Sm__DECIDE: check behavior `EV10 TransitionTo(TEST10_CHOICE_POINT)`.\", true)")))
        {
            // Step 1: Exit states until we reach `ROOT` state (Least Common Ancestor for transition).
            this.SPEC2SM__DECIDE_exit();
            
            // Step 2: Transition action: `trace("Transition action `` for Spec2Sm__DECIDE to TEST10_CHOICE_POINT.");`.
            ____GilData_EchoStringVoid("MainClass.Trace(\"Transition action `` for Spec2Sm__DECIDE to TEST10_CHOICE_POINT.\");");
            
            // Step 3: Enter/move towards transition target `TEST10_CHOICE_POINT`.
            this.TEST10_CHOICE_POINT_enter();
            
            // TEST10_CHOICE_POINT.<InitialState> behavior
            // uml: / { trace("Transition action `` for TEST10_CHOICE_POINT.<InitialState> to TEST10_S1."); } TransitionTo(TEST10_S1)
            {
                // Step 1: Exit states until we reach `TEST10_CHOICE_POINT` state (Least Common Ancestor for transition). Already at LCA, no exiting required.
                
                // Step 2: Transition action: `trace("Transition action `` for TEST10_CHOICE_POINT.<InitialState> to TEST10_S1.");`.
                ____GilData_EchoStringVoid("MainClass.Trace(\"Transition action `` for TEST10_CHOICE_POINT.<InitialState> to TEST10_S1.\");");
                
                // Step 3: Enter/move towards transition target `TEST10_S1`.
                this.TEST10_ROOT_enter();
                this.TEST10_S1_enter();
                
                // Step 4: complete transition. Ends event dispatch. No other behaviors are checked.
                return;
            } // end of behavior for TEST10_CHOICE_POINT.<InitialState>
        } // end of behavior for Spec2Sm__DECIDE
        
        // No ancestor handles this event.
    }
    
    private void SPEC2SM__DECIDE_ev2()
    {
        // Spec2Sm__DECIDE behavior
        // uml: EV2 [trace_guard("State Spec2Sm__DECIDE: check behavior `EV2 TransitionTo(TEST2_REGULAR_EVENT_TESTING)`.", true)] / { trace("Transition action `` for Spec2Sm__DECIDE to TEST2_REGULAR_EVENT_TESTING."); } TransitionTo(TEST2_REGULAR_EVENT_TESTING)
        if (____GilData_VarArgsToBool(____GilData_EchoStringBool("trace_guard(\"State Spec2Sm__DECIDE: check behavior `EV2 TransitionTo(TEST2_REGULAR_EVENT_TESTING)`.\", true)")))
        {
            // Step 1: Exit states until we reach `ROOT` state (Least Common Ancestor for transition).
            this.SPEC2SM__DECIDE_exit();
            
            // Step 2: Transition action: `trace("Transition action `` for Spec2Sm__DECIDE to TEST2_REGULAR_EVENT_TESTING.");`.
            ____GilData_EchoStringVoid("MainClass.Trace(\"Transition action `` for Spec2Sm__DECIDE to TEST2_REGULAR_EVENT_TESTING.\");");
            
            // Step 3: Enter/move towards transition target `TEST2_REGULAR_EVENT_TESTING`.
            this.TEST2_REGULAR_EVENT_TESTING_enter();
            
            // TEST2_REGULAR_EVENT_TESTING.<InitialState> behavior
            // uml: / { trace("Transition action `` for TEST2_REGULAR_EVENT_TESTING.<InitialState> to TEST2_ROOT."); } TransitionTo(TEST2_ROOT)
            {
                // Step 1: Exit states until we reach `TEST2_REGULAR_EVENT_TESTING` state (Least Common Ancestor for transition). Already at LCA, no exiting required.
                
                // Step 2: Transition action: `trace("Transition action `` for TEST2_REGULAR_EVENT_TESTING.<InitialState> to TEST2_ROOT.");`.
                ____GilData_EchoStringVoid("MainClass.Trace(\"Transition action `` for TEST2_REGULAR_EVENT_TESTING.<InitialState> to TEST2_ROOT.\");");
                
                // Step 3: Enter/move towards transition target `TEST2_ROOT`.
                this.TEST2_ROOT_enter();
                
                // TEST2_ROOT.<InitialState> behavior
                // uml: / { trace("Transition action `` for TEST2_ROOT.<InitialState> to TEST2_S1_1."); } TransitionTo(TEST2_S1_1)
                {
                    // Step 1: Exit states until we reach `TEST2_ROOT` state (Least Common Ancestor for transition). Already at LCA, no exiting required.
                    
                    // Step 2: Transition action: `trace("Transition action `` for TEST2_ROOT.<InitialState> to TEST2_S1_1.");`.
                    ____GilData_EchoStringVoid("MainClass.Trace(\"Transition action `` for TEST2_ROOT.<InitialState> to TEST2_S1_1.\");");
                    
                    // Step 3: Enter/move towards transition target `TEST2_S1_1`.
                    this.TEST2_S1_enter();
                    this.TEST2_S1_1_enter();
                    
                    // Step 4: complete transition. Ends event dispatch. No other behaviors are checked.
                    return;
                } // end of behavior for TEST2_ROOT.<InitialState>
            } // end of behavior for TEST2_REGULAR_EVENT_TESTING.<InitialState>
        } // end of behavior for Spec2Sm__DECIDE
        
        // No ancestor handles this event.
    }
    
    private void SPEC2SM__DECIDE_ev3()
    {
        // Spec2Sm__DECIDE behavior
        // uml: EV3 [trace_guard("State Spec2Sm__DECIDE: check behavior `EV3 TransitionTo(TEST3_BEHAVIOR_ORDERING)`.", true)] / { trace("Transition action `` for Spec2Sm__DECIDE to TEST3_BEHAVIOR_ORDERING."); } TransitionTo(TEST3_BEHAVIOR_ORDERING)
        if (____GilData_VarArgsToBool(____GilData_EchoStringBool("trace_guard(\"State Spec2Sm__DECIDE: check behavior `EV3 TransitionTo(TEST3_BEHAVIOR_ORDERING)`.\", true)")))
        {
            // Step 1: Exit states until we reach `ROOT` state (Least Common Ancestor for transition).
            this.SPEC2SM__DECIDE_exit();
            
            // Step 2: Transition action: `trace("Transition action `` for Spec2Sm__DECIDE to TEST3_BEHAVIOR_ORDERING.");`.
            ____GilData_EchoStringVoid("MainClass.Trace(\"Transition action `` for Spec2Sm__DECIDE to TEST3_BEHAVIOR_ORDERING.\");");
            
            // Step 3: Enter/move towards transition target `TEST3_BEHAVIOR_ORDERING`.
            this.TEST3_BEHAVIOR_ORDERING_enter();
            
            // TEST3_BEHAVIOR_ORDERING.<InitialState> behavior
            // uml: / { trace("Transition action `` for TEST3_BEHAVIOR_ORDERING.<InitialState> to TEST3_ROOT."); } TransitionTo(TEST3_ROOT)
            {
                // Step 1: Exit states until we reach `TEST3_BEHAVIOR_ORDERING` state (Least Common Ancestor for transition). Already at LCA, no exiting required.
                
                // Step 2: Transition action: `trace("Transition action `` for TEST3_BEHAVIOR_ORDERING.<InitialState> to TEST3_ROOT.");`.
                ____GilData_EchoStringVoid("MainClass.Trace(\"Transition action `` for TEST3_BEHAVIOR_ORDERING.<InitialState> to TEST3_ROOT.\");");
                
                // Step 3: Enter/move towards transition target `TEST3_ROOT`.
                this.TEST3_ROOT_enter();
                
                // TEST3_ROOT.<InitialState> behavior
                // uml: / { trace("Transition action `` for TEST3_ROOT.<InitialState> to TEST3_S1."); } TransitionTo(TEST3_S1)
                {
                    // Step 1: Exit states until we reach `TEST3_ROOT` state (Least Common Ancestor for transition). Already at LCA, no exiting required.
                    
                    // Step 2: Transition action: `trace("Transition action `` for TEST3_ROOT.<InitialState> to TEST3_S1.");`.
                    ____GilData_EchoStringVoid("MainClass.Trace(\"Transition action `` for TEST3_ROOT.<InitialState> to TEST3_S1.\");");
                    
                    // Step 3: Enter/move towards transition target `TEST3_S1`.
                    this.TEST3_S1_enter();
                    
                    // Step 4: complete transition. Ends event dispatch. No other behaviors are checked.
                    return;
                } // end of behavior for TEST3_ROOT.<InitialState>
            } // end of behavior for TEST3_BEHAVIOR_ORDERING.<InitialState>
        } // end of behavior for Spec2Sm__DECIDE
        
        // No ancestor handles this event.
    }
    
    private void SPEC2SM__DECIDE_ev4()
    {
        // Spec2Sm__DECIDE behavior
        // uml: EV4 [trace_guard("State Spec2Sm__DECIDE: check behavior `EV4 TransitionTo(TEST4_PARENT_CHILD_TRANSITIONS)`.", true)] / { trace("Transition action `` for Spec2Sm__DECIDE to TEST4_PARENT_CHILD_TRANSITIONS."); } TransitionTo(TEST4_PARENT_CHILD_TRANSITIONS)
        if (____GilData_VarArgsToBool(____GilData_EchoStringBool("trace_guard(\"State Spec2Sm__DECIDE: check behavior `EV4 TransitionTo(TEST4_PARENT_CHILD_TRANSITIONS)`.\", true)")))
        {
            // Step 1: Exit states until we reach `ROOT` state (Least Common Ancestor for transition).
            this.SPEC2SM__DECIDE_exit();
            
            // Step 2: Transition action: `trace("Transition action `` for Spec2Sm__DECIDE to TEST4_PARENT_CHILD_TRANSITIONS.");`.
            ____GilData_EchoStringVoid("MainClass.Trace(\"Transition action `` for Spec2Sm__DECIDE to TEST4_PARENT_CHILD_TRANSITIONS.\");");
            
            // Step 3: Enter/move towards transition target `TEST4_PARENT_CHILD_TRANSITIONS`.
            this.TEST4_PARENT_CHILD_TRANSITIONS_enter();
            
            // TEST4_PARENT_CHILD_TRANSITIONS.<InitialState> behavior
            // uml: / { trace("Transition action `` for TEST4_PARENT_CHILD_TRANSITIONS.<InitialState> to TEST4_DECIDE."); } TransitionTo(TEST4_DECIDE)
            {
                // Step 1: Exit states until we reach `TEST4_PARENT_CHILD_TRANSITIONS` state (Least Common Ancestor for transition). Already at LCA, no exiting required.
                
                // Step 2: Transition action: `trace("Transition action `` for TEST4_PARENT_CHILD_TRANSITIONS.<InitialState> to TEST4_DECIDE.");`.
                ____GilData_EchoStringVoid("MainClass.Trace(\"Transition action `` for TEST4_PARENT_CHILD_TRANSITIONS.<InitialState> to TEST4_DECIDE.\");");
                
                // Step 3: Enter/move towards transition target `TEST4_DECIDE`.
                this.TEST4_DECIDE_enter();
                
                // Step 4: complete transition. Ends event dispatch. No other behaviors are checked.
                return;
            } // end of behavior for TEST4_PARENT_CHILD_TRANSITIONS.<InitialState>
        } // end of behavior for Spec2Sm__DECIDE
        
        // No ancestor handles this event.
    }
    
    private void SPEC2SM__DECIDE_ev5()
    {
        // Spec2Sm__DECIDE behavior
        // uml: EV5 [trace_guard("State Spec2Sm__DECIDE: check behavior `EV5 TransitionTo(TEST5_PARENT_CHILD_TRANSITIONS_ALIAS)`.", true)] / { trace("Transition action `` for Spec2Sm__DECIDE to TEST5_PARENT_CHILD_TRANSITIONS_ALIAS."); } TransitionTo(TEST5_PARENT_CHILD_TRANSITIONS_ALIAS)
        if (____GilData_VarArgsToBool(____GilData_EchoStringBool("trace_guard(\"State Spec2Sm__DECIDE: check behavior `EV5 TransitionTo(TEST5_PARENT_CHILD_TRANSITIONS_ALIAS)`.\", true)")))
        {
            // Step 1: Exit states until we reach `ROOT` state (Least Common Ancestor for transition).
            this.SPEC2SM__DECIDE_exit();
            
            // Step 2: Transition action: `trace("Transition action `` for Spec2Sm__DECIDE to TEST5_PARENT_CHILD_TRANSITIONS_ALIAS.");`.
            ____GilData_EchoStringVoid("MainClass.Trace(\"Transition action `` for Spec2Sm__DECIDE to TEST5_PARENT_CHILD_TRANSITIONS_ALIAS.\");");
            
            // Step 3: Enter/move towards transition target `TEST5_PARENT_CHILD_TRANSITIONS_ALIAS`.
            this.TEST5_PARENT_CHILD_TRANSITIONS_ALIAS_enter();
            
            // TEST5_PARENT_CHILD_TRANSITIONS_ALIAS.<InitialState> behavior
            // uml: / { trace("Transition action `` for TEST5_PARENT_CHILD_TRANSITIONS_ALIAS.<InitialState> to TEST5_ROOT."); } TransitionTo(TEST5_ROOT)
            {
                // Step 1: Exit states until we reach `TEST5_PARENT_CHILD_TRANSITIONS_ALIAS` state (Least Common Ancestor for transition). Already at LCA, no exiting required.
                
                // Step 2: Transition action: `trace("Transition action `` for TEST5_PARENT_CHILD_TRANSITIONS_ALIAS.<InitialState> to TEST5_ROOT.");`.
                ____GilData_EchoStringVoid("MainClass.Trace(\"Transition action `` for TEST5_PARENT_CHILD_TRANSITIONS_ALIAS.<InitialState> to TEST5_ROOT.\");");
                
                // Step 3: Enter/move towards transition target `TEST5_ROOT`.
                this.TEST5_ROOT_enter();
                
                // Step 4: complete transition. Ends event dispatch. No other behaviors are checked.
                return;
            } // end of behavior for TEST5_PARENT_CHILD_TRANSITIONS_ALIAS.<InitialState>
        } // end of behavior for Spec2Sm__DECIDE
        
        // No ancestor handles this event.
    }
    
    private void SPEC2SM__DECIDE_ev6()
    {
        // Spec2Sm__DECIDE behavior
        // uml: EV6 [trace_guard("State Spec2Sm__DECIDE: check behavior `EV6 TransitionTo(TEST6_VARS_EXPANSIONS)`.", true)] / { trace("Transition action `` for Spec2Sm__DECIDE to TEST6_VARS_EXPANSIONS."); } TransitionTo(TEST6_VARS_EXPANSIONS)
        if (____GilData_VarArgsToBool(____GilData_EchoStringBool("trace_guard(\"State Spec2Sm__DECIDE: check behavior `EV6 TransitionTo(TEST6_VARS_EXPANSIONS)`.\", true)")))
        {
            // Step 1: Exit states until we reach `ROOT` state (Least Common Ancestor for transition).
            this.SPEC2SM__DECIDE_exit();
            
            // Step 2: Transition action: `trace("Transition action `` for Spec2Sm__DECIDE to TEST6_VARS_EXPANSIONS.");`.
            ____GilData_EchoStringVoid("MainClass.Trace(\"Transition action `` for Spec2Sm__DECIDE to TEST6_VARS_EXPANSIONS.\");");
            
            // Step 3: Enter/move towards transition target `TEST6_VARS_EXPANSIONS`.
            this.TEST6_VARS_EXPANSIONS_enter();
            
            // TEST6_VARS_EXPANSIONS.<InitialState> behavior
            // uml: / { trace("Transition action `` for TEST6_VARS_EXPANSIONS.<InitialState> to TEST6_ROOT."); } TransitionTo(TEST6_ROOT)
            {
                // Step 1: Exit states until we reach `TEST6_VARS_EXPANSIONS` state (Least Common Ancestor for transition). Already at LCA, no exiting required.
                
                // Step 2: Transition action: `trace("Transition action `` for TEST6_VARS_EXPANSIONS.<InitialState> to TEST6_ROOT.");`.
                ____GilData_EchoStringVoid("MainClass.Trace(\"Transition action `` for TEST6_VARS_EXPANSIONS.<InitialState> to TEST6_ROOT.\");");
                
                // Step 3: Enter/move towards transition target `TEST6_ROOT`.
                this.TEST6_ROOT_enter();
                
                // TEST6_ROOT.<InitialState> behavior
                // uml: / { trace("Transition action `` for TEST6_ROOT.<InitialState> to TEST6_VARS_EXPANSIONS__DECIDE."); } TransitionTo(TEST6_VARS_EXPANSIONS__DECIDE)
                {
                    // Step 1: Exit states until we reach `TEST6_ROOT` state (Least Common Ancestor for transition). Already at LCA, no exiting required.
                    
                    // Step 2: Transition action: `trace("Transition action `` for TEST6_ROOT.<InitialState> to TEST6_VARS_EXPANSIONS__DECIDE.");`.
                    ____GilData_EchoStringVoid("MainClass.Trace(\"Transition action `` for TEST6_ROOT.<InitialState> to TEST6_VARS_EXPANSIONS__DECIDE.\");");
                    
                    // Step 3: Enter/move towards transition target `TEST6_VARS_EXPANSIONS__DECIDE`.
                    this.TEST6_VARS_EXPANSIONS__DECIDE_enter();
                    
                    // Step 4: complete transition. Ends event dispatch. No other behaviors are checked.
                    return;
                } // end of behavior for TEST6_ROOT.<InitialState>
            } // end of behavior for TEST6_VARS_EXPANSIONS.<InitialState>
        } // end of behavior for Spec2Sm__DECIDE
        
        // No ancestor handles this event.
    }
    
    private void SPEC2SM__DECIDE_ev7()
    {
        // Spec2Sm__DECIDE behavior
        // uml: EV7 [trace_guard("State Spec2Sm__DECIDE: check behavior `EV7 TransitionTo(TEST7_INITIAL_OR_HISTORY)`.", true)] / { trace("Transition action `` for Spec2Sm__DECIDE to TEST7_INITIAL_OR_HISTORY."); } TransitionTo(TEST7_INITIAL_OR_HISTORY)
        if (____GilData_VarArgsToBool(____GilData_EchoStringBool("trace_guard(\"State Spec2Sm__DECIDE: check behavior `EV7 TransitionTo(TEST7_INITIAL_OR_HISTORY)`.\", true)")))
        {
            // Step 1: Exit states until we reach `ROOT` state (Least Common Ancestor for transition).
            this.SPEC2SM__DECIDE_exit();
            
            // Step 2: Transition action: `trace("Transition action `` for Spec2Sm__DECIDE to TEST7_INITIAL_OR_HISTORY.");`.
            ____GilData_EchoStringVoid("MainClass.Trace(\"Transition action `` for Spec2Sm__DECIDE to TEST7_INITIAL_OR_HISTORY.\");");
            
            // Step 3: Enter/move towards transition target `TEST7_INITIAL_OR_HISTORY`.
            this.TEST7_INITIAL_OR_HISTORY_enter();
            
            // TEST7_INITIAL_OR_HISTORY.<InitialState> behavior
            // uml: / { trace("Transition action `` for TEST7_INITIAL_OR_HISTORY.<InitialState> to TEST7_DECIDE."); } TransitionTo(TEST7_DECIDE)
            {
                // Step 1: Exit states until we reach `TEST7_INITIAL_OR_HISTORY` state (Least Common Ancestor for transition). Already at LCA, no exiting required.
                
                // Step 2: Transition action: `trace("Transition action `` for TEST7_INITIAL_OR_HISTORY.<InitialState> to TEST7_DECIDE.");`.
                ____GilData_EchoStringVoid("MainClass.Trace(\"Transition action `` for TEST7_INITIAL_OR_HISTORY.<InitialState> to TEST7_DECIDE.\");");
                
                // Step 3: Enter/move towards transition target `TEST7_DECIDE`.
                this.TEST7_DECIDE_enter();
                
                // Step 4: complete transition. Ends event dispatch. No other behaviors are checked.
                return;
            } // end of behavior for TEST7_INITIAL_OR_HISTORY.<InitialState>
        } // end of behavior for Spec2Sm__DECIDE
        
        // No ancestor handles this event.
    }
    
    private void SPEC2SM__DECIDE_ev8()
    {
        // Spec2Sm__DECIDE behavior
        // uml: EV8 [trace_guard("State Spec2Sm__DECIDE: check behavior `EV8 TransitionTo(TEST8_ENTRY_CHOICE)`.", true)] / { trace("Transition action `` for Spec2Sm__DECIDE to TEST8_ENTRY_CHOICE."); } TransitionTo(TEST8_ENTRY_CHOICE)
        if (____GilData_VarArgsToBool(____GilData_EchoStringBool("trace_guard(\"State Spec2Sm__DECIDE: check behavior `EV8 TransitionTo(TEST8_ENTRY_CHOICE)`.\", true)")))
        {
            // Step 1: Exit states until we reach `ROOT` state (Least Common Ancestor for transition).
            this.SPEC2SM__DECIDE_exit();
            
            // Step 2: Transition action: `trace("Transition action `` for Spec2Sm__DECIDE to TEST8_ENTRY_CHOICE.");`.
            ____GilData_EchoStringVoid("MainClass.Trace(\"Transition action `` for Spec2Sm__DECIDE to TEST8_ENTRY_CHOICE.\");");
            
            // Step 3: Enter/move towards transition target `TEST8_ENTRY_CHOICE`.
            this.TEST8_ENTRY_CHOICE_enter();
            
            // TEST8_ENTRY_CHOICE.<InitialState> behavior
            // uml: / { trace("Transition action `` for TEST8_ENTRY_CHOICE.<InitialState> to TEST8_ROOT.<EntryPoint>(1)."); } TransitionTo(TEST8_ROOT.<EntryPoint>(1))
            {
                // Step 1: Exit states until we reach `TEST8_ENTRY_CHOICE` state (Least Common Ancestor for transition). Already at LCA, no exiting required.
                
                // Step 2: Transition action: `trace("Transition action `` for TEST8_ENTRY_CHOICE.<InitialState> to TEST8_ROOT.<EntryPoint>(1).");`.
                ____GilData_EchoStringVoid("MainClass.Trace(\"Transition action `` for TEST8_ENTRY_CHOICE.<InitialState> to TEST8_ROOT.<EntryPoint>(1).\");");
                
                // Step 3: Enter/move towards transition target `TEST8_ROOT.<EntryPoint>(1)`.
                this.TEST8_ROOT_enter();
                // TEST8_ROOT.<EntryPoint>(1) is a pseudo state and cannot have an `enter` trigger.
                
                // Finish transition by calling pseudo state transition function.
                this.TEST8_ROOT_EntryPoint_1__transition();
                return; // event processing immediately stops when a transition finishes. No other behaviors for this state are checked.
            } // end of behavior for TEST8_ENTRY_CHOICE.<InitialState>
        } // end of behavior for Spec2Sm__DECIDE
        
        // No ancestor handles this event.
    }
    
    private void SPEC2SM__DECIDE_ev9()
    {
        // Spec2Sm__DECIDE behavior
        // uml: EV9 [trace_guard("State Spec2Sm__DECIDE: check behavior `EV9 TransitionTo(TEST9_EXIT_CHOICE)`.", true)] / { trace("Transition action `` for Spec2Sm__DECIDE to TEST9_EXIT_CHOICE."); } TransitionTo(TEST9_EXIT_CHOICE)
        if (____GilData_VarArgsToBool(____GilData_EchoStringBool("trace_guard(\"State Spec2Sm__DECIDE: check behavior `EV9 TransitionTo(TEST9_EXIT_CHOICE)`.\", true)")))
        {
            // Step 1: Exit states until we reach `ROOT` state (Least Common Ancestor for transition).
            this.SPEC2SM__DECIDE_exit();
            
            // Step 2: Transition action: `trace("Transition action `` for Spec2Sm__DECIDE to TEST9_EXIT_CHOICE.");`.
            ____GilData_EchoStringVoid("MainClass.Trace(\"Transition action `` for Spec2Sm__DECIDE to TEST9_EXIT_CHOICE.\");");
            
            // Step 3: Enter/move towards transition target `TEST9_EXIT_CHOICE`.
            this.TEST9_EXIT_CHOICE_enter();
            
            // TEST9_EXIT_CHOICE.<InitialState> behavior
            // uml: / { trace("Transition action `` for TEST9_EXIT_CHOICE.<InitialState> to TEST9_DECIDE."); } TransitionTo(TEST9_DECIDE)
            {
                // Step 1: Exit states until we reach `TEST9_EXIT_CHOICE` state (Least Common Ancestor for transition). Already at LCA, no exiting required.
                
                // Step 2: Transition action: `trace("Transition action `` for TEST9_EXIT_CHOICE.<InitialState> to TEST9_DECIDE.");`.
                ____GilData_EchoStringVoid("MainClass.Trace(\"Transition action `` for TEST9_EXIT_CHOICE.<InitialState> to TEST9_DECIDE.\");");
                
                // Step 3: Enter/move towards transition target `TEST9_DECIDE`.
                this.TEST9_DECIDE_enter();
                
                // Step 4: complete transition. Ends event dispatch. No other behaviors are checked.
                return;
            } // end of behavior for TEST9_EXIT_CHOICE.<InitialState>
        } // end of behavior for Spec2Sm__DECIDE
        
        // No ancestor handles this event.
    }
    
    
    ////////////////////////////////////////////////////////////////////////////////
    // event handlers for state TEST1_DO_EVENT_TESTING
    ////////////////////////////////////////////////////////////////////////////////
    
    private void TEST1_DO_EVENT_TESTING_enter()
    {
        this.stateId = StateId.TEST1_DO_EVENT_TESTING;
        
        // TEST1_DO_EVENT_TESTING behavior
        // uml: enter / { trace("Enter TEST1_DO_EVENT_TESTING."); }
        {
            // Step 1: execute action `trace("Enter TEST1_DO_EVENT_TESTING.");`
            ____GilData_EchoStringVoid("MainClass.Trace(\"Enter TEST1_DO_EVENT_TESTING.\");");
        } // end of behavior for TEST1_DO_EVENT_TESTING
    }
    
    private void TEST1_DO_EVENT_TESTING_exit()
    {
        // TEST1_DO_EVENT_TESTING behavior
        // uml: exit / { trace("Exit TEST1_DO_EVENT_TESTING."); }
        {
            // Step 1: execute action `trace("Exit TEST1_DO_EVENT_TESTING.");`
            ____GilData_EchoStringVoid("MainClass.Trace(\"Exit TEST1_DO_EVENT_TESTING.\");");
        } // end of behavior for TEST1_DO_EVENT_TESTING
        
        this.stateId = StateId.ROOT;
    }
    
    
    ////////////////////////////////////////////////////////////////////////////////
    // event handlers for state TEST1_ROOT
    ////////////////////////////////////////////////////////////////////////////////
    
    private void TEST1_ROOT_enter()
    {
        this.stateId = StateId.TEST1_ROOT;
        
        // TEST1_ROOT behavior
        // uml: enter / { trace("Enter TEST1_ROOT."); }
        {
            // Step 1: execute action `trace("Enter TEST1_ROOT.");`
            ____GilData_EchoStringVoid("MainClass.Trace(\"Enter TEST1_ROOT.\");");
        } // end of behavior for TEST1_ROOT
    }
    
    private void TEST1_ROOT_exit()
    {
        // TEST1_ROOT behavior
        // uml: exit / { trace("Exit TEST1_ROOT."); }
        {
            // Step 1: execute action `trace("Exit TEST1_ROOT.");`
            ____GilData_EchoStringVoid("MainClass.Trace(\"Exit TEST1_ROOT.\");");
        } // end of behavior for TEST1_ROOT
        
        this.stateId = StateId.TEST1_DO_EVENT_TESTING;
    }
    
    private void TEST1_ROOT_do()
    {
        bool consume_event = false;
        
        // TEST1_ROOT behavior
        // uml: do [trace_guard("State TEST1_ROOT: check behavior `do`.", true)]
        if (____GilData_VarArgsToBool(____GilData_EchoStringBool("trace_guard(\"State TEST1_ROOT: check behavior `do`.\", true)")))
        {
            // `do` events are not normally consumed.
            // Step 1: execute action ``
        } // end of behavior for TEST1_ROOT
        
        // Check if event has been consumed before calling ancestor handler.
        if (!consume_event)
        {
            this.ROOT_do();
        }
    }
    
    
    ////////////////////////////////////////////////////////////////////////////////
    // event handlers for state TEST1_S1
    ////////////////////////////////////////////////////////////////////////////////
    
    private void TEST1_S1_enter()
    {
        this.stateId = StateId.TEST1_S1;
        
        // TEST1_S1 behavior
        // uml: enter / { trace("Enter TEST1_S1."); }
        {
            // Step 1: execute action `trace("Enter TEST1_S1.");`
            ____GilData_EchoStringVoid("MainClass.Trace(\"Enter TEST1_S1.\");");
        } // end of behavior for TEST1_S1
    }
    
    private void TEST1_S1_exit()
    {
        // TEST1_S1 behavior
        // uml: exit / { trace("Exit TEST1_S1."); }
        {
            // Step 1: execute action `trace("Exit TEST1_S1.");`
            ____GilData_EchoStringVoid("MainClass.Trace(\"Exit TEST1_S1.\");");
        } // end of behavior for TEST1_S1
        
        this.stateId = StateId.TEST1_ROOT;
    }
    
    
    ////////////////////////////////////////////////////////////////////////////////
    // event handlers for state TEST1_S1_1
    ////////////////////////////////////////////////////////////////////////////////
    
    private void TEST1_S1_1_enter()
    {
        this.stateId = StateId.TEST1_S1_1;
        
        // TEST1_S1_1 behavior
        // uml: enter / { trace("Enter TEST1_S1_1."); }
        {
            // Step 1: execute action `trace("Enter TEST1_S1_1.");`
            ____GilData_EchoStringVoid("MainClass.Trace(\"Enter TEST1_S1_1.\");");
        } // end of behavior for TEST1_S1_1
        
        // TEST1_S1_1 behavior
        // uml: enter [trace_guard("State TEST1_S1_1: check behavior `enter / { clear_output(); }`.", true)] / { clear_output(); }
        if (____GilData_VarArgsToBool(____GilData_EchoStringBool("trace_guard(\"State TEST1_S1_1: check behavior `enter / { clear_output(); }`.\", true)")))
        {
            // Step 1: execute action `clear_output();`
            ____GilData_EchoStringVoid("MainClass.Trace(\"IGNORE_OUTPUT_BEFORE_THIS\");");
        } // end of behavior for TEST1_S1_1
    }
    
    private void TEST1_S1_1_exit()
    {
        // TEST1_S1_1 behavior
        // uml: exit / { trace("Exit TEST1_S1_1."); }
        {
            // Step 1: execute action `trace("Exit TEST1_S1_1.");`
            ____GilData_EchoStringVoid("MainClass.Trace(\"Exit TEST1_S1_1.\");");
        } // end of behavior for TEST1_S1_1
        
        this.stateId = StateId.TEST1_S1;
    }
    
    private void TEST1_S1_1_do()
    {
        bool consume_event = false;
        
        // TEST1_S1_1 behavior
        // uml: do [trace_guard("State TEST1_S1_1: check behavior `do`.", true)]
        if (____GilData_VarArgsToBool(____GilData_EchoStringBool("trace_guard(\"State TEST1_S1_1: check behavior `do`.\", true)")))
        {
            // `do` events are not normally consumed.
            // Step 1: execute action ``
        } // end of behavior for TEST1_S1_1
        
        // Check if event has been consumed before calling ancestor handler.
        if (!consume_event)
        {
            this.TEST1_ROOT_do();
        }
    }
    
    private void TEST1_S1_1_ev1()
    {
        // TEST1_S1_1 behavior
        // uml: EV1 [trace_guard("State TEST1_S1_1: check behavior `EV1 TransitionTo(TEST1_S2)`.", true)] / { trace("Transition action `` for TEST1_S1_1 to TEST1_S2."); } TransitionTo(TEST1_S2)
        if (____GilData_VarArgsToBool(____GilData_EchoStringBool("trace_guard(\"State TEST1_S1_1: check behavior `EV1 TransitionTo(TEST1_S2)`.\", true)")))
        {
            // Step 1: Exit states until we reach `TEST1_ROOT` state (Least Common Ancestor for transition).
            this.ExitUpToStateHandler(StateId.TEST1_ROOT);
            
            // Step 2: Transition action: `trace("Transition action `` for TEST1_S1_1 to TEST1_S2.");`.
            ____GilData_EchoStringVoid("MainClass.Trace(\"Transition action `` for TEST1_S1_1 to TEST1_S2.\");");
            
            // Step 3: Enter/move towards transition target `TEST1_S2`.
            this.TEST1_S2_enter();
            
            // Step 4: complete transition. Ends event dispatch. No other behaviors are checked.
            return;
        } // end of behavior for TEST1_S1_1
        
        // No ancestor handles this event.
    }
    
    
    ////////////////////////////////////////////////////////////////////////////////
    // event handlers for state TEST1_S2
    ////////////////////////////////////////////////////////////////////////////////
    
    private void TEST1_S2_enter()
    {
        this.stateId = StateId.TEST1_S2;
        
        // TEST1_S2 behavior
        // uml: enter / { trace("Enter TEST1_S2."); }
        {
            // Step 1: execute action `trace("Enter TEST1_S2.");`
            ____GilData_EchoStringVoid("MainClass.Trace(\"Enter TEST1_S2.\");");
        } // end of behavior for TEST1_S2
    }
    
    private void TEST1_S2_exit()
    {
        // TEST1_S2 behavior
        // uml: exit / { trace("Exit TEST1_S2."); }
        {
            // Step 1: execute action `trace("Exit TEST1_S2.");`
            ____GilData_EchoStringVoid("MainClass.Trace(\"Exit TEST1_S2.\");");
        } // end of behavior for TEST1_S2
        
        this.stateId = StateId.TEST1_ROOT;
    }
    
    private void TEST1_S2_do()
    {
        bool consume_event = false;
        
        // TEST1_S2 behavior
        // uml: do [trace_guard("State TEST1_S2: check behavior `do / { consume_event = true; }`.", true)] / { consume_event = true; }
        if (____GilData_VarArgsToBool(____GilData_EchoStringBool("trace_guard(\"State TEST1_S2: check behavior `do / { consume_event = true; }`.\", true)")))
        {
            // `do` events are not normally consumed.
            // Step 1: execute action `consume_event = true;`
            ____GilData_EchoStringVoid("consume_event = true;");
        } // end of behavior for TEST1_S2
        
        // Check if event has been consumed before calling ancestor handler.
        if (!consume_event)
        {
            this.TEST1_ROOT_do();
        }
    }
    
    
    ////////////////////////////////////////////////////////////////////////////////
    // event handlers for state TEST10_CHOICE_POINT
    ////////////////////////////////////////////////////////////////////////////////
    
    private void TEST10_CHOICE_POINT_enter()
    {
        this.stateId = StateId.TEST10_CHOICE_POINT;
        
        // TEST10_CHOICE_POINT behavior
        // uml: enter / { trace("Enter TEST10_CHOICE_POINT."); }
        {
            // Step 1: execute action `trace("Enter TEST10_CHOICE_POINT.");`
            ____GilData_EchoStringVoid("MainClass.Trace(\"Enter TEST10_CHOICE_POINT.\");");
        } // end of behavior for TEST10_CHOICE_POINT
    }
    
    private void TEST10_CHOICE_POINT_exit()
    {
        // TEST10_CHOICE_POINT behavior
        // uml: exit / { trace("Exit TEST10_CHOICE_POINT."); }
        {
            // Step 1: execute action `trace("Exit TEST10_CHOICE_POINT.");`
            ____GilData_EchoStringVoid("MainClass.Trace(\"Exit TEST10_CHOICE_POINT.\");");
        } // end of behavior for TEST10_CHOICE_POINT
        
        this.stateId = StateId.ROOT;
    }
    
    
    ////////////////////////////////////////////////////////////////////////////////
    // event handlers for state TEST10_A
    ////////////////////////////////////////////////////////////////////////////////
    
    private void TEST10_A_enter()
    {
        this.stateId = StateId.TEST10_A;
        
        // TEST10_A behavior
        // uml: enter / { trace("Enter TEST10_A."); }
        {
            // Step 1: execute action `trace("Enter TEST10_A.");`
            ____GilData_EchoStringVoid("MainClass.Trace(\"Enter TEST10_A.\");");
        } // end of behavior for TEST10_A
    }
    
    private void TEST10_A_exit()
    {
        // TEST10_A behavior
        // uml: exit / { trace("Exit TEST10_A."); }
        {
            // Step 1: execute action `trace("Exit TEST10_A.");`
            ____GilData_EchoStringVoid("MainClass.Trace(\"Exit TEST10_A.\");");
        } // end of behavior for TEST10_A
        
        this.stateId = StateId.TEST10_CHOICE_POINT;
    }
    
    private void TEST10_A_ChoicePoint__transition()
    {
        // TEST10_A.<ChoicePoint>() behavior
        // uml: [count == 1] / { trace("Transition action `` for TEST10_A.<ChoicePoint>() to TEST10_A.<ChoicePoint>()."); } TransitionTo(TEST10_A.<ChoicePoint>())
        if (____GilData_VarArgsToBool(____GilData_EchoStringBool("this.vars.count == 1")))
        {
            // Step 1: Exit states until we reach `TEST10_A` state (Least Common Ancestor for transition). Already at LCA, no exiting required.
            
            // Step 2: Transition action: `trace("Transition action `` for TEST10_A.<ChoicePoint>() to TEST10_A.<ChoicePoint>().");`.
            ____GilData_EchoStringVoid("MainClass.Trace(\"Transition action `` for TEST10_A.<ChoicePoint>() to TEST10_A.<ChoicePoint>().\");");
            
            // Step 3: Enter/move towards transition target `TEST10_A.<ChoicePoint>()`.
            // TEST10_A.<ChoicePoint>() is a pseudo state and cannot have an `enter` trigger.
            
            // Finish transition by calling pseudo state transition function.
            this.TEST10_A_ChoicePoint__transition_kid_index3();
            return; // event processing immediately stops when a transition finishes. No other behaviors for this state are checked.
        } // end of behavior for TEST10_A.<ChoicePoint>()
        
        // TEST10_A.<ChoicePoint>() behavior
        // uml: else / { trace("Transition action `` for TEST10_A.<ChoicePoint>() to TEST10_A.<ChoicePoint>()."); } TransitionTo(TEST10_A.<ChoicePoint>())
        {
            // Step 1: Exit states until we reach `TEST10_A` state (Least Common Ancestor for transition). Already at LCA, no exiting required.
            
            // Step 2: Transition action: `trace("Transition action `` for TEST10_A.<ChoicePoint>() to TEST10_A.<ChoicePoint>().");`.
            ____GilData_EchoStringVoid("MainClass.Trace(\"Transition action `` for TEST10_A.<ChoicePoint>() to TEST10_A.<ChoicePoint>().\");");
            
            // Step 3: Enter/move towards transition target `TEST10_A.<ChoicePoint>()`.
            // TEST10_A.<ChoicePoint>() is a pseudo state and cannot have an `enter` trigger.
            
            // Finish transition by calling pseudo state transition function.
            this.TEST10_A_ChoicePoint__transition_kid_index3();
            return; // event processing immediately stops when a transition finishes. No other behaviors for this state are checked.
        } // end of behavior for TEST10_A.<ChoicePoint>()
    }
    
    private void TEST10_A_ChoicePoint__transition_kid_index3()
    {
        // TEST10_A.<ChoicePoint>() behavior
        // uml: [count == 1] / { trace("Transition action `` for TEST10_A.<ChoicePoint>() to TEST10_A.<ChoicePoint>(a)."); } TransitionTo(TEST10_A.<ChoicePoint>(a))
        if (____GilData_VarArgsToBool(____GilData_EchoStringBool("this.vars.count == 1")))
        {
            // Step 1: Exit states until we reach `TEST10_A` state (Least Common Ancestor for transition). Already at LCA, no exiting required.
            
            // Step 2: Transition action: `trace("Transition action `` for TEST10_A.<ChoicePoint>() to TEST10_A.<ChoicePoint>(a).");`.
            ____GilData_EchoStringVoid("MainClass.Trace(\"Transition action `` for TEST10_A.<ChoicePoint>() to TEST10_A.<ChoicePoint>(a).\");");
            
            // Step 3: Enter/move towards transition target `TEST10_A.<ChoicePoint>(a)`.
            // TEST10_A.<ChoicePoint>(a) is a pseudo state and cannot have an `enter` trigger.
            
            // Finish transition by calling pseudo state transition function.
            this.TEST10_A_ChoicePoint_a__transition();
            return; // event processing immediately stops when a transition finishes. No other behaviors for this state are checked.
        } // end of behavior for TEST10_A.<ChoicePoint>()
        
        // TEST10_A.<ChoicePoint>() behavior
        // uml: else / { trace("Transition action `` for TEST10_A.<ChoicePoint>() to TEST10_A.<ChoicePoint>(a)."); } TransitionTo(TEST10_A.<ChoicePoint>(a))
        {
            // Step 1: Exit states until we reach `TEST10_A` state (Least Common Ancestor for transition). Already at LCA, no exiting required.
            
            // Step 2: Transition action: `trace("Transition action `` for TEST10_A.<ChoicePoint>() to TEST10_A.<ChoicePoint>(a).");`.
            ____GilData_EchoStringVoid("MainClass.Trace(\"Transition action `` for TEST10_A.<ChoicePoint>() to TEST10_A.<ChoicePoint>(a).\");");
            
            // Step 3: Enter/move towards transition target `TEST10_A.<ChoicePoint>(a)`.
            // TEST10_A.<ChoicePoint>(a) is a pseudo state and cannot have an `enter` trigger.
            
            // Finish transition by calling pseudo state transition function.
            this.TEST10_A_ChoicePoint_a__transition();
            return; // event processing immediately stops when a transition finishes. No other behaviors for this state are checked.
        } // end of behavior for TEST10_A.<ChoicePoint>()
    }
    
    private void TEST10_A_ChoicePoint_a__transition()
    {
        // TEST10_A.<ChoicePoint>(a) behavior
        // uml: [count == 1] / { trace("Transition action `` for TEST10_A.<ChoicePoint>(a) to TEST10_A.<ChoicePoint>(a)."); } TransitionTo(TEST10_A.<ChoicePoint>(a))
        if (____GilData_VarArgsToBool(____GilData_EchoStringBool("this.vars.count == 1")))
        {
            // Step 1: Exit states until we reach `TEST10_A` state (Least Common Ancestor for transition). Already at LCA, no exiting required.
            
            // Step 2: Transition action: `trace("Transition action `` for TEST10_A.<ChoicePoint>(a) to TEST10_A.<ChoicePoint>(a).");`.
            ____GilData_EchoStringVoid("MainClass.Trace(\"Transition action `` for TEST10_A.<ChoicePoint>(a) to TEST10_A.<ChoicePoint>(a).\");");
            
            // Step 3: Enter/move towards transition target `TEST10_A.<ChoicePoint>(a)`.
            // TEST10_A.<ChoicePoint>(a) is a pseudo state and cannot have an `enter` trigger.
            
            // Finish transition by calling pseudo state transition function.
            this.TEST10_A_ChoicePoint_a__transition_kid_index5();
            return; // event processing immediately stops when a transition finishes. No other behaviors for this state are checked.
        } // end of behavior for TEST10_A.<ChoicePoint>(a)
        
        // TEST10_A.<ChoicePoint>(a) behavior
        // uml: else / { trace("Transition action `` for TEST10_A.<ChoicePoint>(a) to TEST10_A.<ChoicePoint>(a)."); } TransitionTo(TEST10_A.<ChoicePoint>(a))
        {
            // Step 1: Exit states until we reach `TEST10_A` state (Least Common Ancestor for transition). Already at LCA, no exiting required.
            
            // Step 2: Transition action: `trace("Transition action `` for TEST10_A.<ChoicePoint>(a) to TEST10_A.<ChoicePoint>(a).");`.
            ____GilData_EchoStringVoid("MainClass.Trace(\"Transition action `` for TEST10_A.<ChoicePoint>(a) to TEST10_A.<ChoicePoint>(a).\");");
            
            // Step 3: Enter/move towards transition target `TEST10_A.<ChoicePoint>(a)`.
            // TEST10_A.<ChoicePoint>(a) is a pseudo state and cannot have an `enter` trigger.
            
            // Finish transition by calling pseudo state transition function.
            this.TEST10_A_ChoicePoint_a__transition_kid_index5();
            return; // event processing immediately stops when a transition finishes. No other behaviors for this state are checked.
        } // end of behavior for TEST10_A.<ChoicePoint>(a)
    }
    
    private void TEST10_A_ChoicePoint_a__transition_kid_index5()
    {
        // TEST10_A.<ChoicePoint>(a) behavior
        // uml: / { trace("Transition action `` for TEST10_A.<ChoicePoint>(a) to TEST10_A_1."); } TransitionTo(TEST10_A_1)
        {
            // Step 1: Exit states until we reach `TEST10_A` state (Least Common Ancestor for transition). Already at LCA, no exiting required.
            
            // Step 2: Transition action: `trace("Transition action `` for TEST10_A.<ChoicePoint>(a) to TEST10_A_1.");`.
            ____GilData_EchoStringVoid("MainClass.Trace(\"Transition action `` for TEST10_A.<ChoicePoint>(a) to TEST10_A_1.\");");
            
            // Step 3: Enter/move towards transition target `TEST10_A_1`.
            this.TEST10_A_1_enter();
            
            // Step 4: complete transition. Ends event dispatch. No other behaviors are checked.
            return;
        } // end of behavior for TEST10_A.<ChoicePoint>(a)
    }
    
    
    ////////////////////////////////////////////////////////////////////////////////
    // event handlers for state TEST10_A_1
    ////////////////////////////////////////////////////////////////////////////////
    
    private void TEST10_A_1_enter()
    {
        this.stateId = StateId.TEST10_A_1;
        
        // TEST10_A_1 behavior
        // uml: enter / { trace("Enter TEST10_A_1."); }
        {
            // Step 1: execute action `trace("Enter TEST10_A_1.");`
            ____GilData_EchoStringVoid("MainClass.Trace(\"Enter TEST10_A_1.\");");
        } // end of behavior for TEST10_A_1
    }
    
    private void TEST10_A_1_exit()
    {
        // TEST10_A_1 behavior
        // uml: exit / { trace("Exit TEST10_A_1."); }
        {
            // Step 1: execute action `trace("Exit TEST10_A_1.");`
            ____GilData_EchoStringVoid("MainClass.Trace(\"Exit TEST10_A_1.\");");
        } // end of behavior for TEST10_A_1
        
        this.stateId = StateId.TEST10_A;
    }
    
    
    ////////////////////////////////////////////////////////////////////////////////
    // event handlers for state TEST10_ROOT
    ////////////////////////////////////////////////////////////////////////////////
    
    private void TEST10_ROOT_enter()
    {
        this.stateId = StateId.TEST10_ROOT;
        
        // TEST10_ROOT behavior
        // uml: enter / { trace("Enter TEST10_ROOT."); }
        {
            // Step 1: execute action `trace("Enter TEST10_ROOT.");`
            ____GilData_EchoStringVoid("MainClass.Trace(\"Enter TEST10_ROOT.\");");
        } // end of behavior for TEST10_ROOT
    }
    
    private void TEST10_ROOT_exit()
    {
        // TEST10_ROOT behavior
        // uml: exit / { trace("Exit TEST10_ROOT."); }
        {
            // Step 1: execute action `trace("Exit TEST10_ROOT.");`
            ____GilData_EchoStringVoid("MainClass.Trace(\"Exit TEST10_ROOT.\");");
        } // end of behavior for TEST10_ROOT
        
        this.stateId = StateId.TEST10_CHOICE_POINT;
    }
    
    private void TEST10_ROOT_ev5()
    {
        // TEST10_ROOT behavior
        // uml: EV5 [trace_guard("State TEST10_ROOT: check behavior `EV5 / { count++; }`.", true)] / { count++; }
        if (____GilData_VarArgsToBool(____GilData_EchoStringBool("trace_guard(\"State TEST10_ROOT: check behavior `EV5 / { count++; }`.\", true)")))
        {
            // Step 1: execute action `count++;`
            ____GilData_EchoStringVoid("this.vars.count++;");
        } // end of behavior for TEST10_ROOT
        
        // No ancestor handles this event.
    }
    
    
    ////////////////////////////////////////////////////////////////////////////////
    // event handlers for state TEST10_G
    ////////////////////////////////////////////////////////////////////////////////
    
    private void TEST10_G_enter()
    {
        this.stateId = StateId.TEST10_G;
        
        // TEST10_G behavior
        // uml: enter / { trace("Enter TEST10_G."); }
        {
            // Step 1: execute action `trace("Enter TEST10_G.");`
            ____GilData_EchoStringVoid("MainClass.Trace(\"Enter TEST10_G.\");");
        } // end of behavior for TEST10_G
    }
    
    private void TEST10_G_exit()
    {
        // TEST10_G behavior
        // uml: exit / { trace("Exit TEST10_G."); }
        {
            // Step 1: execute action `trace("Exit TEST10_G.");`
            ____GilData_EchoStringVoid("MainClass.Trace(\"Exit TEST10_G.\");");
        } // end of behavior for TEST10_G
        
        this.stateId = StateId.TEST10_ROOT;
    }
    
    private void TEST10_G_ChoicePoint__transition()
    {
        // TEST10_G.<ChoicePoint>() behavior
        // uml: / { trace("Transition action `` for TEST10_G.<ChoicePoint>() to TEST10_G.<ChoicePoint>(1)."); } TransitionTo(TEST10_G.<ChoicePoint>(1))
        {
            // Step 1: Exit states until we reach `TEST10_G` state (Least Common Ancestor for transition). Already at LCA, no exiting required.
            
            // Step 2: Transition action: `trace("Transition action `` for TEST10_G.<ChoicePoint>() to TEST10_G.<ChoicePoint>(1).");`.
            ____GilData_EchoStringVoid("MainClass.Trace(\"Transition action `` for TEST10_G.<ChoicePoint>() to TEST10_G.<ChoicePoint>(1).\");");
            
            // Step 3: Enter/move towards transition target `TEST10_G.<ChoicePoint>(1)`.
            // TEST10_G.<ChoicePoint>(1) is a pseudo state and cannot have an `enter` trigger.
            
            // TEST10_G.<ChoicePoint>(1) behavior
            // uml: 1. [count <= 0] / { trace("Transition action `` for TEST10_G.<ChoicePoint>(1) to TEST10_G_S0."); } TransitionTo(TEST10_G_S0)
            if (____GilData_VarArgsToBool(____GilData_EchoStringBool("this.vars.count <= 0")))
            {
                // Step 1: Exit states until we reach `TEST10_G` state (Least Common Ancestor for transition). Already at LCA, no exiting required.
                
                // Step 2: Transition action: `trace("Transition action `` for TEST10_G.<ChoicePoint>(1) to TEST10_G_S0.");`.
                ____GilData_EchoStringVoid("MainClass.Trace(\"Transition action `` for TEST10_G.<ChoicePoint>(1) to TEST10_G_S0.\");");
                
                // Step 3: Enter/move towards transition target `TEST10_G_S0`.
                this.TEST10_G_S0_enter();
                
                // Step 4: complete transition. Ends event dispatch. No other behaviors are checked.
                return;
            } // end of behavior for TEST10_G.<ChoicePoint>(1)
            
            // TEST10_G.<ChoicePoint>(1) behavior
            // uml: [count <= 2] / { trace("Transition action `` for TEST10_G.<ChoicePoint>(1) to TEST10_G.<ChoicePoint>(lower)."); } TransitionTo(TEST10_G.<ChoicePoint>(lower))
            if (____GilData_VarArgsToBool(____GilData_EchoStringBool("this.vars.count <= 2")))
            {
                // Step 1: Exit states until we reach `TEST10_G` state (Least Common Ancestor for transition). Already at LCA, no exiting required.
                
                // Step 2: Transition action: `trace("Transition action `` for TEST10_G.<ChoicePoint>(1) to TEST10_G.<ChoicePoint>(lower).");`.
                ____GilData_EchoStringVoid("MainClass.Trace(\"Transition action `` for TEST10_G.<ChoicePoint>(1) to TEST10_G.<ChoicePoint>(lower).\");");
                
                // Step 3: Enter/move towards transition target `TEST10_G.<ChoicePoint>(lower)`.
                // TEST10_G.<ChoicePoint>(lower) is a pseudo state and cannot have an `enter` trigger.
                
                // TEST10_G.<ChoicePoint>(lower) behavior
                // uml: [count <=1] / { trace("Transition action `` for TEST10_G.<ChoicePoint>(lower) to TEST10_G_S1."); } TransitionTo(TEST10_G_S1)
                if (____GilData_VarArgsToBool(____GilData_EchoStringBool("this.vars.count <=1")))
                {
                    // Step 1: Exit states until we reach `TEST10_G` state (Least Common Ancestor for transition). Already at LCA, no exiting required.
                    
                    // Step 2: Transition action: `trace("Transition action `` for TEST10_G.<ChoicePoint>(lower) to TEST10_G_S1.");`.
                    ____GilData_EchoStringVoid("MainClass.Trace(\"Transition action `` for TEST10_G.<ChoicePoint>(lower) to TEST10_G_S1.\");");
                    
                    // Step 3: Enter/move towards transition target `TEST10_G_S1`.
                    this.TEST10_G_S1_enter();
                    
                    // Step 4: complete transition. Ends event dispatch. No other behaviors are checked.
                    return;
                } // end of behavior for TEST10_G.<ChoicePoint>(lower)
                
                // TEST10_G.<ChoicePoint>(lower) behavior
                // uml: else / { trace("Transition action `` for TEST10_G.<ChoicePoint>(lower) to TEST10_G_S2."); } TransitionTo(TEST10_G_S2)
                {
                    // Step 1: Exit states until we reach `TEST10_G` state (Least Common Ancestor for transition). Already at LCA, no exiting required.
                    
                    // Step 2: Transition action: `trace("Transition action `` for TEST10_G.<ChoicePoint>(lower) to TEST10_G_S2.");`.
                    ____GilData_EchoStringVoid("MainClass.Trace(\"Transition action `` for TEST10_G.<ChoicePoint>(lower) to TEST10_G_S2.\");");
                    
                    // Step 3: Enter/move towards transition target `TEST10_G_S2`.
                    this.TEST10_G_S2_enter();
                    
                    // Step 4: complete transition. Ends event dispatch. No other behaviors are checked.
                    return;
                } // end of behavior for TEST10_G.<ChoicePoint>(lower)
            } // end of behavior for TEST10_G.<ChoicePoint>(1)
            
            // TEST10_G.<ChoicePoint>(1) behavior
            // uml: else / { trace("Transition action `` for TEST10_G.<ChoicePoint>(1) to TEST10_G.<ChoicePoint>(upper)."); } TransitionTo(TEST10_G.<ChoicePoint>(upper))
            {
                // Step 1: Exit states until we reach `TEST10_G` state (Least Common Ancestor for transition). Already at LCA, no exiting required.
                
                // Step 2: Transition action: `trace("Transition action `` for TEST10_G.<ChoicePoint>(1) to TEST10_G.<ChoicePoint>(upper).");`.
                ____GilData_EchoStringVoid("MainClass.Trace(\"Transition action `` for TEST10_G.<ChoicePoint>(1) to TEST10_G.<ChoicePoint>(upper).\");");
                
                // Step 3: Enter/move towards transition target `TEST10_G.<ChoicePoint>(upper)`.
                // TEST10_G.<ChoicePoint>(upper) is a pseudo state and cannot have an `enter` trigger.
                
                // TEST10_G.<ChoicePoint>(upper) behavior
                // uml: [count <= 3] / { trace("Transition action `` for TEST10_G.<ChoicePoint>(upper) to TEST10_G_S3."); } TransitionTo(TEST10_G_S3)
                if (____GilData_VarArgsToBool(____GilData_EchoStringBool("this.vars.count <= 3")))
                {
                    // Step 1: Exit states until we reach `TEST10_G` state (Least Common Ancestor for transition). Already at LCA, no exiting required.
                    
                    // Step 2: Transition action: `trace("Transition action `` for TEST10_G.<ChoicePoint>(upper) to TEST10_G_S3.");`.
                    ____GilData_EchoStringVoid("MainClass.Trace(\"Transition action `` for TEST10_G.<ChoicePoint>(upper) to TEST10_G_S3.\");");
                    
                    // Step 3: Enter/move towards transition target `TEST10_G_S3`.
                    this.TEST10_G_S3_enter();
                    
                    // Step 4: complete transition. Ends event dispatch. No other behaviors are checked.
                    return;
                } // end of behavior for TEST10_G.<ChoicePoint>(upper)
                
                // TEST10_G.<ChoicePoint>(upper) behavior
                // uml: else / { trace("Transition action `` for TEST10_G.<ChoicePoint>(upper) to TEST10_S4."); } TransitionTo(TEST10_S4)
                {
                    // Step 1: Exit states until we reach `TEST10_ROOT` state (Least Common Ancestor for transition).
                    this.ExitUpToStateHandler(StateId.TEST10_ROOT);
                    
                    // Step 2: Transition action: `trace("Transition action `` for TEST10_G.<ChoicePoint>(upper) to TEST10_S4.");`.
                    ____GilData_EchoStringVoid("MainClass.Trace(\"Transition action `` for TEST10_G.<ChoicePoint>(upper) to TEST10_S4.\");");
                    
                    // Step 3: Enter/move towards transition target `TEST10_S4`.
                    this.TEST10_S4_enter();
                    
                    // Step 4: complete transition. Ends event dispatch. No other behaviors are checked.
                    return;
                } // end of behavior for TEST10_G.<ChoicePoint>(upper)
            } // end of behavior for TEST10_G.<ChoicePoint>(1)
        } // end of behavior for TEST10_G.<ChoicePoint>()
    }
    
    
    ////////////////////////////////////////////////////////////////////////////////
    // event handlers for state TEST10_G_S0
    ////////////////////////////////////////////////////////////////////////////////
    
    private void TEST10_G_S0_enter()
    {
        this.stateId = StateId.TEST10_G_S0;
        
        // TEST10_G_S0 behavior
        // uml: enter / { trace("Enter TEST10_G_S0."); }
        {
            // Step 1: execute action `trace("Enter TEST10_G_S0.");`
            ____GilData_EchoStringVoid("MainClass.Trace(\"Enter TEST10_G_S0.\");");
        } // end of behavior for TEST10_G_S0
    }
    
    private void TEST10_G_S0_exit()
    {
        // TEST10_G_S0 behavior
        // uml: exit / { trace("Exit TEST10_G_S0."); }
        {
            // Step 1: execute action `trace("Exit TEST10_G_S0.");`
            ____GilData_EchoStringVoid("MainClass.Trace(\"Exit TEST10_G_S0.\");");
        } // end of behavior for TEST10_G_S0
        
        this.stateId = StateId.TEST10_G;
    }
    
    
    ////////////////////////////////////////////////////////////////////////////////
    // event handlers for state TEST10_G_S1
    ////////////////////////////////////////////////////////////////////////////////
    
    private void TEST10_G_S1_enter()
    {
        this.stateId = StateId.TEST10_G_S1;
        
        // TEST10_G_S1 behavior
        // uml: enter / { trace("Enter TEST10_G_S1."); }
        {
            // Step 1: execute action `trace("Enter TEST10_G_S1.");`
            ____GilData_EchoStringVoid("MainClass.Trace(\"Enter TEST10_G_S1.\");");
        } // end of behavior for TEST10_G_S1
    }
    
    private void TEST10_G_S1_exit()
    {
        // TEST10_G_S1 behavior
        // uml: exit / { trace("Exit TEST10_G_S1."); }
        {
            // Step 1: execute action `trace("Exit TEST10_G_S1.");`
            ____GilData_EchoStringVoid("MainClass.Trace(\"Exit TEST10_G_S1.\");");
        } // end of behavior for TEST10_G_S1
        
        this.stateId = StateId.TEST10_G;
    }
    
    
    ////////////////////////////////////////////////////////////////////////////////
    // event handlers for state TEST10_G_S2
    ////////////////////////////////////////////////////////////////////////////////
    
    private void TEST10_G_S2_enter()
    {
        this.stateId = StateId.TEST10_G_S2;
        
        // TEST10_G_S2 behavior
        // uml: enter / { trace("Enter TEST10_G_S2."); }
        {
            // Step 1: execute action `trace("Enter TEST10_G_S2.");`
            ____GilData_EchoStringVoid("MainClass.Trace(\"Enter TEST10_G_S2.\");");
        } // end of behavior for TEST10_G_S2
    }
    
    private void TEST10_G_S2_exit()
    {
        // TEST10_G_S2 behavior
        // uml: exit / { trace("Exit TEST10_G_S2."); }
        {
            // Step 1: execute action `trace("Exit TEST10_G_S2.");`
            ____GilData_EchoStringVoid("MainClass.Trace(\"Exit TEST10_G_S2.\");");
        } // end of behavior for TEST10_G_S2
        
        this.stateId = StateId.TEST10_G;
    }
    
    
    ////////////////////////////////////////////////////////////////////////////////
    // event handlers for state TEST10_G_S3
    ////////////////////////////////////////////////////////////////////////////////
    
    private void TEST10_G_S3_enter()
    {
        this.stateId = StateId.TEST10_G_S3;
        
        // TEST10_G_S3 behavior
        // uml: enter / { trace("Enter TEST10_G_S3."); }
        {
            // Step 1: execute action `trace("Enter TEST10_G_S3.");`
            ____GilData_EchoStringVoid("MainClass.Trace(\"Enter TEST10_G_S3.\");");
        } // end of behavior for TEST10_G_S3
    }
    
    private void TEST10_G_S3_exit()
    {
        // TEST10_G_S3 behavior
        // uml: exit / { trace("Exit TEST10_G_S3."); }
        {
            // Step 1: execute action `trace("Exit TEST10_G_S3.");`
            ____GilData_EchoStringVoid("MainClass.Trace(\"Exit TEST10_G_S3.\");");
        } // end of behavior for TEST10_G_S3
        
        this.stateId = StateId.TEST10_G;
    }
    
    
    ////////////////////////////////////////////////////////////////////////////////
    // event handlers for state TEST10_S1
    ////////////////////////////////////////////////////////////////////////////////
    
    private void TEST10_S1_enter()
    {
        this.stateId = StateId.TEST10_S1;
        
        // TEST10_S1 behavior
        // uml: enter / { trace("Enter TEST10_S1."); }
        {
            // Step 1: execute action `trace("Enter TEST10_S1.");`
            ____GilData_EchoStringVoid("MainClass.Trace(\"Enter TEST10_S1.\");");
        } // end of behavior for TEST10_S1
        
        // TEST10_S1 behavior
        // uml: enter [trace_guard("State TEST10_S1: check behavior `enter / { clear_output(); }`.", true)] / { clear_output(); }
        if (____GilData_VarArgsToBool(____GilData_EchoStringBool("trace_guard(\"State TEST10_S1: check behavior `enter / { clear_output(); }`.\", true)")))
        {
            // Step 1: execute action `clear_output();`
            ____GilData_EchoStringVoid("MainClass.Trace(\"IGNORE_OUTPUT_BEFORE_THIS\");");
        } // end of behavior for TEST10_S1
    }
    
    private void TEST10_S1_exit()
    {
        // TEST10_S1 behavior
        // uml: exit / { trace("Exit TEST10_S1."); }
        {
            // Step 1: execute action `trace("Exit TEST10_S1.");`
            ____GilData_EchoStringVoid("MainClass.Trace(\"Exit TEST10_S1.\");");
        } // end of behavior for TEST10_S1
        
        this.stateId = StateId.TEST10_ROOT;
    }
    
    private void TEST10_S1_ev1()
    {
        // TEST10_S1 behavior
        // uml: EV1 [trace_guard("State TEST10_S1: check behavior `EV1 TransitionTo(TEST10_G.<EntryPoint>(1))`.", true)] / { trace("Transition action `` for TEST10_S1 to TEST10_G.<EntryPoint>(1)."); } TransitionTo(TEST10_G.<EntryPoint>(1))
        if (____GilData_VarArgsToBool(____GilData_EchoStringBool("trace_guard(\"State TEST10_S1: check behavior `EV1 TransitionTo(TEST10_G.<EntryPoint>(1))`.\", true)")))
        {
            // Step 1: Exit states until we reach `TEST10_ROOT` state (Least Common Ancestor for transition).
            this.TEST10_S1_exit();
            
            // Step 2: Transition action: `trace("Transition action `` for TEST10_S1 to TEST10_G.<EntryPoint>(1).");`.
            ____GilData_EchoStringVoid("MainClass.Trace(\"Transition action `` for TEST10_S1 to TEST10_G.<EntryPoint>(1).\");");
            
            // Step 3: Enter/move towards transition target `TEST10_G.<EntryPoint>(1)`.
            this.TEST10_G_enter();
            // TEST10_G.<EntryPoint>(1) is a pseudo state and cannot have an `enter` trigger.
            
            // TEST10_G.<EntryPoint>(1) behavior
            // uml: / { trace("Transition action `` for TEST10_G.<EntryPoint>(1) to TEST10_G.<ChoicePoint>()."); } TransitionTo(TEST10_G.<ChoicePoint>())
            {
                // Step 1: Exit states until we reach `TEST10_G` state (Least Common Ancestor for transition). Already at LCA, no exiting required.
                
                // Step 2: Transition action: `trace("Transition action `` for TEST10_G.<EntryPoint>(1) to TEST10_G.<ChoicePoint>().");`.
                ____GilData_EchoStringVoid("MainClass.Trace(\"Transition action `` for TEST10_G.<EntryPoint>(1) to TEST10_G.<ChoicePoint>().\");");
                
                // Step 3: Enter/move towards transition target `TEST10_G.<ChoicePoint>()`.
                // TEST10_G.<ChoicePoint>() is a pseudo state and cannot have an `enter` trigger.
                
                // Finish transition by calling pseudo state transition function.
                this.TEST10_G_ChoicePoint__transition();
                return; // event processing immediately stops when a transition finishes. No other behaviors for this state are checked.
            } // end of behavior for TEST10_G.<EntryPoint>(1)
        } // end of behavior for TEST10_S1
        
        // No ancestor handles this event.
    }
    
    private void TEST10_S1_ev10()
    {
        // TEST10_S1 behavior
        // uml: EV10 [trace_guard("State TEST10_S1: check behavior `EV10 TransitionTo(TEST10_A)`.", true)] / { trace("Transition action `` for TEST10_S1 to TEST10_A."); } TransitionTo(TEST10_A)
        if (____GilData_VarArgsToBool(____GilData_EchoStringBool("trace_guard(\"State TEST10_S1: check behavior `EV10 TransitionTo(TEST10_A)`.\", true)")))
        {
            // Step 1: Exit states until we reach `TEST10_CHOICE_POINT` state (Least Common Ancestor for transition).
            this.ExitUpToStateHandler(StateId.TEST10_CHOICE_POINT);
            
            // Step 2: Transition action: `trace("Transition action `` for TEST10_S1 to TEST10_A.");`.
            ____GilData_EchoStringVoid("MainClass.Trace(\"Transition action `` for TEST10_S1 to TEST10_A.\");");
            
            // Step 3: Enter/move towards transition target `TEST10_A`.
            this.TEST10_A_enter();
            
            // TEST10_A.<InitialState> behavior
            // uml: [count == 1] / { trace("Transition action `` for TEST10_A.<InitialState> to TEST10_A.<ChoicePoint>()."); } TransitionTo(TEST10_A.<ChoicePoint>())
            if (____GilData_VarArgsToBool(____GilData_EchoStringBool("this.vars.count == 1")))
            {
                // Step 1: Exit states until we reach `TEST10_A` state (Least Common Ancestor for transition). Already at LCA, no exiting required.
                
                // Step 2: Transition action: `trace("Transition action `` for TEST10_A.<InitialState> to TEST10_A.<ChoicePoint>().");`.
                ____GilData_EchoStringVoid("MainClass.Trace(\"Transition action `` for TEST10_A.<InitialState> to TEST10_A.<ChoicePoint>().\");");
                
                // Step 3: Enter/move towards transition target `TEST10_A.<ChoicePoint>()`.
                // TEST10_A.<ChoicePoint>() is a pseudo state and cannot have an `enter` trigger.
                
                // Finish transition by calling pseudo state transition function.
                this.TEST10_A_ChoicePoint__transition();
                return; // event processing immediately stops when a transition finishes. No other behaviors for this state are checked.
            } // end of behavior for TEST10_A.<InitialState>
            
            // TEST10_A.<InitialState> behavior
            // uml: [count == 0] / { trace("Transition action `count++;` for TEST10_A.<InitialState> to TEST10_A.<ChoicePoint>().");\ncount++; } TransitionTo(TEST10_A.<ChoicePoint>())
            if (____GilData_VarArgsToBool(____GilData_EchoStringBool("this.vars.count == 0")))
            {
                // Step 1: Exit states until we reach `TEST10_A` state (Least Common Ancestor for transition). Already at LCA, no exiting required.
                
                // Step 2: Transition action: `trace("Transition action `count++;` for TEST10_A.<InitialState> to TEST10_A.<ChoicePoint>().");\ncount++;`.
                ____GilData_EchoStringVoid("MainClass.Trace(\"Transition action `count++;` for TEST10_A.<InitialState> to TEST10_A.<ChoicePoint>().\");");
                ____GilData_EchoStringVoid("this.vars.count++;");
                
                // Step 3: Enter/move towards transition target `TEST10_A.<ChoicePoint>()`.
                // TEST10_A.<ChoicePoint>() is a pseudo state and cannot have an `enter` trigger.
                
                // Finish transition by calling pseudo state transition function.
                this.TEST10_A_ChoicePoint__transition();
                return; // event processing immediately stops when a transition finishes. No other behaviors for this state are checked.
            } // end of behavior for TEST10_A.<InitialState>
            
            // TEST10_A.<InitialState> behavior
            // uml: else / { trace("Transition action `` for TEST10_A.<InitialState> to TEST10_A.<ChoicePoint>()."); } TransitionTo(TEST10_A.<ChoicePoint>())
            {
                // Step 1: Exit states until we reach `TEST10_A` state (Least Common Ancestor for transition). Already at LCA, no exiting required.
                
                // Step 2: Transition action: `trace("Transition action `` for TEST10_A.<InitialState> to TEST10_A.<ChoicePoint>().");`.
                ____GilData_EchoStringVoid("MainClass.Trace(\"Transition action `` for TEST10_A.<InitialState> to TEST10_A.<ChoicePoint>().\");");
                
                // Step 3: Enter/move towards transition target `TEST10_A.<ChoicePoint>()`.
                // TEST10_A.<ChoicePoint>() is a pseudo state and cannot have an `enter` trigger.
                
                // Finish transition by calling pseudo state transition function.
                this.TEST10_A_ChoicePoint__transition_kid_index3();
                return; // event processing immediately stops when a transition finishes. No other behaviors for this state are checked.
            } // end of behavior for TEST10_A.<InitialState>
        } // end of behavior for TEST10_S1
        
        // No ancestor handles this event.
    }
    
    private void TEST10_S1_ev2()
    {
        // TEST10_S1 behavior
        // uml: EV2 [trace_guard("State TEST10_S1: check behavior `EV2 TransitionTo(TEST10_G.<ChoicePoint>())`.", true)] / { trace("Transition action `` for TEST10_S1 to TEST10_G.<ChoicePoint>()."); } TransitionTo(TEST10_G.<ChoicePoint>())
        if (____GilData_VarArgsToBool(____GilData_EchoStringBool("trace_guard(\"State TEST10_S1: check behavior `EV2 TransitionTo(TEST10_G.<ChoicePoint>())`.\", true)")))
        {
            // Step 1: Exit states until we reach `TEST10_ROOT` state (Least Common Ancestor for transition).
            this.TEST10_S1_exit();
            
            // Step 2: Transition action: `trace("Transition action `` for TEST10_S1 to TEST10_G.<ChoicePoint>().");`.
            ____GilData_EchoStringVoid("MainClass.Trace(\"Transition action `` for TEST10_S1 to TEST10_G.<ChoicePoint>().\");");
            
            // Step 3: Enter/move towards transition target `TEST10_G.<ChoicePoint>()`.
            this.TEST10_G_enter();
            // TEST10_G.<ChoicePoint>() is a pseudo state and cannot have an `enter` trigger.
            
            // Finish transition by calling pseudo state transition function.
            this.TEST10_G_ChoicePoint__transition();
            return; // event processing immediately stops when a transition finishes. No other behaviors for this state are checked.
        } // end of behavior for TEST10_S1
        
        // No ancestor handles this event.
    }
    
    private void TEST10_S1_ev3()
    {
        // TEST10_S1 behavior
        // uml: EV3 [trace_guard("State TEST10_S1: check behavior `EV3 TransitionTo(TEST10_G)`.", true)] / { trace("Transition action `` for TEST10_S1 to TEST10_G."); } TransitionTo(TEST10_G)
        if (____GilData_VarArgsToBool(____GilData_EchoStringBool("trace_guard(\"State TEST10_S1: check behavior `EV3 TransitionTo(TEST10_G)`.\", true)")))
        {
            // Step 1: Exit states until we reach `TEST10_ROOT` state (Least Common Ancestor for transition).
            this.TEST10_S1_exit();
            
            // Step 2: Transition action: `trace("Transition action `` for TEST10_S1 to TEST10_G.");`.
            ____GilData_EchoStringVoid("MainClass.Trace(\"Transition action `` for TEST10_S1 to TEST10_G.\");");
            
            // Step 3: Enter/move towards transition target `TEST10_G`.
            this.TEST10_G_enter();
            
            // TEST10_G.<InitialState> behavior
            // uml: / { trace("Transition action `` for TEST10_G.<InitialState> to TEST10_G.<ChoicePoint>()."); } TransitionTo(TEST10_G.<ChoicePoint>())
            {
                // Step 1: Exit states until we reach `TEST10_G` state (Least Common Ancestor for transition). Already at LCA, no exiting required.
                
                // Step 2: Transition action: `trace("Transition action `` for TEST10_G.<InitialState> to TEST10_G.<ChoicePoint>().");`.
                ____GilData_EchoStringVoid("MainClass.Trace(\"Transition action `` for TEST10_G.<InitialState> to TEST10_G.<ChoicePoint>().\");");
                
                // Step 3: Enter/move towards transition target `TEST10_G.<ChoicePoint>()`.
                // TEST10_G.<ChoicePoint>() is a pseudo state and cannot have an `enter` trigger.
                
                // Finish transition by calling pseudo state transition function.
                this.TEST10_G_ChoicePoint__transition();
                return; // event processing immediately stops when a transition finishes. No other behaviors for this state are checked.
            } // end of behavior for TEST10_G.<InitialState>
        } // end of behavior for TEST10_S1
        
        // No ancestor handles this event.
    }
    
    
    ////////////////////////////////////////////////////////////////////////////////
    // event handlers for state TEST10_S4
    ////////////////////////////////////////////////////////////////////////////////
    
    private void TEST10_S4_enter()
    {
        this.stateId = StateId.TEST10_S4;
        
        // TEST10_S4 behavior
        // uml: enter / { trace("Enter TEST10_S4."); }
        {
            // Step 1: execute action `trace("Enter TEST10_S4.");`
            ____GilData_EchoStringVoid("MainClass.Trace(\"Enter TEST10_S4.\");");
        } // end of behavior for TEST10_S4
    }
    
    private void TEST10_S4_exit()
    {
        // TEST10_S4 behavior
        // uml: exit / { trace("Exit TEST10_S4."); }
        {
            // Step 1: execute action `trace("Exit TEST10_S4.");`
            ____GilData_EchoStringVoid("MainClass.Trace(\"Exit TEST10_S4.\");");
        } // end of behavior for TEST10_S4
        
        this.stateId = StateId.TEST10_ROOT;
    }
    
    
    ////////////////////////////////////////////////////////////////////////////////
    // event handlers for state TEST2_REGULAR_EVENT_TESTING
    ////////////////////////////////////////////////////////////////////////////////
    
    private void TEST2_REGULAR_EVENT_TESTING_enter()
    {
        this.stateId = StateId.TEST2_REGULAR_EVENT_TESTING;
        
        // TEST2_REGULAR_EVENT_TESTING behavior
        // uml: enter / { trace("Enter TEST2_REGULAR_EVENT_TESTING."); }
        {
            // Step 1: execute action `trace("Enter TEST2_REGULAR_EVENT_TESTING.");`
            ____GilData_EchoStringVoid("MainClass.Trace(\"Enter TEST2_REGULAR_EVENT_TESTING.\");");
        } // end of behavior for TEST2_REGULAR_EVENT_TESTING
    }
    
    private void TEST2_REGULAR_EVENT_TESTING_exit()
    {
        // TEST2_REGULAR_EVENT_TESTING behavior
        // uml: exit / { trace("Exit TEST2_REGULAR_EVENT_TESTING."); }
        {
            // Step 1: execute action `trace("Exit TEST2_REGULAR_EVENT_TESTING.");`
            ____GilData_EchoStringVoid("MainClass.Trace(\"Exit TEST2_REGULAR_EVENT_TESTING.\");");
        } // end of behavior for TEST2_REGULAR_EVENT_TESTING
        
        this.stateId = StateId.ROOT;
    }
    
    
    ////////////////////////////////////////////////////////////////////////////////
    // event handlers for state TEST2_ROOT
    ////////////////////////////////////////////////////////////////////////////////
    
    private void TEST2_ROOT_enter()
    {
        this.stateId = StateId.TEST2_ROOT;
        
        // TEST2_ROOT behavior
        // uml: enter / { trace("Enter TEST2_ROOT."); }
        {
            // Step 1: execute action `trace("Enter TEST2_ROOT.");`
            ____GilData_EchoStringVoid("MainClass.Trace(\"Enter TEST2_ROOT.\");");
        } // end of behavior for TEST2_ROOT
    }
    
    private void TEST2_ROOT_exit()
    {
        // TEST2_ROOT behavior
        // uml: exit / { trace("Exit TEST2_ROOT."); }
        {
            // Step 1: execute action `trace("Exit TEST2_ROOT.");`
            ____GilData_EchoStringVoid("MainClass.Trace(\"Exit TEST2_ROOT.\");");
        } // end of behavior for TEST2_ROOT
        
        this.stateId = StateId.TEST2_REGULAR_EVENT_TESTING;
    }
    
    private void TEST2_ROOT_do()
    {
        bool consume_event = false;
        
        // TEST2_ROOT behavior
        // uml: do [trace_guard("State TEST2_ROOT: check behavior `do`.", true)]
        if (____GilData_VarArgsToBool(____GilData_EchoStringBool("trace_guard(\"State TEST2_ROOT: check behavior `do`.\", true)")))
        {
            // `do` events are not normally consumed.
            // Step 1: execute action ``
        } // end of behavior for TEST2_ROOT
        
        // Check if event has been consumed before calling ancestor handler.
        if (!consume_event)
        {
            this.ROOT_do();
        }
    }
    
    private void TEST2_ROOT_ev1()
    {
        // TEST2_ROOT behavior
        // uml: EV1 [trace_guard("State TEST2_ROOT: check behavior `EV1`.", true)]
        if (____GilData_VarArgsToBool(____GilData_EchoStringBool("trace_guard(\"State TEST2_ROOT: check behavior `EV1`.\", true)")))
        {
            // Step 1: execute action ``
        } // end of behavior for TEST2_ROOT
        
        // No ancestor handles this event.
    }
    
    private void TEST2_ROOT_ev2()
    {
        // TEST2_ROOT behavior
        // uml: EV2 [trace_guard("State TEST2_ROOT: check behavior `EV2`.", true)]
        if (____GilData_VarArgsToBool(____GilData_EchoStringBool("trace_guard(\"State TEST2_ROOT: check behavior `EV2`.\", true)")))
        {
            // Step 1: execute action ``
        } // end of behavior for TEST2_ROOT
        
        // No ancestor handles this event.
    }
    
    
    ////////////////////////////////////////////////////////////////////////////////
    // event handlers for state TEST2_S1
    ////////////////////////////////////////////////////////////////////////////////
    
    private void TEST2_S1_enter()
    {
        this.stateId = StateId.TEST2_S1;
        
        // TEST2_S1 behavior
        // uml: enter / { trace("Enter TEST2_S1."); }
        {
            // Step 1: execute action `trace("Enter TEST2_S1.");`
            ____GilData_EchoStringVoid("MainClass.Trace(\"Enter TEST2_S1.\");");
        } // end of behavior for TEST2_S1
    }
    
    private void TEST2_S1_exit()
    {
        // TEST2_S1 behavior
        // uml: exit / { trace("Exit TEST2_S1."); }
        {
            // Step 1: execute action `trace("Exit TEST2_S1.");`
            ____GilData_EchoStringVoid("MainClass.Trace(\"Exit TEST2_S1.\");");
        } // end of behavior for TEST2_S1
        
        this.stateId = StateId.TEST2_ROOT;
    }
    
    
    ////////////////////////////////////////////////////////////////////////////////
    // event handlers for state TEST2_S1_1
    ////////////////////////////////////////////////////////////////////////////////
    
    private void TEST2_S1_1_enter()
    {
        this.stateId = StateId.TEST2_S1_1;
        
        // TEST2_S1_1 behavior
        // uml: enter / { trace("Enter TEST2_S1_1."); }
        {
            // Step 1: execute action `trace("Enter TEST2_S1_1.");`
            ____GilData_EchoStringVoid("MainClass.Trace(\"Enter TEST2_S1_1.\");");
        } // end of behavior for TEST2_S1_1
        
        // TEST2_S1_1 behavior
        // uml: enter [trace_guard("State TEST2_S1_1: check behavior `enter / { clear_output(); }`.", true)] / { clear_output(); }
        if (____GilData_VarArgsToBool(____GilData_EchoStringBool("trace_guard(\"State TEST2_S1_1: check behavior `enter / { clear_output(); }`.\", true)")))
        {
            // Step 1: execute action `clear_output();`
            ____GilData_EchoStringVoid("MainClass.Trace(\"IGNORE_OUTPUT_BEFORE_THIS\");");
        } // end of behavior for TEST2_S1_1
    }
    
    private void TEST2_S1_1_exit()
    {
        // TEST2_S1_1 behavior
        // uml: exit / { trace("Exit TEST2_S1_1."); }
        {
            // Step 1: execute action `trace("Exit TEST2_S1_1.");`
            ____GilData_EchoStringVoid("MainClass.Trace(\"Exit TEST2_S1_1.\");");
        } // end of behavior for TEST2_S1_1
        
        this.stateId = StateId.TEST2_S1;
    }
    
    private void TEST2_S1_1_do()
    {
        bool consume_event = false;
        
        // TEST2_S1_1 behavior
        // uml: do [trace_guard("State TEST2_S1_1: check behavior `do TransitionTo(TEST2_S2)`.", true)] / { trace("Transition action `` for TEST2_S1_1 to TEST2_S2."); } TransitionTo(TEST2_S2)
        if (____GilData_VarArgsToBool(____GilData_EchoStringBool("trace_guard(\"State TEST2_S1_1: check behavior `do TransitionTo(TEST2_S2)`.\", true)")))
        {
            // Step 1: Exit states until we reach `TEST2_ROOT` state (Least Common Ancestor for transition).
            this.ExitUpToStateHandler(StateId.TEST2_ROOT);
            
            // Step 2: Transition action: `trace("Transition action `` for TEST2_S1_1 to TEST2_S2.");`.
            ____GilData_EchoStringVoid("MainClass.Trace(\"Transition action `` for TEST2_S1_1 to TEST2_S2.\");");
            
            // Step 3: Enter/move towards transition target `TEST2_S2`.
            this.TEST2_S2_enter();
            
            // Step 4: complete transition. Ends event dispatch. No other behaviors are checked.
            return;
        } // end of behavior for TEST2_S1_1
        
        // Check if event has been consumed before calling ancestor handler.
        if (!consume_event)
        {
            this.TEST2_ROOT_do();
        }
    }
    
    private void TEST2_S1_1_ev1()
    {
        bool consume_event = false;
        
        // TEST2_S1_1 behavior
        // uml: EV1 [trace_guard("State TEST2_S1_1: check behavior `EV1`.", true)]
        if (____GilData_VarArgsToBool(____GilData_EchoStringBool("trace_guard(\"State TEST2_S1_1: check behavior `EV1`.\", true)")))
        {
            // Consume event `ev1`.
            consume_event = true;
            // Step 1: execute action ``
        } // end of behavior for TEST2_S1_1
        
        // Check if event has been consumed before calling ancestor handler.
        if (!consume_event)
        {
            this.TEST2_ROOT_ev1();
        }
    }
    
    
    ////////////////////////////////////////////////////////////////////////////////
    // event handlers for state TEST2_S2
    ////////////////////////////////////////////////////////////////////////////////
    
    private void TEST2_S2_enter()
    {
        this.stateId = StateId.TEST2_S2;
        
        // TEST2_S2 behavior
        // uml: enter / { trace("Enter TEST2_S2."); }
        {
            // Step 1: execute action `trace("Enter TEST2_S2.");`
            ____GilData_EchoStringVoid("MainClass.Trace(\"Enter TEST2_S2.\");");
        } // end of behavior for TEST2_S2
        
        // TEST2_S2 behavior
        // uml: enter [trace_guard("State TEST2_S2: check behavior `en`.", true)]
        if (____GilData_VarArgsToBool(____GilData_EchoStringBool("trace_guard(\"State TEST2_S2: check behavior `en`.\", true)")))
        {
            // Step 1: execute action ``
        } // end of behavior for TEST2_S2
    }
    
    private void TEST2_S2_exit()
    {
        // TEST2_S2 behavior
        // uml: exit / { trace("Exit TEST2_S2."); }
        {
            // Step 1: execute action `trace("Exit TEST2_S2.");`
            ____GilData_EchoStringVoid("MainClass.Trace(\"Exit TEST2_S2.\");");
        } // end of behavior for TEST2_S2
        
        this.stateId = StateId.TEST2_ROOT;
    }
    
    private void TEST2_S2_ev1()
    {
        bool consume_event = false;
        
        // TEST2_S2 behavior
        // uml: ev1 [trace_guard("State TEST2_S2: check behavior `ev1 / { consume_event = false; }`.", true)] / { consume_event = false; }
        if (____GilData_VarArgsToBool(____GilData_EchoStringBool("trace_guard(\"State TEST2_S2: check behavior `ev1 / { consume_event = false; }`.\", true)")))
        {
            // Consume event `ev1`.
            consume_event = true;
            // Step 1: execute action `consume_event = false;`
            ____GilData_EchoStringVoid("consume_event = false;");
        } // end of behavior for TEST2_S2
        
        // Check if event has been consumed before calling ancestor handler.
        if (!consume_event)
        {
            this.TEST2_ROOT_ev1();
        }
    }
    
    private void TEST2_S2_ev2()
    {
        bool consume_event = false;
        
        // TEST2_S2 behavior
        // uml: ev2 [trace_guard("State TEST2_S2: check behavior `ev2 TransitionTo(TEST2_S2)`.", true)] / { trace("Transition action `` for TEST2_S2 to TEST2_S2."); } TransitionTo(TEST2_S2)
        if (____GilData_VarArgsToBool(____GilData_EchoStringBool("trace_guard(\"State TEST2_S2: check behavior `ev2 TransitionTo(TEST2_S2)`.\", true)")))
        {
            // Step 1: Exit states until we reach `TEST2_ROOT` state (Least Common Ancestor for transition).
            this.TEST2_S2_exit();
            
            // Step 2: Transition action: `trace("Transition action `` for TEST2_S2 to TEST2_S2.");`.
            ____GilData_EchoStringVoid("MainClass.Trace(\"Transition action `` for TEST2_S2 to TEST2_S2.\");");
            
            // Step 3: Enter/move towards transition target `TEST2_S2`.
            this.TEST2_S2_enter();
            
            // Step 4: complete transition. Ends event dispatch. No other behaviors are checked.
            return;
        } // end of behavior for TEST2_S2
        
        // Check if event has been consumed before calling ancestor handler.
        if (!consume_event)
        {
            this.TEST2_ROOT_ev2();
        }
    }
    
    
    ////////////////////////////////////////////////////////////////////////////////
    // event handlers for state TEST3_BEHAVIOR_ORDERING
    ////////////////////////////////////////////////////////////////////////////////
    
    private void TEST3_BEHAVIOR_ORDERING_enter()
    {
        this.stateId = StateId.TEST3_BEHAVIOR_ORDERING;
        
        // TEST3_BEHAVIOR_ORDERING behavior
        // uml: enter / { trace("Enter TEST3_BEHAVIOR_ORDERING."); }
        {
            // Step 1: execute action `trace("Enter TEST3_BEHAVIOR_ORDERING.");`
            ____GilData_EchoStringVoid("MainClass.Trace(\"Enter TEST3_BEHAVIOR_ORDERING.\");");
        } // end of behavior for TEST3_BEHAVIOR_ORDERING
    }
    
    private void TEST3_BEHAVIOR_ORDERING_exit()
    {
        // TEST3_BEHAVIOR_ORDERING behavior
        // uml: exit / { trace("Exit TEST3_BEHAVIOR_ORDERING."); }
        {
            // Step 1: execute action `trace("Exit TEST3_BEHAVIOR_ORDERING.");`
            ____GilData_EchoStringVoid("MainClass.Trace(\"Exit TEST3_BEHAVIOR_ORDERING.\");");
        } // end of behavior for TEST3_BEHAVIOR_ORDERING
        
        this.stateId = StateId.ROOT;
    }
    
    
    ////////////////////////////////////////////////////////////////////////////////
    // event handlers for state TEST3_ROOT
    ////////////////////////////////////////////////////////////////////////////////
    
    private void TEST3_ROOT_enter()
    {
        this.stateId = StateId.TEST3_ROOT;
        
        // TEST3_ROOT behavior
        // uml: enter / { trace("Enter TEST3_ROOT."); }
        {
            // Step 1: execute action `trace("Enter TEST3_ROOT.");`
            ____GilData_EchoStringVoid("MainClass.Trace(\"Enter TEST3_ROOT.\");");
        } // end of behavior for TEST3_ROOT
    }
    
    private void TEST3_ROOT_exit()
    {
        // TEST3_ROOT behavior
        // uml: exit / { trace("Exit TEST3_ROOT."); }
        {
            // Step 1: execute action `trace("Exit TEST3_ROOT.");`
            ____GilData_EchoStringVoid("MainClass.Trace(\"Exit TEST3_ROOT.\");");
        } // end of behavior for TEST3_ROOT
        
        this.stateId = StateId.TEST3_BEHAVIOR_ORDERING;
    }
    
    private void TEST3_ROOT_ev1()
    {
        // TEST3_ROOT behavior
        // uml: EV1 [trace_guard("State TEST3_ROOT: check behavior `EV1`.", true)]
        if (____GilData_VarArgsToBool(____GilData_EchoStringBool("trace_guard(\"State TEST3_ROOT: check behavior `EV1`.\", true)")))
        {
            // Step 1: execute action ``
        } // end of behavior for TEST3_ROOT
        
        // No ancestor handles this event.
    }
    
    
    ////////////////////////////////////////////////////////////////////////////////
    // event handlers for state TEST3_S1
    ////////////////////////////////////////////////////////////////////////////////
    
    private void TEST3_S1_enter()
    {
        this.stateId = StateId.TEST3_S1;
        
        // TEST3_S1 behavior
        // uml: enter / { trace("Enter TEST3_S1."); }
        {
            // Step 1: execute action `trace("Enter TEST3_S1.");`
            ____GilData_EchoStringVoid("MainClass.Trace(\"Enter TEST3_S1.\");");
        } // end of behavior for TEST3_S1
        
        // TEST3_S1 behavior
        // uml: enter [trace_guard("State TEST3_S1: check behavior `enter / { clear_output(); }`.", true)] / { clear_output(); }
        if (____GilData_VarArgsToBool(____GilData_EchoStringBool("trace_guard(\"State TEST3_S1: check behavior `enter / { clear_output(); }`.\", true)")))
        {
            // Step 1: execute action `clear_output();`
            ____GilData_EchoStringVoid("MainClass.Trace(\"IGNORE_OUTPUT_BEFORE_THIS\");");
        } // end of behavior for TEST3_S1
    }
    
    private void TEST3_S1_exit()
    {
        // TEST3_S1 behavior
        // uml: exit / { trace("Exit TEST3_S1."); }
        {
            // Step 1: execute action `trace("Exit TEST3_S1.");`
            ____GilData_EchoStringVoid("MainClass.Trace(\"Exit TEST3_S1.\");");
        } // end of behavior for TEST3_S1
        
        this.stateId = StateId.TEST3_ROOT;
    }
    
    private void TEST3_S1_ev1()
    {
        bool consume_event = false;
        
        // TEST3_S1 behavior
        // uml: 1. EV1 [trace_guard("State TEST3_S1: check behavior `1. EV1 TransitionTo(TEST3_S2)`.", true)] / { trace("Transition action `` for TEST3_S1 to TEST3_S2."); } TransitionTo(TEST3_S2)
        if (____GilData_VarArgsToBool(____GilData_EchoStringBool("trace_guard(\"State TEST3_S1: check behavior `1. EV1 TransitionTo(TEST3_S2)`.\", true)")))
        {
            // Step 1: Exit states until we reach `TEST3_ROOT` state (Least Common Ancestor for transition).
            this.TEST3_S1_exit();
            
            // Step 2: Transition action: `trace("Transition action `` for TEST3_S1 to TEST3_S2.");`.
            ____GilData_EchoStringVoid("MainClass.Trace(\"Transition action `` for TEST3_S1 to TEST3_S2.\");");
            
            // Step 3: Enter/move towards transition target `TEST3_S2`.
            this.TEST3_S2_enter();
            
            // Step 4: complete transition. Ends event dispatch. No other behaviors are checked.
            return;
        } // end of behavior for TEST3_S1
        
        // TEST3_S1 behavior
        // uml: 2. EV1 [trace_guard("State TEST3_S1: check behavior `2. EV1 / { trace(\"failed\"); }`.", true)] / { trace("failed"); }
        if (____GilData_VarArgsToBool(____GilData_EchoStringBool("trace_guard(\"State TEST3_S1: check behavior `2. EV1 / { trace(\\\"failed\\\"); }`.\", true)")))
        {
            // Consume event `ev1`.
            consume_event = true;
            // Step 1: execute action `trace("failed");`
            ____GilData_EchoStringVoid("MainClass.Trace(\"failed\");");
        } // end of behavior for TEST3_S1
        
        // Check if event has been consumed before calling ancestor handler.
        if (!consume_event)
        {
            this.TEST3_ROOT_ev1();
        }
    }
    
    
    ////////////////////////////////////////////////////////////////////////////////
    // event handlers for state TEST3_S2
    ////////////////////////////////////////////////////////////////////////////////
    
    private void TEST3_S2_enter()
    {
        this.stateId = StateId.TEST3_S2;
        
        // TEST3_S2 behavior
        // uml: enter / { trace("Enter TEST3_S2."); }
        {
            // Step 1: execute action `trace("Enter TEST3_S2.");`
            ____GilData_EchoStringVoid("MainClass.Trace(\"Enter TEST3_S2.\");");
        } // end of behavior for TEST3_S2
    }
    
    private void TEST3_S2_exit()
    {
        // TEST3_S2 behavior
        // uml: exit / { trace("Exit TEST3_S2."); }
        {
            // Step 1: execute action `trace("Exit TEST3_S2.");`
            ____GilData_EchoStringVoid("MainClass.Trace(\"Exit TEST3_S2.\");");
        } // end of behavior for TEST3_S2
        
        this.stateId = StateId.TEST3_ROOT;
    }
    
    private void TEST3_S2_ev1()
    {
        bool consume_event = false;
        
        // TEST3_S2 behavior
        // uml: 1. EV1 [trace_guard("State TEST3_S2: check behavior `1. EV1 / { trace(\"1 woot!\"); }`.", true)] / { trace("1 woot!"); }
        if (____GilData_VarArgsToBool(____GilData_EchoStringBool("trace_guard(\"State TEST3_S2: check behavior `1. EV1 / { trace(\\\"1 woot!\\\"); }`.\", true)")))
        {
            // Consume event `ev1`.
            consume_event = true;
            // Step 1: execute action `trace("1 woot!");`
            ____GilData_EchoStringVoid("MainClass.Trace(\"1 woot!\");");
        } // end of behavior for TEST3_S2
        
        // TEST3_S2 behavior
        // uml: 1.1. EV1 [trace_guard("State TEST3_S2: check behavior `1.1. EV1 / { trace(\"2 woot!\"); }`.", true)] / { trace("2 woot!"); }
        if (____GilData_VarArgsToBool(____GilData_EchoStringBool("trace_guard(\"State TEST3_S2: check behavior `1.1. EV1 / { trace(\\\"2 woot!\\\"); }`.\", true)")))
        {
            // Consume event `ev1`.
            consume_event = true;
            // Step 1: execute action `trace("2 woot!");`
            ____GilData_EchoStringVoid("MainClass.Trace(\"2 woot!\");");
        } // end of behavior for TEST3_S2
        
        // TEST3_S2 behavior
        // uml: 2. EV1 [trace_guard("State TEST3_S2: check behavior `2. EV1 / { trace(\"3 woot!\"); } TransitionTo(TEST3_S3)`.", true)] / { trace("Transition action `trace(\"3 woot!\");` for TEST3_S2 to TEST3_S3.");\ntrace("3 woot!"); } TransitionTo(TEST3_S3)
        if (____GilData_VarArgsToBool(____GilData_EchoStringBool("trace_guard(\"State TEST3_S2: check behavior `2. EV1 / { trace(\\\"3 woot!\\\"); } TransitionTo(TEST3_S3)`.\", true)")))
        {
            // Step 1: Exit states until we reach `TEST3_ROOT` state (Least Common Ancestor for transition).
            this.TEST3_S2_exit();
            
            // Step 2: Transition action: `trace("Transition action `trace(\"3 woot!\");` for TEST3_S2 to TEST3_S3.");\ntrace("3 woot!");`.
            ____GilData_EchoStringVoid("MainClass.Trace(\"Transition action `trace(\\\"3 woot!\\\");` for TEST3_S2 to TEST3_S3.\");");
            ____GilData_EchoStringVoid("MainClass.Trace(\"3 woot!\");");
            
            // Step 3: Enter/move towards transition target `TEST3_S3`.
            this.TEST3_S3_enter();
            
            // Step 4: complete transition. Ends event dispatch. No other behaviors are checked.
            return;
        } // end of behavior for TEST3_S2
        
        // Check if event has been consumed before calling ancestor handler.
        if (!consume_event)
        {
            this.TEST3_ROOT_ev1();
        }
    }
    
    
    ////////////////////////////////////////////////////////////////////////////////
    // event handlers for state TEST3_S3
    ////////////////////////////////////////////////////////////////////////////////
    
    private void TEST3_S3_enter()
    {
        this.stateId = StateId.TEST3_S3;
        
        // TEST3_S3 behavior
        // uml: enter / { trace("Enter TEST3_S3."); }
        {
            // Step 1: execute action `trace("Enter TEST3_S3.");`
            ____GilData_EchoStringVoid("MainClass.Trace(\"Enter TEST3_S3.\");");
        } // end of behavior for TEST3_S3
    }
    
    private void TEST3_S3_exit()
    {
        // TEST3_S3 behavior
        // uml: exit / { trace("Exit TEST3_S3."); }
        {
            // Step 1: execute action `trace("Exit TEST3_S3.");`
            ____GilData_EchoStringVoid("MainClass.Trace(\"Exit TEST3_S3.\");");
        } // end of behavior for TEST3_S3
        
        this.stateId = StateId.TEST3_ROOT;
    }
    
    
    ////////////////////////////////////////////////////////////////////////////////
    // event handlers for state TEST4_PARENT_CHILD_TRANSITIONS
    ////////////////////////////////////////////////////////////////////////////////
    
    private void TEST4_PARENT_CHILD_TRANSITIONS_enter()
    {
        this.stateId = StateId.TEST4_PARENT_CHILD_TRANSITIONS;
        
        // TEST4_PARENT_CHILD_TRANSITIONS behavior
        // uml: enter / { trace("Enter TEST4_PARENT_CHILD_TRANSITIONS."); }
        {
            // Step 1: execute action `trace("Enter TEST4_PARENT_CHILD_TRANSITIONS.");`
            ____GilData_EchoStringVoid("MainClass.Trace(\"Enter TEST4_PARENT_CHILD_TRANSITIONS.\");");
        } // end of behavior for TEST4_PARENT_CHILD_TRANSITIONS
    }
    
    private void TEST4_PARENT_CHILD_TRANSITIONS_exit()
    {
        // TEST4_PARENT_CHILD_TRANSITIONS behavior
        // uml: exit / { trace("Exit TEST4_PARENT_CHILD_TRANSITIONS."); }
        {
            // Step 1: execute action `trace("Exit TEST4_PARENT_CHILD_TRANSITIONS.");`
            ____GilData_EchoStringVoid("MainClass.Trace(\"Exit TEST4_PARENT_CHILD_TRANSITIONS.\");");
        } // end of behavior for TEST4_PARENT_CHILD_TRANSITIONS
        
        this.stateId = StateId.ROOT;
    }
    
    
    ////////////////////////////////////////////////////////////////////////////////
    // event handlers for state TEST4_B_AND_OTHERS
    ////////////////////////////////////////////////////////////////////////////////
    
    private void TEST4_B_AND_OTHERS_enter()
    {
        this.stateId = StateId.TEST4_B_AND_OTHERS;
        
        // TEST4_B_AND_OTHERS behavior
        // uml: enter / { trace("Enter TEST4_B_AND_OTHERS."); }
        {
            // Step 1: execute action `trace("Enter TEST4_B_AND_OTHERS.");`
            ____GilData_EchoStringVoid("MainClass.Trace(\"Enter TEST4_B_AND_OTHERS.\");");
        } // end of behavior for TEST4_B_AND_OTHERS
        
        // TEST4_B_AND_OTHERS behavior
        // uml: enter [trace_guard("State TEST4_B_AND_OTHERS: check behavior `enter / { clear_dispatch_output(); }`.", true)] / { clear_dispatch_output(); }
        if (____GilData_VarArgsToBool(____GilData_EchoStringBool("trace_guard(\"State TEST4_B_AND_OTHERS: check behavior `enter / { clear_dispatch_output(); }`.\", true)")))
        {
            // Step 1: execute action `clear_dispatch_output();`
            ____GilData_EchoStringVoid("MainClass.Trace(\"CLEAR_OUTPUT_BEFORE_THIS_AND_FOR_THIS_EVENT_DISPATCH\");");
        } // end of behavior for TEST4_B_AND_OTHERS
    }
    
    private void TEST4_B_AND_OTHERS_exit()
    {
        // TEST4_B_AND_OTHERS behavior
        // uml: exit / { trace("Exit TEST4_B_AND_OTHERS."); }
        {
            // Step 1: execute action `trace("Exit TEST4_B_AND_OTHERS.");`
            ____GilData_EchoStringVoid("MainClass.Trace(\"Exit TEST4_B_AND_OTHERS.\");");
        } // end of behavior for TEST4_B_AND_OTHERS
        
        this.stateId = StateId.TEST4_PARENT_CHILD_TRANSITIONS;
    }
    
    
    ////////////////////////////////////////////////////////////////////////////////
    // event handlers for state TEST4B_LOCAL
    ////////////////////////////////////////////////////////////////////////////////
    
    private void TEST4B_LOCAL_enter()
    {
        this.stateId = StateId.TEST4B_LOCAL;
        
        // TEST4B_LOCAL behavior
        // uml: enter / { trace("Enter TEST4B_LOCAL."); }
        {
            // Step 1: execute action `trace("Enter TEST4B_LOCAL.");`
            ____GilData_EchoStringVoid("MainClass.Trace(\"Enter TEST4B_LOCAL.\");");
        } // end of behavior for TEST4B_LOCAL
    }
    
    private void TEST4B_LOCAL_exit()
    {
        // TEST4B_LOCAL behavior
        // uml: exit / { trace("Exit TEST4B_LOCAL."); }
        {
            // Step 1: execute action `trace("Exit TEST4B_LOCAL.");`
            ____GilData_EchoStringVoid("MainClass.Trace(\"Exit TEST4B_LOCAL.\");");
        } // end of behavior for TEST4B_LOCAL
        
        this.stateId = StateId.TEST4_B_AND_OTHERS;
    }
    
    
    ////////////////////////////////////////////////////////////////////////////////
    // event handlers for state TEST4B_G
    ////////////////////////////////////////////////////////////////////////////////
    
    private void TEST4B_G_enter()
    {
        this.stateId = StateId.TEST4B_G;
        
        // TEST4B_G behavior
        // uml: enter / { trace("Enter TEST4B_G."); }
        {
            // Step 1: execute action `trace("Enter TEST4B_G.");`
            ____GilData_EchoStringVoid("MainClass.Trace(\"Enter TEST4B_G.\");");
        } // end of behavior for TEST4B_G
    }
    
    private void TEST4B_G_exit()
    {
        // TEST4B_G behavior
        // uml: exit / { trace("Exit TEST4B_G."); }
        {
            // Step 1: execute action `trace("Exit TEST4B_G.");`
            ____GilData_EchoStringVoid("MainClass.Trace(\"Exit TEST4B_G.\");");
        } // end of behavior for TEST4B_G
        
        this.stateId = StateId.TEST4B_LOCAL;
    }
    
    private void TEST4B_G_ev1()
    {
        // TEST4B_G behavior
        // uml: EV1 [trace_guard("State TEST4B_G: check behavior `EV1 TransitionTo(TEST4B_G_1)`.", true)] / { trace("Transition action `` for TEST4B_G to TEST4B_G_1."); } TransitionTo(TEST4B_G_1)
        if (____GilData_VarArgsToBool(____GilData_EchoStringBool("trace_guard(\"State TEST4B_G: check behavior `EV1 TransitionTo(TEST4B_G_1)`.\", true)")))
        {
            // Step 1: Exit states until we reach `TEST4B_G` state (Least Common Ancestor for transition).
            this.ExitUpToStateHandler(StateId.TEST4B_G);
            
            // Step 2: Transition action: `trace("Transition action `` for TEST4B_G to TEST4B_G_1.");`.
            ____GilData_EchoStringVoid("MainClass.Trace(\"Transition action `` for TEST4B_G to TEST4B_G_1.\");");
            
            // Step 3: Enter/move towards transition target `TEST4B_G_1`.
            this.TEST4B_G_1_enter();
            
            // Step 4: complete transition. Ends event dispatch. No other behaviors are checked.
            return;
        } // end of behavior for TEST4B_G
        
        // No ancestor handles this event.
    }
    
    
    ////////////////////////////////////////////////////////////////////////////////
    // event handlers for state TEST4B_G_1
    ////////////////////////////////////////////////////////////////////////////////
    
    private void TEST4B_G_1_enter()
    {
        this.stateId = StateId.TEST4B_G_1;
        
        // TEST4B_G_1 behavior
        // uml: enter / { trace("Enter TEST4B_G_1."); }
        {
            // Step 1: execute action `trace("Enter TEST4B_G_1.");`
            ____GilData_EchoStringVoid("MainClass.Trace(\"Enter TEST4B_G_1.\");");
        } // end of behavior for TEST4B_G_1
    }
    
    private void TEST4B_G_1_exit()
    {
        // TEST4B_G_1 behavior
        // uml: exit / { trace("Exit TEST4B_G_1."); }
        {
            // Step 1: execute action `trace("Exit TEST4B_G_1.");`
            ____GilData_EchoStringVoid("MainClass.Trace(\"Exit TEST4B_G_1.\");");
        } // end of behavior for TEST4B_G_1
        
        this.stateId = StateId.TEST4B_G;
    }
    
    private void TEST4B_G_1_ev2()
    {
        // TEST4B_G_1 behavior
        // uml: EV2 [trace_guard("State TEST4B_G_1: check behavior `EV2 TransitionTo(TEST4B_G)`.", true)] / { trace("Transition action `` for TEST4B_G_1 to TEST4B_G."); } TransitionTo(TEST4B_G)
        if (____GilData_VarArgsToBool(____GilData_EchoStringBool("trace_guard(\"State TEST4B_G_1: check behavior `EV2 TransitionTo(TEST4B_G)`.\", true)")))
        {
            // Step 1: Exit states until we reach `TEST4B_G` state (Least Common Ancestor for transition).
            this.TEST4B_G_1_exit();
            
            // Step 2: Transition action: `trace("Transition action `` for TEST4B_G_1 to TEST4B_G.");`.
            ____GilData_EchoStringVoid("MainClass.Trace(\"Transition action `` for TEST4B_G_1 to TEST4B_G.\");");
            
            // Step 3: Enter/move towards transition target `TEST4B_G`.
            // Already in target. No entering required.
            // Step 4: complete transition. Ends event dispatch. No other behaviors are checked.
            return;
        } // end of behavior for TEST4B_G_1
        
        // No ancestor handles this event.
    }
    
    
    ////////////////////////////////////////////////////////////////////////////////
    // event handlers for state TEST4C_LOCAL_TO_ALIAS
    ////////////////////////////////////////////////////////////////////////////////
    
    private void TEST4C_LOCAL_TO_ALIAS_enter()
    {
        this.stateId = StateId.TEST4C_LOCAL_TO_ALIAS;
        
        // TEST4C_LOCAL_TO_ALIAS behavior
        // uml: enter / { trace("Enter TEST4C_LOCAL_TO_ALIAS."); }
        {
            // Step 1: execute action `trace("Enter TEST4C_LOCAL_TO_ALIAS.");`
            ____GilData_EchoStringVoid("MainClass.Trace(\"Enter TEST4C_LOCAL_TO_ALIAS.\");");
        } // end of behavior for TEST4C_LOCAL_TO_ALIAS
    }
    
    private void TEST4C_LOCAL_TO_ALIAS_exit()
    {
        // TEST4C_LOCAL_TO_ALIAS behavior
        // uml: exit / { trace("Exit TEST4C_LOCAL_TO_ALIAS."); }
        {
            // Step 1: execute action `trace("Exit TEST4C_LOCAL_TO_ALIAS.");`
            ____GilData_EchoStringVoid("MainClass.Trace(\"Exit TEST4C_LOCAL_TO_ALIAS.\");");
        } // end of behavior for TEST4C_LOCAL_TO_ALIAS
        
        this.stateId = StateId.TEST4_B_AND_OTHERS;
    }
    
    
    ////////////////////////////////////////////////////////////////////////////////
    // event handlers for state TEST4C_G
    ////////////////////////////////////////////////////////////////////////////////
    
    private void TEST4C_G_enter()
    {
        this.stateId = StateId.TEST4C_G;
        
        // TEST4C_G behavior
        // uml: enter / { trace("Enter TEST4C_G."); }
        {
            // Step 1: execute action `trace("Enter TEST4C_G.");`
            ____GilData_EchoStringVoid("MainClass.Trace(\"Enter TEST4C_G.\");");
        } // end of behavior for TEST4C_G
    }
    
    private void TEST4C_G_exit()
    {
        // TEST4C_G behavior
        // uml: exit / { trace("Exit TEST4C_G."); }
        {
            // Step 1: execute action `trace("Exit TEST4C_G.");`
            ____GilData_EchoStringVoid("MainClass.Trace(\"Exit TEST4C_G.\");");
        } // end of behavior for TEST4C_G
        
        this.stateId = StateId.TEST4C_LOCAL_TO_ALIAS;
    }
    
    private void TEST4C_G_ev1()
    {
        // TEST4C_G behavior
        // uml: EV1 [trace_guard("State TEST4C_G: check behavior `EV1 TransitionTo(TEST4C_G_1)`.", true)] / { trace("Transition action `` for TEST4C_G to TEST4C_G_1."); } TransitionTo(TEST4C_G_1)
        if (____GilData_VarArgsToBool(____GilData_EchoStringBool("trace_guard(\"State TEST4C_G: check behavior `EV1 TransitionTo(TEST4C_G_1)`.\", true)")))
        {
            // Step 1: Exit states until we reach `TEST4C_G` state (Least Common Ancestor for transition).
            this.ExitUpToStateHandler(StateId.TEST4C_G);
            
            // Step 2: Transition action: `trace("Transition action `` for TEST4C_G to TEST4C_G_1.");`.
            ____GilData_EchoStringVoid("MainClass.Trace(\"Transition action `` for TEST4C_G to TEST4C_G_1.\");");
            
            // Step 3: Enter/move towards transition target `TEST4C_G_1`.
            this.TEST4C_G_1_enter();
            
            // Step 4: complete transition. Ends event dispatch. No other behaviors are checked.
            return;
        } // end of behavior for TEST4C_G
        
        // No ancestor handles this event.
    }
    
    
    ////////////////////////////////////////////////////////////////////////////////
    // event handlers for state TEST4C_G_1
    ////////////////////////////////////////////////////////////////////////////////
    
    private void TEST4C_G_1_enter()
    {
        this.stateId = StateId.TEST4C_G_1;
        
        // TEST4C_G_1 behavior
        // uml: enter / { trace("Enter TEST4C_G_1."); }
        {
            // Step 1: execute action `trace("Enter TEST4C_G_1.");`
            ____GilData_EchoStringVoid("MainClass.Trace(\"Enter TEST4C_G_1.\");");
        } // end of behavior for TEST4C_G_1
    }
    
    private void TEST4C_G_1_exit()
    {
        // TEST4C_G_1 behavior
        // uml: exit / { trace("Exit TEST4C_G_1."); }
        {
            // Step 1: execute action `trace("Exit TEST4C_G_1.");`
            ____GilData_EchoStringVoid("MainClass.Trace(\"Exit TEST4C_G_1.\");");
        } // end of behavior for TEST4C_G_1
        
        this.stateId = StateId.TEST4C_G;
    }
    
    private void TEST4C_G_1_ev2()
    {
        // TEST4C_G_1 behavior
        // uml: EV2 [trace_guard("State TEST4C_G_1: check behavior `EV2 TransitionTo(TEST4C_G)`.", true)] / { trace("Transition action `` for TEST4C_G_1 to TEST4C_G."); } TransitionTo(TEST4C_G)
        if (____GilData_VarArgsToBool(____GilData_EchoStringBool("trace_guard(\"State TEST4C_G_1: check behavior `EV2 TransitionTo(TEST4C_G)`.\", true)")))
        {
            // Step 1: Exit states until we reach `TEST4C_G` state (Least Common Ancestor for transition).
            this.TEST4C_G_1_exit();
            
            // Step 2: Transition action: `trace("Transition action `` for TEST4C_G_1 to TEST4C_G.");`.
            ____GilData_EchoStringVoid("MainClass.Trace(\"Transition action `` for TEST4C_G_1 to TEST4C_G.\");");
            
            // Step 3: Enter/move towards transition target `TEST4C_G`.
            // Already in target. No entering required.
            // Step 4: complete transition. Ends event dispatch. No other behaviors are checked.
            return;
        } // end of behavior for TEST4C_G_1
        
        // No ancestor handles this event.
    }
    
    
    ////////////////////////////////////////////////////////////////////////////////
    // event handlers for state TEST4D_EXTERNAL
    ////////////////////////////////////////////////////////////////////////////////
    
    private void TEST4D_EXTERNAL_enter()
    {
        this.stateId = StateId.TEST4D_EXTERNAL;
        
        // TEST4D_EXTERNAL behavior
        // uml: enter / { trace("Enter TEST4D_EXTERNAL."); }
        {
            // Step 1: execute action `trace("Enter TEST4D_EXTERNAL.");`
            ____GilData_EchoStringVoid("MainClass.Trace(\"Enter TEST4D_EXTERNAL.\");");
        } // end of behavior for TEST4D_EXTERNAL
    }
    
    private void TEST4D_EXTERNAL_exit()
    {
        // TEST4D_EXTERNAL behavior
        // uml: exit / { trace("Exit TEST4D_EXTERNAL."); }
        {
            // Step 1: execute action `trace("Exit TEST4D_EXTERNAL.");`
            ____GilData_EchoStringVoid("MainClass.Trace(\"Exit TEST4D_EXTERNAL.\");");
        } // end of behavior for TEST4D_EXTERNAL
        
        this.stateId = StateId.TEST4_B_AND_OTHERS;
    }
    
    
    ////////////////////////////////////////////////////////////////////////////////
    // event handlers for state TEST4D_G
    ////////////////////////////////////////////////////////////////////////////////
    
    private void TEST4D_G_enter()
    {
        this.stateId = StateId.TEST4D_G;
        
        // TEST4D_G behavior
        // uml: enter / { trace("Enter TEST4D_G."); }
        {
            // Step 1: execute action `trace("Enter TEST4D_G.");`
            ____GilData_EchoStringVoid("MainClass.Trace(\"Enter TEST4D_G.\");");
        } // end of behavior for TEST4D_G
    }
    
    private void TEST4D_G_exit()
    {
        // TEST4D_G behavior
        // uml: exit / { trace("Exit TEST4D_G."); }
        {
            // Step 1: execute action `trace("Exit TEST4D_G.");`
            ____GilData_EchoStringVoid("MainClass.Trace(\"Exit TEST4D_G.\");");
        } // end of behavior for TEST4D_G
        
        this.stateId = StateId.TEST4D_EXTERNAL;
    }
    
    private void TEST4D_G_ev1()
    {
        // TEST4D_G behavior
        // uml: EV1 [trace_guard("State TEST4D_G: check behavior `EV1 TransitionTo(TEST4D_EXTERNAL.<ChoicePoint>())`.", true)] / { trace("Transition action `` for TEST4D_G to TEST4D_EXTERNAL.<ChoicePoint>()."); } TransitionTo(TEST4D_EXTERNAL.<ChoicePoint>())
        if (____GilData_VarArgsToBool(____GilData_EchoStringBool("trace_guard(\"State TEST4D_G: check behavior `EV1 TransitionTo(TEST4D_EXTERNAL.<ChoicePoint>())`.\", true)")))
        {
            // Step 1: Exit states until we reach `TEST4D_EXTERNAL` state (Least Common Ancestor for transition).
            this.ExitUpToStateHandler(StateId.TEST4D_EXTERNAL);
            
            // Step 2: Transition action: `trace("Transition action `` for TEST4D_G to TEST4D_EXTERNAL.<ChoicePoint>().");`.
            ____GilData_EchoStringVoid("MainClass.Trace(\"Transition action `` for TEST4D_G to TEST4D_EXTERNAL.<ChoicePoint>().\");");
            
            // Step 3: Enter/move towards transition target `TEST4D_EXTERNAL.<ChoicePoint>()`.
            // TEST4D_EXTERNAL.<ChoicePoint>() is a pseudo state and cannot have an `enter` trigger.
            
            // TEST4D_EXTERNAL.<ChoicePoint>() behavior
            // uml: / { trace("Transition action `` for TEST4D_EXTERNAL.<ChoicePoint>() to TEST4D_G_1."); } TransitionTo(TEST4D_G_1)
            {
                // Step 1: Exit states until we reach `TEST4D_EXTERNAL` state (Least Common Ancestor for transition). Already at LCA, no exiting required.
                
                // Step 2: Transition action: `trace("Transition action `` for TEST4D_EXTERNAL.<ChoicePoint>() to TEST4D_G_1.");`.
                ____GilData_EchoStringVoid("MainClass.Trace(\"Transition action `` for TEST4D_EXTERNAL.<ChoicePoint>() to TEST4D_G_1.\");");
                
                // Step 3: Enter/move towards transition target `TEST4D_G_1`.
                this.TEST4D_G_enter();
                this.TEST4D_G_1_enter();
                
                // Step 4: complete transition. Ends event dispatch. No other behaviors are checked.
                return;
            } // end of behavior for TEST4D_EXTERNAL.<ChoicePoint>()
        } // end of behavior for TEST4D_G
        
        // No ancestor handles this event.
    }
    
    
    ////////////////////////////////////////////////////////////////////////////////
    // event handlers for state TEST4D_G_1
    ////////////////////////////////////////////////////////////////////////////////
    
    private void TEST4D_G_1_enter()
    {
        this.stateId = StateId.TEST4D_G_1;
        
        // TEST4D_G_1 behavior
        // uml: enter / { trace("Enter TEST4D_G_1."); }
        {
            // Step 1: execute action `trace("Enter TEST4D_G_1.");`
            ____GilData_EchoStringVoid("MainClass.Trace(\"Enter TEST4D_G_1.\");");
        } // end of behavior for TEST4D_G_1
    }
    
    private void TEST4D_G_1_exit()
    {
        // TEST4D_G_1 behavior
        // uml: exit / { trace("Exit TEST4D_G_1."); }
        {
            // Step 1: execute action `trace("Exit TEST4D_G_1.");`
            ____GilData_EchoStringVoid("MainClass.Trace(\"Exit TEST4D_G_1.\");");
        } // end of behavior for TEST4D_G_1
        
        this.stateId = StateId.TEST4D_G;
    }
    
    private void TEST4D_G_1_ev2()
    {
        // TEST4D_G_1 behavior
        // uml: EV2 [trace_guard("State TEST4D_G_1: check behavior `EV2 TransitionTo(TEST4D_EXTERNAL.<ChoicePoint>())`.", true)] / { trace("Transition action `` for TEST4D_G_1 to TEST4D_EXTERNAL.<ChoicePoint>()."); } TransitionTo(TEST4D_EXTERNAL.<ChoicePoint>())
        if (____GilData_VarArgsToBool(____GilData_EchoStringBool("trace_guard(\"State TEST4D_G_1: check behavior `EV2 TransitionTo(TEST4D_EXTERNAL.<ChoicePoint>())`.\", true)")))
        {
            // Step 1: Exit states until we reach `TEST4D_EXTERNAL` state (Least Common Ancestor for transition).
            this.ExitUpToStateHandler(StateId.TEST4D_EXTERNAL);
            
            // Step 2: Transition action: `trace("Transition action `` for TEST4D_G_1 to TEST4D_EXTERNAL.<ChoicePoint>().");`.
            ____GilData_EchoStringVoid("MainClass.Trace(\"Transition action `` for TEST4D_G_1 to TEST4D_EXTERNAL.<ChoicePoint>().\");");
            
            // Step 3: Enter/move towards transition target `TEST4D_EXTERNAL.<ChoicePoint>()`.
            // TEST4D_EXTERNAL.<ChoicePoint>() is a pseudo state and cannot have an `enter` trigger.
            
            // TEST4D_EXTERNAL.<ChoicePoint>() behavior
            // uml: / { trace("Transition action `` for TEST4D_EXTERNAL.<ChoicePoint>() to TEST4D_G."); } TransitionTo(TEST4D_G)
            {
                // Step 1: Exit states until we reach `TEST4D_EXTERNAL` state (Least Common Ancestor for transition). Already at LCA, no exiting required.
                
                // Step 2: Transition action: `trace("Transition action `` for TEST4D_EXTERNAL.<ChoicePoint>() to TEST4D_G.");`.
                ____GilData_EchoStringVoid("MainClass.Trace(\"Transition action `` for TEST4D_EXTERNAL.<ChoicePoint>() to TEST4D_G.\");");
                
                // Step 3: Enter/move towards transition target `TEST4D_G`.
                this.TEST4D_G_enter();
                
                // Step 4: complete transition. Ends event dispatch. No other behaviors are checked.
                return;
            } // end of behavior for TEST4D_EXTERNAL.<ChoicePoint>()
        } // end of behavior for TEST4D_G_1
        
        // No ancestor handles this event.
    }
    
    
    ////////////////////////////////////////////////////////////////////////////////
    // event handlers for state TEST4_DECIDE
    ////////////////////////////////////////////////////////////////////////////////
    
    private void TEST4_DECIDE_enter()
    {
        this.stateId = StateId.TEST4_DECIDE;
        
        // TEST4_DECIDE behavior
        // uml: enter / { trace("Enter TEST4_DECIDE."); }
        {
            // Step 1: execute action `trace("Enter TEST4_DECIDE.");`
            ____GilData_EchoStringVoid("MainClass.Trace(\"Enter TEST4_DECIDE.\");");
        } // end of behavior for TEST4_DECIDE
    }
    
    private void TEST4_DECIDE_exit()
    {
        // TEST4_DECIDE behavior
        // uml: exit / { trace("Exit TEST4_DECIDE."); }
        {
            // Step 1: execute action `trace("Exit TEST4_DECIDE.");`
            ____GilData_EchoStringVoid("MainClass.Trace(\"Exit TEST4_DECIDE.\");");
        } // end of behavior for TEST4_DECIDE
        
        this.stateId = StateId.TEST4_PARENT_CHILD_TRANSITIONS;
    }
    
    private void TEST4_DECIDE_ev1()
    {
        // TEST4_DECIDE behavior
        // uml: EV1 [trace_guard("State TEST4_DECIDE: check behavior `EV1 TransitionTo(TEST4_ROOT)`.", true)] / { trace("Transition action `` for TEST4_DECIDE to TEST4_ROOT."); } TransitionTo(TEST4_ROOT)
        if (____GilData_VarArgsToBool(____GilData_EchoStringBool("trace_guard(\"State TEST4_DECIDE: check behavior `EV1 TransitionTo(TEST4_ROOT)`.\", true)")))
        {
            // Step 1: Exit states until we reach `TEST4_PARENT_CHILD_TRANSITIONS` state (Least Common Ancestor for transition).
            this.TEST4_DECIDE_exit();
            
            // Step 2: Transition action: `trace("Transition action `` for TEST4_DECIDE to TEST4_ROOT.");`.
            ____GilData_EchoStringVoid("MainClass.Trace(\"Transition action `` for TEST4_DECIDE to TEST4_ROOT.\");");
            
            // Step 3: Enter/move towards transition target `TEST4_ROOT`.
            this.TEST4_ROOT_enter();
            
            // Step 4: complete transition. Ends event dispatch. No other behaviors are checked.
            return;
        } // end of behavior for TEST4_DECIDE
        
        // No ancestor handles this event.
    }
    
    private void TEST4_DECIDE_ev2()
    {
        // TEST4_DECIDE behavior
        // uml: EV2 [trace_guard("State TEST4_DECIDE: check behavior `EV2 TransitionTo(TEST4B_LOCAL)`.", true)] / { trace("Transition action `` for TEST4_DECIDE to TEST4B_LOCAL."); } TransitionTo(TEST4B_LOCAL)
        if (____GilData_VarArgsToBool(____GilData_EchoStringBool("trace_guard(\"State TEST4_DECIDE: check behavior `EV2 TransitionTo(TEST4B_LOCAL)`.\", true)")))
        {
            // Step 1: Exit states until we reach `TEST4_PARENT_CHILD_TRANSITIONS` state (Least Common Ancestor for transition).
            this.TEST4_DECIDE_exit();
            
            // Step 2: Transition action: `trace("Transition action `` for TEST4_DECIDE to TEST4B_LOCAL.");`.
            ____GilData_EchoStringVoid("MainClass.Trace(\"Transition action `` for TEST4_DECIDE to TEST4B_LOCAL.\");");
            
            // Step 3: Enter/move towards transition target `TEST4B_LOCAL`.
            this.TEST4_B_AND_OTHERS_enter();
            this.TEST4B_LOCAL_enter();
            
            // TEST4B_LOCAL.<InitialState> behavior
            // uml: / { trace("Transition action `` for TEST4B_LOCAL.<InitialState> to TEST4B_G."); } TransitionTo(TEST4B_G)
            {
                // Step 1: Exit states until we reach `TEST4B_LOCAL` state (Least Common Ancestor for transition). Already at LCA, no exiting required.
                
                // Step 2: Transition action: `trace("Transition action `` for TEST4B_LOCAL.<InitialState> to TEST4B_G.");`.
                ____GilData_EchoStringVoid("MainClass.Trace(\"Transition action `` for TEST4B_LOCAL.<InitialState> to TEST4B_G.\");");
                
                // Step 3: Enter/move towards transition target `TEST4B_G`.
                this.TEST4B_G_enter();
                
                // Step 4: complete transition. Ends event dispatch. No other behaviors are checked.
                return;
            } // end of behavior for TEST4B_LOCAL.<InitialState>
        } // end of behavior for TEST4_DECIDE
        
        // No ancestor handles this event.
    }
    
    private void TEST4_DECIDE_ev3()
    {
        // TEST4_DECIDE behavior
        // uml: EV3 [trace_guard("State TEST4_DECIDE: check behavior `EV3 TransitionTo(TEST4C_LOCAL_TO_ALIAS)`.", true)] / { trace("Transition action `` for TEST4_DECIDE to TEST4C_LOCAL_TO_ALIAS."); } TransitionTo(TEST4C_LOCAL_TO_ALIAS)
        if (____GilData_VarArgsToBool(____GilData_EchoStringBool("trace_guard(\"State TEST4_DECIDE: check behavior `EV3 TransitionTo(TEST4C_LOCAL_TO_ALIAS)`.\", true)")))
        {
            // Step 1: Exit states until we reach `TEST4_PARENT_CHILD_TRANSITIONS` state (Least Common Ancestor for transition).
            this.TEST4_DECIDE_exit();
            
            // Step 2: Transition action: `trace("Transition action `` for TEST4_DECIDE to TEST4C_LOCAL_TO_ALIAS.");`.
            ____GilData_EchoStringVoid("MainClass.Trace(\"Transition action `` for TEST4_DECIDE to TEST4C_LOCAL_TO_ALIAS.\");");
            
            // Step 3: Enter/move towards transition target `TEST4C_LOCAL_TO_ALIAS`.
            this.TEST4_B_AND_OTHERS_enter();
            this.TEST4C_LOCAL_TO_ALIAS_enter();
            
            // TEST4C_LOCAL_TO_ALIAS.<InitialState> behavior
            // uml: / { trace("Transition action `` for TEST4C_LOCAL_TO_ALIAS.<InitialState> to TEST4C_G."); } TransitionTo(TEST4C_G)
            {
                // Step 1: Exit states until we reach `TEST4C_LOCAL_TO_ALIAS` state (Least Common Ancestor for transition). Already at LCA, no exiting required.
                
                // Step 2: Transition action: `trace("Transition action `` for TEST4C_LOCAL_TO_ALIAS.<InitialState> to TEST4C_G.");`.
                ____GilData_EchoStringVoid("MainClass.Trace(\"Transition action `` for TEST4C_LOCAL_TO_ALIAS.<InitialState> to TEST4C_G.\");");
                
                // Step 3: Enter/move towards transition target `TEST4C_G`.
                this.TEST4C_G_enter();
                
                // Step 4: complete transition. Ends event dispatch. No other behaviors are checked.
                return;
            } // end of behavior for TEST4C_LOCAL_TO_ALIAS.<InitialState>
        } // end of behavior for TEST4_DECIDE
        
        // No ancestor handles this event.
    }
    
    private void TEST4_DECIDE_ev4()
    {
        // TEST4_DECIDE behavior
        // uml: EV4 [trace_guard("State TEST4_DECIDE: check behavior `EV4 TransitionTo(TEST4D_EXTERNAL)`.", true)] / { trace("Transition action `` for TEST4_DECIDE to TEST4D_EXTERNAL."); } TransitionTo(TEST4D_EXTERNAL)
        if (____GilData_VarArgsToBool(____GilData_EchoStringBool("trace_guard(\"State TEST4_DECIDE: check behavior `EV4 TransitionTo(TEST4D_EXTERNAL)`.\", true)")))
        {
            // Step 1: Exit states until we reach `TEST4_PARENT_CHILD_TRANSITIONS` state (Least Common Ancestor for transition).
            this.TEST4_DECIDE_exit();
            
            // Step 2: Transition action: `trace("Transition action `` for TEST4_DECIDE to TEST4D_EXTERNAL.");`.
            ____GilData_EchoStringVoid("MainClass.Trace(\"Transition action `` for TEST4_DECIDE to TEST4D_EXTERNAL.\");");
            
            // Step 3: Enter/move towards transition target `TEST4D_EXTERNAL`.
            this.TEST4_B_AND_OTHERS_enter();
            this.TEST4D_EXTERNAL_enter();
            
            // TEST4D_EXTERNAL.<InitialState> behavior
            // uml: / { trace("Transition action `` for TEST4D_EXTERNAL.<InitialState> to TEST4D_G."); } TransitionTo(TEST4D_G)
            {
                // Step 1: Exit states until we reach `TEST4D_EXTERNAL` state (Least Common Ancestor for transition). Already at LCA, no exiting required.
                
                // Step 2: Transition action: `trace("Transition action `` for TEST4D_EXTERNAL.<InitialState> to TEST4D_G.");`.
                ____GilData_EchoStringVoid("MainClass.Trace(\"Transition action `` for TEST4D_EXTERNAL.<InitialState> to TEST4D_G.\");");
                
                // Step 3: Enter/move towards transition target `TEST4D_G`.
                this.TEST4D_G_enter();
                
                // Step 4: complete transition. Ends event dispatch. No other behaviors are checked.
                return;
            } // end of behavior for TEST4D_EXTERNAL.<InitialState>
        } // end of behavior for TEST4_DECIDE
        
        // No ancestor handles this event.
    }
    
    
    ////////////////////////////////////////////////////////////////////////////////
    // event handlers for state TEST4_ROOT
    ////////////////////////////////////////////////////////////////////////////////
    
    private void TEST4_ROOT_enter()
    {
        this.stateId = StateId.TEST4_ROOT;
        
        // TEST4_ROOT behavior
        // uml: enter / { trace("Enter TEST4_ROOT."); }
        {
            // Step 1: execute action `trace("Enter TEST4_ROOT.");`
            ____GilData_EchoStringVoid("MainClass.Trace(\"Enter TEST4_ROOT.\");");
        } // end of behavior for TEST4_ROOT
        
        // TEST4_ROOT behavior
        // uml: enter [trace_guard("State TEST4_ROOT: check behavior `enter / { clear_output(); }`.", true)] / { clear_output(); }
        if (____GilData_VarArgsToBool(____GilData_EchoStringBool("trace_guard(\"State TEST4_ROOT: check behavior `enter / { clear_output(); }`.\", true)")))
        {
            // Step 1: execute action `clear_output();`
            ____GilData_EchoStringVoid("MainClass.Trace(\"IGNORE_OUTPUT_BEFORE_THIS\");");
        } // end of behavior for TEST4_ROOT
    }
    
    private void TEST4_ROOT_exit()
    {
        // TEST4_ROOT behavior
        // uml: exit / { trace("Exit TEST4_ROOT."); }
        {
            // Step 1: execute action `trace("Exit TEST4_ROOT.");`
            ____GilData_EchoStringVoid("MainClass.Trace(\"Exit TEST4_ROOT.\");");
        } // end of behavior for TEST4_ROOT
        
        this.stateId = StateId.TEST4_PARENT_CHILD_TRANSITIONS;
    }
    
    private void TEST4_ROOT_ev2()
    {
        // TEST4_ROOT behavior
        // uml: EV2 [trace_guard("State TEST4_ROOT: check behavior `EV2 TransitionTo(TEST4_S1)`.", true)] / { trace("Transition action `` for TEST4_ROOT to TEST4_S1."); } TransitionTo(TEST4_S1)
        if (____GilData_VarArgsToBool(____GilData_EchoStringBool("trace_guard(\"State TEST4_ROOT: check behavior `EV2 TransitionTo(TEST4_S1)`.\", true)")))
        {
            // Step 1: Exit states until we reach `TEST4_ROOT` state (Least Common Ancestor for transition).
            this.ExitUpToStateHandler(StateId.TEST4_ROOT);
            
            // Step 2: Transition action: `trace("Transition action `` for TEST4_ROOT to TEST4_S1.");`.
            ____GilData_EchoStringVoid("MainClass.Trace(\"Transition action `` for TEST4_ROOT to TEST4_S1.\");");
            
            // Step 3: Enter/move towards transition target `TEST4_S1`.
            this.TEST4_S1_enter();
            
            // Step 4: complete transition. Ends event dispatch. No other behaviors are checked.
            return;
        } // end of behavior for TEST4_ROOT
        
        // No ancestor handles this event.
    }
    
    private void TEST4_ROOT_ev3()
    {
        // TEST4_ROOT behavior
        // uml: EV3 [trace_guard("State TEST4_ROOT: check behavior `EV3 TransitionTo(TEST4_S10_1)`.", true)] / { trace("Transition action `` for TEST4_ROOT to TEST4_S10_1."); } TransitionTo(TEST4_S10_1)
        if (____GilData_VarArgsToBool(____GilData_EchoStringBool("trace_guard(\"State TEST4_ROOT: check behavior `EV3 TransitionTo(TEST4_S10_1)`.\", true)")))
        {
            // Step 1: Exit states until we reach `TEST4_ROOT` state (Least Common Ancestor for transition).
            this.ExitUpToStateHandler(StateId.TEST4_ROOT);
            
            // Step 2: Transition action: `trace("Transition action `` for TEST4_ROOT to TEST4_S10_1.");`.
            ____GilData_EchoStringVoid("MainClass.Trace(\"Transition action `` for TEST4_ROOT to TEST4_S10_1.\");");
            
            // Step 3: Enter/move towards transition target `TEST4_S10_1`.
            this.TEST4_S10_enter();
            this.TEST4_S10_1_enter();
            
            // Step 4: complete transition. Ends event dispatch. No other behaviors are checked.
            return;
        } // end of behavior for TEST4_ROOT
        
        // No ancestor handles this event.
    }
    
    private void TEST4_ROOT_ev4()
    {
        // TEST4_ROOT behavior
        // uml: EV4 [trace_guard("State TEST4_ROOT: check behavior `EV4 TransitionTo(TEST4_S20)`.", true)] / { trace("Transition action `` for TEST4_ROOT to TEST4_S20."); } TransitionTo(TEST4_S20)
        if (____GilData_VarArgsToBool(____GilData_EchoStringBool("trace_guard(\"State TEST4_ROOT: check behavior `EV4 TransitionTo(TEST4_S20)`.\", true)")))
        {
            // Step 1: Exit states until we reach `TEST4_ROOT` state (Least Common Ancestor for transition).
            this.ExitUpToStateHandler(StateId.TEST4_ROOT);
            
            // Step 2: Transition action: `trace("Transition action `` for TEST4_ROOT to TEST4_S20.");`.
            ____GilData_EchoStringVoid("MainClass.Trace(\"Transition action `` for TEST4_ROOT to TEST4_S20.\");");
            
            // Step 3: Enter/move towards transition target `TEST4_S20`.
            this.TEST4_S20_enter();
            
            // Finish transition by calling pseudo state transition function.
            this.TEST4_S20_InitialState_transition();
            return; // event processing immediately stops when a transition finishes. No other behaviors for this state are checked.
        } // end of behavior for TEST4_ROOT
        
        // No ancestor handles this event.
    }
    
    
    ////////////////////////////////////////////////////////////////////////////////
    // event handlers for state TEST4_S1
    ////////////////////////////////////////////////////////////////////////////////
    
    private void TEST4_S1_enter()
    {
        this.stateId = StateId.TEST4_S1;
        
        // TEST4_S1 behavior
        // uml: enter / { trace("Enter TEST4_S1."); }
        {
            // Step 1: execute action `trace("Enter TEST4_S1.");`
            ____GilData_EchoStringVoid("MainClass.Trace(\"Enter TEST4_S1.\");");
        } // end of behavior for TEST4_S1
    }
    
    private void TEST4_S1_exit()
    {
        // TEST4_S1 behavior
        // uml: exit / { trace("Exit TEST4_S1."); }
        {
            // Step 1: execute action `trace("Exit TEST4_S1.");`
            ____GilData_EchoStringVoid("MainClass.Trace(\"Exit TEST4_S1.\");");
        } // end of behavior for TEST4_S1
        
        this.stateId = StateId.TEST4_ROOT;
    }
    
    private void TEST4_S1_ev1()
    {
        // TEST4_S1 behavior
        // uml: EV1 [trace_guard("State TEST4_S1: check behavior `EV1 TransitionTo(TEST4_S2)`.", true)] / { trace("Transition action `` for TEST4_S1 to TEST4_S2."); } TransitionTo(TEST4_S2)
        if (____GilData_VarArgsToBool(____GilData_EchoStringBool("trace_guard(\"State TEST4_S1: check behavior `EV1 TransitionTo(TEST4_S2)`.\", true)")))
        {
            // Step 1: Exit states until we reach `TEST4_ROOT` state (Least Common Ancestor for transition).
            this.TEST4_S1_exit();
            
            // Step 2: Transition action: `trace("Transition action `` for TEST4_S1 to TEST4_S2.");`.
            ____GilData_EchoStringVoid("MainClass.Trace(\"Transition action `` for TEST4_S1 to TEST4_S2.\");");
            
            // Step 3: Enter/move towards transition target `TEST4_S2`.
            this.TEST4_S2_enter();
            
            // Step 4: complete transition. Ends event dispatch. No other behaviors are checked.
            return;
        } // end of behavior for TEST4_S1
        
        // No ancestor handles this event.
    }
    
    
    ////////////////////////////////////////////////////////////////////////////////
    // event handlers for state TEST4_S10
    ////////////////////////////////////////////////////////////////////////////////
    
    private void TEST4_S10_enter()
    {
        this.stateId = StateId.TEST4_S10;
        
        // TEST4_S10 behavior
        // uml: enter / { trace("Enter TEST4_S10."); }
        {
            // Step 1: execute action `trace("Enter TEST4_S10.");`
            ____GilData_EchoStringVoid("MainClass.Trace(\"Enter TEST4_S10.\");");
        } // end of behavior for TEST4_S10
    }
    
    private void TEST4_S10_exit()
    {
        // TEST4_S10 behavior
        // uml: exit / { trace("Exit TEST4_S10."); }
        {
            // Step 1: execute action `trace("Exit TEST4_S10.");`
            ____GilData_EchoStringVoid("MainClass.Trace(\"Exit TEST4_S10.\");");
        } // end of behavior for TEST4_S10
        
        this.stateId = StateId.TEST4_ROOT;
    }
    
    private void TEST4_S10_ev4()
    {
        bool consume_event = false;
        
        // TEST4_S10 behavior
        // uml: EV4 [trace_guard("State TEST4_S10: check behavior `EV4 TransitionTo(TEST4_S10)`.", true)] / { trace("Transition action `` for TEST4_S10 to TEST4_S10."); } TransitionTo(TEST4_S10)
        if (____GilData_VarArgsToBool(____GilData_EchoStringBool("trace_guard(\"State TEST4_S10: check behavior `EV4 TransitionTo(TEST4_S10)`.\", true)")))
        {
            // Step 1: Exit states until we reach `TEST4_ROOT` state (Least Common Ancestor for transition).
            this.ExitUpToStateHandler(StateId.TEST4_ROOT);
            
            // Step 2: Transition action: `trace("Transition action `` for TEST4_S10 to TEST4_S10.");`.
            ____GilData_EchoStringVoid("MainClass.Trace(\"Transition action `` for TEST4_S10 to TEST4_S10.\");");
            
            // Step 3: Enter/move towards transition target `TEST4_S10`.
            this.TEST4_S10_enter();
            
            // Step 4: complete transition. Ends event dispatch. No other behaviors are checked.
            return;
        } // end of behavior for TEST4_S10
        
        // Check if event has been consumed before calling ancestor handler.
        if (!consume_event)
        {
            this.TEST4_ROOT_ev4();
        }
    }
    
    
    ////////////////////////////////////////////////////////////////////////////////
    // event handlers for state TEST4_S10_1
    ////////////////////////////////////////////////////////////////////////////////
    
    private void TEST4_S10_1_enter()
    {
        this.stateId = StateId.TEST4_S10_1;
        
        // TEST4_S10_1 behavior
        // uml: enter / { trace("Enter TEST4_S10_1."); }
        {
            // Step 1: execute action `trace("Enter TEST4_S10_1.");`
            ____GilData_EchoStringVoid("MainClass.Trace(\"Enter TEST4_S10_1.\");");
        } // end of behavior for TEST4_S10_1
    }
    
    private void TEST4_S10_1_exit()
    {
        // TEST4_S10_1 behavior
        // uml: exit / { trace("Exit TEST4_S10_1."); }
        {
            // Step 1: execute action `trace("Exit TEST4_S10_1.");`
            ____GilData_EchoStringVoid("MainClass.Trace(\"Exit TEST4_S10_1.\");");
        } // end of behavior for TEST4_S10_1
        
        this.stateId = StateId.TEST4_S10;
    }
    
    
    ////////////////////////////////////////////////////////////////////////////////
    // event handlers for state TEST4_S2
    ////////////////////////////////////////////////////////////////////////////////
    
    private void TEST4_S2_enter()
    {
        this.stateId = StateId.TEST4_S2;
        
        // TEST4_S2 behavior
        // uml: enter / { trace("Enter TEST4_S2."); }
        {
            // Step 1: execute action `trace("Enter TEST4_S2.");`
            ____GilData_EchoStringVoid("MainClass.Trace(\"Enter TEST4_S2.\");");
        } // end of behavior for TEST4_S2
    }
    
    private void TEST4_S2_exit()
    {
        // TEST4_S2 behavior
        // uml: exit / { trace("Exit TEST4_S2."); }
        {
            // Step 1: execute action `trace("Exit TEST4_S2.");`
            ____GilData_EchoStringVoid("MainClass.Trace(\"Exit TEST4_S2.\");");
        } // end of behavior for TEST4_S2
        
        this.stateId = StateId.TEST4_ROOT;
    }
    
    private void TEST4_S2_ev1()
    {
        // TEST4_S2 behavior
        // uml: EV1 [trace_guard("State TEST4_S2: check behavior `EV1 TransitionTo(TEST4_S3)`.", true)] / { trace("Transition action `` for TEST4_S2 to TEST4_S3."); } TransitionTo(TEST4_S3)
        if (____GilData_VarArgsToBool(____GilData_EchoStringBool("trace_guard(\"State TEST4_S2: check behavior `EV1 TransitionTo(TEST4_S3)`.\", true)")))
        {
            // Step 1: Exit states until we reach `TEST4_ROOT` state (Least Common Ancestor for transition).
            this.TEST4_S2_exit();
            
            // Step 2: Transition action: `trace("Transition action `` for TEST4_S2 to TEST4_S3.");`.
            ____GilData_EchoStringVoid("MainClass.Trace(\"Transition action `` for TEST4_S2 to TEST4_S3.\");");
            
            // Step 3: Enter/move towards transition target `TEST4_S3`.
            this.TEST4_S3_enter();
            
            // Step 4: complete transition. Ends event dispatch. No other behaviors are checked.
            return;
        } // end of behavior for TEST4_S2
        
        // No ancestor handles this event.
    }
    
    
    ////////////////////////////////////////////////////////////////////////////////
    // event handlers for state TEST4_S20
    ////////////////////////////////////////////////////////////////////////////////
    
    private void TEST4_S20_enter()
    {
        this.stateId = StateId.TEST4_S20;
        
        // TEST4_S20 behavior
        // uml: enter / { trace("Enter TEST4_S20."); }
        {
            // Step 1: execute action `trace("Enter TEST4_S20.");`
            ____GilData_EchoStringVoid("MainClass.Trace(\"Enter TEST4_S20.\");");
        } // end of behavior for TEST4_S20
    }
    
    private void TEST4_S20_exit()
    {
        // TEST4_S20 behavior
        // uml: exit / { trace("Exit TEST4_S20."); }
        {
            // Step 1: execute action `trace("Exit TEST4_S20.");`
            ____GilData_EchoStringVoid("MainClass.Trace(\"Exit TEST4_S20.\");");
        } // end of behavior for TEST4_S20
        
        this.stateId = StateId.TEST4_ROOT;
    }
    
    private void TEST4_S20_ev4()
    {
        bool consume_event = false;
        
        // TEST4_S20 behavior
        // uml: EV4 [trace_guard("State TEST4_S20: check behavior `EV4 TransitionTo(TEST4_S20)`.", true)] / { trace("Transition action `` for TEST4_S20 to TEST4_S20."); } TransitionTo(TEST4_S20)
        if (____GilData_VarArgsToBool(____GilData_EchoStringBool("trace_guard(\"State TEST4_S20: check behavior `EV4 TransitionTo(TEST4_S20)`.\", true)")))
        {
            // Step 1: Exit states until we reach `TEST4_ROOT` state (Least Common Ancestor for transition).
            this.ExitUpToStateHandler(StateId.TEST4_ROOT);
            
            // Step 2: Transition action: `trace("Transition action `` for TEST4_S20 to TEST4_S20.");`.
            ____GilData_EchoStringVoid("MainClass.Trace(\"Transition action `` for TEST4_S20 to TEST4_S20.\");");
            
            // Step 3: Enter/move towards transition target `TEST4_S20`.
            this.TEST4_S20_enter();
            
            // Finish transition by calling pseudo state transition function.
            this.TEST4_S20_InitialState_transition();
            return; // event processing immediately stops when a transition finishes. No other behaviors for this state are checked.
        } // end of behavior for TEST4_S20
        
        // Check if event has been consumed before calling ancestor handler.
        if (!consume_event)
        {
            this.TEST4_ROOT_ev4();
        }
    }
    
    private void TEST4_S20_InitialState_transition()
    {
        // TEST4_S20.<InitialState> behavior
        // uml: / { trace("Transition action `` for TEST4_S20.<InitialState> to TEST4_S20_1."); } TransitionTo(TEST4_S20_1)
        {
            // Step 1: Exit states until we reach `TEST4_S20` state (Least Common Ancestor for transition). Already at LCA, no exiting required.
            
            // Step 2: Transition action: `trace("Transition action `` for TEST4_S20.<InitialState> to TEST4_S20_1.");`.
            ____GilData_EchoStringVoid("MainClass.Trace(\"Transition action `` for TEST4_S20.<InitialState> to TEST4_S20_1.\");");
            
            // Step 3: Enter/move towards transition target `TEST4_S20_1`.
            this.TEST4_S20_1_enter();
            
            // Step 4: complete transition. Ends event dispatch. No other behaviors are checked.
            return;
        } // end of behavior for TEST4_S20.<InitialState>
    }
    
    
    ////////////////////////////////////////////////////////////////////////////////
    // event handlers for state TEST4_S20_1
    ////////////////////////////////////////////////////////////////////////////////
    
    private void TEST4_S20_1_enter()
    {
        this.stateId = StateId.TEST4_S20_1;
        
        // TEST4_S20_1 behavior
        // uml: enter / { trace("Enter TEST4_S20_1."); }
        {
            // Step 1: execute action `trace("Enter TEST4_S20_1.");`
            ____GilData_EchoStringVoid("MainClass.Trace(\"Enter TEST4_S20_1.\");");
        } // end of behavior for TEST4_S20_1
    }
    
    private void TEST4_S20_1_exit()
    {
        // TEST4_S20_1 behavior
        // uml: exit / { trace("Exit TEST4_S20_1."); }
        {
            // Step 1: execute action `trace("Exit TEST4_S20_1.");`
            ____GilData_EchoStringVoid("MainClass.Trace(\"Exit TEST4_S20_1.\");");
        } // end of behavior for TEST4_S20_1
        
        this.stateId = StateId.TEST4_S20;
    }
    
    
    ////////////////////////////////////////////////////////////////////////////////
    // event handlers for state TEST4_S3
    ////////////////////////////////////////////////////////////////////////////////
    
    private void TEST4_S3_enter()
    {
        this.stateId = StateId.TEST4_S3;
        
        // TEST4_S3 behavior
        // uml: enter / { trace("Enter TEST4_S3."); }
        {
            // Step 1: execute action `trace("Enter TEST4_S3.");`
            ____GilData_EchoStringVoid("MainClass.Trace(\"Enter TEST4_S3.\");");
        } // end of behavior for TEST4_S3
    }
    
    private void TEST4_S3_exit()
    {
        // TEST4_S3 behavior
        // uml: exit / { trace("Exit TEST4_S3."); }
        {
            // Step 1: execute action `trace("Exit TEST4_S3.");`
            ____GilData_EchoStringVoid("MainClass.Trace(\"Exit TEST4_S3.\");");
        } // end of behavior for TEST4_S3
        
        this.stateId = StateId.TEST4_ROOT;
    }
    
    private void TEST4_S3_ev1()
    {
        // TEST4_S3 behavior
        // uml: EV1 [trace_guard("State TEST4_S3: check behavior `EV1 TransitionTo(TEST4_ROOT)`.", true)] / { trace("Transition action `` for TEST4_S3 to TEST4_ROOT."); } TransitionTo(TEST4_ROOT)
        if (____GilData_VarArgsToBool(____GilData_EchoStringBool("trace_guard(\"State TEST4_S3: check behavior `EV1 TransitionTo(TEST4_ROOT)`.\", true)")))
        {
            // Step 1: Exit states until we reach `TEST4_ROOT` state (Least Common Ancestor for transition).
            this.TEST4_S3_exit();
            
            // Step 2: Transition action: `trace("Transition action `` for TEST4_S3 to TEST4_ROOT.");`.
            ____GilData_EchoStringVoid("MainClass.Trace(\"Transition action `` for TEST4_S3 to TEST4_ROOT.\");");
            
            // Step 3: Enter/move towards transition target `TEST4_ROOT`.
            // Already in target. No entering required.
            // Step 4: complete transition. Ends event dispatch. No other behaviors are checked.
            return;
        } // end of behavior for TEST4_S3
        
        // No ancestor handles this event.
    }
    
    
    ////////////////////////////////////////////////////////////////////////////////
    // event handlers for state TEST5_PARENT_CHILD_TRANSITIONS_ALIAS
    ////////////////////////////////////////////////////////////////////////////////
    
    private void TEST5_PARENT_CHILD_TRANSITIONS_ALIAS_enter()
    {
        this.stateId = StateId.TEST5_PARENT_CHILD_TRANSITIONS_ALIAS;
        
        // TEST5_PARENT_CHILD_TRANSITIONS_ALIAS behavior
        // uml: enter / { trace("Enter TEST5_PARENT_CHILD_TRANSITIONS_ALIAS."); }
        {
            // Step 1: execute action `trace("Enter TEST5_PARENT_CHILD_TRANSITIONS_ALIAS.");`
            ____GilData_EchoStringVoid("MainClass.Trace(\"Enter TEST5_PARENT_CHILD_TRANSITIONS_ALIAS.\");");
        } // end of behavior for TEST5_PARENT_CHILD_TRANSITIONS_ALIAS
    }
    
    private void TEST5_PARENT_CHILD_TRANSITIONS_ALIAS_exit()
    {
        // TEST5_PARENT_CHILD_TRANSITIONS_ALIAS behavior
        // uml: exit / { trace("Exit TEST5_PARENT_CHILD_TRANSITIONS_ALIAS."); }
        {
            // Step 1: execute action `trace("Exit TEST5_PARENT_CHILD_TRANSITIONS_ALIAS.");`
            ____GilData_EchoStringVoid("MainClass.Trace(\"Exit TEST5_PARENT_CHILD_TRANSITIONS_ALIAS.\");");
        } // end of behavior for TEST5_PARENT_CHILD_TRANSITIONS_ALIAS
        
        this.stateId = StateId.ROOT;
    }
    
    
    ////////////////////////////////////////////////////////////////////////////////
    // event handlers for state TEST5_ROOT
    ////////////////////////////////////////////////////////////////////////////////
    
    private void TEST5_ROOT_enter()
    {
        this.stateId = StateId.TEST5_ROOT;
        
        // TEST5_ROOT behavior
        // uml: enter / { trace("Enter TEST5_ROOT."); }
        {
            // Step 1: execute action `trace("Enter TEST5_ROOT.");`
            ____GilData_EchoStringVoid("MainClass.Trace(\"Enter TEST5_ROOT.\");");
        } // end of behavior for TEST5_ROOT
        
        // TEST5_ROOT behavior
        // uml: enter [trace_guard("State TEST5_ROOT: check behavior `enter / { clear_output(); }`.", true)] / { clear_output(); }
        if (____GilData_VarArgsToBool(____GilData_EchoStringBool("trace_guard(\"State TEST5_ROOT: check behavior `enter / { clear_output(); }`.\", true)")))
        {
            // Step 1: execute action `clear_output();`
            ____GilData_EchoStringVoid("MainClass.Trace(\"IGNORE_OUTPUT_BEFORE_THIS\");");
        } // end of behavior for TEST5_ROOT
    }
    
    private void TEST5_ROOT_exit()
    {
        // TEST5_ROOT behavior
        // uml: exit / { trace("Exit TEST5_ROOT."); }
        {
            // Step 1: execute action `trace("Exit TEST5_ROOT.");`
            ____GilData_EchoStringVoid("MainClass.Trace(\"Exit TEST5_ROOT.\");");
        } // end of behavior for TEST5_ROOT
        
        this.stateId = StateId.TEST5_PARENT_CHILD_TRANSITIONS_ALIAS;
    }
    
    private void TEST5_ROOT_ev2()
    {
        // TEST5_ROOT behavior
        // uml: EV2 [trace_guard("State TEST5_ROOT: check behavior `EV2 TransitionTo(TEST5_S1)`.", true)] / { trace("Transition action `` for TEST5_ROOT to TEST5_S1."); } TransitionTo(TEST5_S1)
        if (____GilData_VarArgsToBool(____GilData_EchoStringBool("trace_guard(\"State TEST5_ROOT: check behavior `EV2 TransitionTo(TEST5_S1)`.\", true)")))
        {
            // Step 1: Exit states until we reach `TEST5_ROOT` state (Least Common Ancestor for transition).
            this.ExitUpToStateHandler(StateId.TEST5_ROOT);
            
            // Step 2: Transition action: `trace("Transition action `` for TEST5_ROOT to TEST5_S1.");`.
            ____GilData_EchoStringVoid("MainClass.Trace(\"Transition action `` for TEST5_ROOT to TEST5_S1.\");");
            
            // Step 3: Enter/move towards transition target `TEST5_S1`.
            this.TEST5_S1_enter();
            
            // Step 4: complete transition. Ends event dispatch. No other behaviors are checked.
            return;
        } // end of behavior for TEST5_ROOT
        
        // No ancestor handles this event.
    }
    
    
    ////////////////////////////////////////////////////////////////////////////////
    // event handlers for state TEST5_S1
    ////////////////////////////////////////////////////////////////////////////////
    
    private void TEST5_S1_enter()
    {
        this.stateId = StateId.TEST5_S1;
        
        // TEST5_S1 behavior
        // uml: enter / { trace("Enter TEST5_S1."); }
        {
            // Step 1: execute action `trace("Enter TEST5_S1.");`
            ____GilData_EchoStringVoid("MainClass.Trace(\"Enter TEST5_S1.\");");
        } // end of behavior for TEST5_S1
    }
    
    private void TEST5_S1_exit()
    {
        // TEST5_S1 behavior
        // uml: exit / { trace("Exit TEST5_S1."); }
        {
            // Step 1: execute action `trace("Exit TEST5_S1.");`
            ____GilData_EchoStringVoid("MainClass.Trace(\"Exit TEST5_S1.\");");
        } // end of behavior for TEST5_S1
        
        this.stateId = StateId.TEST5_ROOT;
    }
    
    private void TEST5_S1_ev1()
    {
        // TEST5_S1 behavior
        // uml: EV1 [trace_guard("State TEST5_S1: check behavior `EV1 TransitionTo(TEST5_S2)`.", true)] / { trace("Transition action `` for TEST5_S1 to TEST5_S2."); } TransitionTo(TEST5_S2)
        if (____GilData_VarArgsToBool(____GilData_EchoStringBool("trace_guard(\"State TEST5_S1: check behavior `EV1 TransitionTo(TEST5_S2)`.\", true)")))
        {
            // Step 1: Exit states until we reach `TEST5_ROOT` state (Least Common Ancestor for transition).
            this.TEST5_S1_exit();
            
            // Step 2: Transition action: `trace("Transition action `` for TEST5_S1 to TEST5_S2.");`.
            ____GilData_EchoStringVoid("MainClass.Trace(\"Transition action `` for TEST5_S1 to TEST5_S2.\");");
            
            // Step 3: Enter/move towards transition target `TEST5_S2`.
            this.TEST5_S2_enter();
            
            // Step 4: complete transition. Ends event dispatch. No other behaviors are checked.
            return;
        } // end of behavior for TEST5_S1
        
        // No ancestor handles this event.
    }
    
    
    ////////////////////////////////////////////////////////////////////////////////
    // event handlers for state TEST5_S2
    ////////////////////////////////////////////////////////////////////////////////
    
    private void TEST5_S2_enter()
    {
        this.stateId = StateId.TEST5_S2;
        
        // TEST5_S2 behavior
        // uml: enter / { trace("Enter TEST5_S2."); }
        {
            // Step 1: execute action `trace("Enter TEST5_S2.");`
            ____GilData_EchoStringVoid("MainClass.Trace(\"Enter TEST5_S2.\");");
        } // end of behavior for TEST5_S2
    }
    
    private void TEST5_S2_exit()
    {
        // TEST5_S2 behavior
        // uml: exit / { trace("Exit TEST5_S2."); }
        {
            // Step 1: execute action `trace("Exit TEST5_S2.");`
            ____GilData_EchoStringVoid("MainClass.Trace(\"Exit TEST5_S2.\");");
        } // end of behavior for TEST5_S2
        
        this.stateId = StateId.TEST5_ROOT;
    }
    
    private void TEST5_S2_ev1()
    {
        // TEST5_S2 behavior
        // uml: EV1 [trace_guard("State TEST5_S2: check behavior `EV1 TransitionTo(TEST5_S3)`.", true)] / { trace("Transition action `` for TEST5_S2 to TEST5_S3."); } TransitionTo(TEST5_S3)
        if (____GilData_VarArgsToBool(____GilData_EchoStringBool("trace_guard(\"State TEST5_S2: check behavior `EV1 TransitionTo(TEST5_S3)`.\", true)")))
        {
            // Step 1: Exit states until we reach `TEST5_ROOT` state (Least Common Ancestor for transition).
            this.TEST5_S2_exit();
            
            // Step 2: Transition action: `trace("Transition action `` for TEST5_S2 to TEST5_S3.");`.
            ____GilData_EchoStringVoid("MainClass.Trace(\"Transition action `` for TEST5_S2 to TEST5_S3.\");");
            
            // Step 3: Enter/move towards transition target `TEST5_S3`.
            this.TEST5_S3_enter();
            
            // Step 4: complete transition. Ends event dispatch. No other behaviors are checked.
            return;
        } // end of behavior for TEST5_S2
        
        // No ancestor handles this event.
    }
    
    
    ////////////////////////////////////////////////////////////////////////////////
    // event handlers for state TEST5_S3
    ////////////////////////////////////////////////////////////////////////////////
    
    private void TEST5_S3_enter()
    {
        this.stateId = StateId.TEST5_S3;
        
        // TEST5_S3 behavior
        // uml: enter / { trace("Enter TEST5_S3."); }
        {
            // Step 1: execute action `trace("Enter TEST5_S3.");`
            ____GilData_EchoStringVoid("MainClass.Trace(\"Enter TEST5_S3.\");");
        } // end of behavior for TEST5_S3
    }
    
    private void TEST5_S3_exit()
    {
        // TEST5_S3 behavior
        // uml: exit / { trace("Exit TEST5_S3."); }
        {
            // Step 1: execute action `trace("Exit TEST5_S3.");`
            ____GilData_EchoStringVoid("MainClass.Trace(\"Exit TEST5_S3.\");");
        } // end of behavior for TEST5_S3
        
        this.stateId = StateId.TEST5_ROOT;
    }
    
    private void TEST5_S3_ev1()
    {
        // TEST5_S3 behavior
        // uml: EV1 [trace_guard("State TEST5_S3: check behavior `EV1 TransitionTo(TEST5_ROOT)`.", true)] / { trace("Transition action `` for TEST5_S3 to TEST5_ROOT."); } TransitionTo(TEST5_ROOT)
        if (____GilData_VarArgsToBool(____GilData_EchoStringBool("trace_guard(\"State TEST5_S3: check behavior `EV1 TransitionTo(TEST5_ROOT)`.\", true)")))
        {
            // Step 1: Exit states until we reach `TEST5_ROOT` state (Least Common Ancestor for transition).
            this.TEST5_S3_exit();
            
            // Step 2: Transition action: `trace("Transition action `` for TEST5_S3 to TEST5_ROOT.");`.
            ____GilData_EchoStringVoid("MainClass.Trace(\"Transition action `` for TEST5_S3 to TEST5_ROOT.\");");
            
            // Step 3: Enter/move towards transition target `TEST5_ROOT`.
            // Already in target. No entering required.
            // Step 4: complete transition. Ends event dispatch. No other behaviors are checked.
            return;
        } // end of behavior for TEST5_S3
        
        // No ancestor handles this event.
    }
    
    
    ////////////////////////////////////////////////////////////////////////////////
    // event handlers for state TEST6_VARS_EXPANSIONS
    ////////////////////////////////////////////////////////////////////////////////
    
    private void TEST6_VARS_EXPANSIONS_enter()
    {
        this.stateId = StateId.TEST6_VARS_EXPANSIONS;
        
        // TEST6_VARS_EXPANSIONS behavior
        // uml: enter / { trace("Enter TEST6_VARS_EXPANSIONS."); }
        {
            // Step 1: execute action `trace("Enter TEST6_VARS_EXPANSIONS.");`
            ____GilData_EchoStringVoid("MainClass.Trace(\"Enter TEST6_VARS_EXPANSIONS.\");");
        } // end of behavior for TEST6_VARS_EXPANSIONS
    }
    
    private void TEST6_VARS_EXPANSIONS_exit()
    {
        // TEST6_VARS_EXPANSIONS behavior
        // uml: exit / { trace("Exit TEST6_VARS_EXPANSIONS."); }
        {
            // Step 1: execute action `trace("Exit TEST6_VARS_EXPANSIONS.");`
            ____GilData_EchoStringVoid("MainClass.Trace(\"Exit TEST6_VARS_EXPANSIONS.\");");
        } // end of behavior for TEST6_VARS_EXPANSIONS
        
        this.stateId = StateId.ROOT;
    }
    
    
    ////////////////////////////////////////////////////////////////////////////////
    // event handlers for state TEST6_ROOT
    ////////////////////////////////////////////////////////////////////////////////
    
    private void TEST6_ROOT_enter()
    {
        this.stateId = StateId.TEST6_ROOT;
        
        // TEST6_ROOT behavior
        // uml: enter / { trace("Enter TEST6_ROOT."); }
        {
            // Step 1: execute action `trace("Enter TEST6_ROOT.");`
            ____GilData_EchoStringVoid("MainClass.Trace(\"Enter TEST6_ROOT.\");");
        } // end of behavior for TEST6_ROOT
    }
    
    private void TEST6_ROOT_exit()
    {
        // TEST6_ROOT behavior
        // uml: exit / { trace("Exit TEST6_ROOT."); }
        {
            // Step 1: execute action `trace("Exit TEST6_ROOT.");`
            ____GilData_EchoStringVoid("MainClass.Trace(\"Exit TEST6_ROOT.\");");
        } // end of behavior for TEST6_ROOT
        
        this.stateId = StateId.TEST6_VARS_EXPANSIONS;
    }
    
    
    ////////////////////////////////////////////////////////////////////////////////
    // event handlers for state AUTO_VAR_TEST
    ////////////////////////////////////////////////////////////////////////////////
    
    private void AUTO_VAR_TEST_enter()
    {
        this.stateId = StateId.AUTO_VAR_TEST;
        
        // AUTO_VAR_TEST behavior
        // uml: enter / { trace("Enter AUTO_VAR_TEST."); }
        {
            // Step 1: execute action `trace("Enter AUTO_VAR_TEST.");`
            ____GilData_EchoStringVoid("MainClass.Trace(\"Enter AUTO_VAR_TEST.\");");
        } // end of behavior for AUTO_VAR_TEST
    }
    
    private void AUTO_VAR_TEST_exit()
    {
        // AUTO_VAR_TEST behavior
        // uml: exit / { trace("Exit AUTO_VAR_TEST."); }
        {
            // Step 1: execute action `trace("Exit AUTO_VAR_TEST.");`
            ____GilData_EchoStringVoid("MainClass.Trace(\"Exit AUTO_VAR_TEST.\");");
        } // end of behavior for AUTO_VAR_TEST
        
        this.stateId = StateId.TEST6_ROOT;
    }
    
    
    ////////////////////////////////////////////////////////////////////////////////
    // event handlers for state AUTO_VAR_TEST__S1
    ////////////////////////////////////////////////////////////////////////////////
    
    private void AUTO_VAR_TEST__S1_enter()
    {
        this.stateId = StateId.AUTO_VAR_TEST__S1;
        
        // AUTO_VAR_TEST__S1 behavior
        // uml: enter / { trace("Enter AUTO_VAR_TEST__S1."); }
        {
            // Step 1: execute action `trace("Enter AUTO_VAR_TEST__S1.");`
            ____GilData_EchoStringVoid("MainClass.Trace(\"Enter AUTO_VAR_TEST__S1.\");");
        } // end of behavior for AUTO_VAR_TEST__S1
        
        // AUTO_VAR_TEST__S1 behavior
        // uml: enter [trace_guard("State AUTO_VAR_TEST__S1: check behavior `enter / { clear_output(); }`.", true)] / { clear_output(); }
        if (____GilData_VarArgsToBool(____GilData_EchoStringBool("trace_guard(\"State AUTO_VAR_TEST__S1: check behavior `enter / { clear_output(); }`.\", true)")))
        {
            // Step 1: execute action `clear_output();`
            ____GilData_EchoStringVoid("MainClass.Trace(\"IGNORE_OUTPUT_BEFORE_THIS\");");
        } // end of behavior for AUTO_VAR_TEST__S1
    }
    
    private void AUTO_VAR_TEST__S1_exit()
    {
        // AUTO_VAR_TEST__S1 behavior
        // uml: exit / { trace("Exit AUTO_VAR_TEST__S1."); }
        {
            // Step 1: execute action `trace("Exit AUTO_VAR_TEST__S1.");`
            ____GilData_EchoStringVoid("MainClass.Trace(\"Exit AUTO_VAR_TEST__S1.\");");
        } // end of behavior for AUTO_VAR_TEST__S1
        
        this.stateId = StateId.AUTO_VAR_TEST;
    }
    
    private void AUTO_VAR_TEST__S1_ev1()
    {
        // AUTO_VAR_TEST__S1 behavior
        // uml: 1. EV1 [trace_guard("State AUTO_VAR_TEST__S1: check behavior `1. EV1 / { auto_var_1++; }`.", true)] / { auto_var_1++; }
        if (____GilData_VarArgsToBool(____GilData_EchoStringBool("trace_guard(\"State AUTO_VAR_TEST__S1: check behavior `1. EV1 / { auto_var_1++; }`.\", true)")))
        {
            // Step 1: execute action `auto_var_1++;`
            ____GilData_EchoStringVoid("this.vars.auto_var_1++;");
        } // end of behavior for AUTO_VAR_TEST__S1
        
        // AUTO_VAR_TEST__S1 behavior
        // uml: 2. EV1 [trace_guard("State AUTO_VAR_TEST__S1: check behavior `2. EV1 [auto_var_1 == 2] TransitionTo(AUTO_VAR_TEST__S2)`.", auto_var_1 == 2)] / { trace("Transition action `` for AUTO_VAR_TEST__S1 to AUTO_VAR_TEST__S2."); } TransitionTo(AUTO_VAR_TEST__S2)
        if (____GilData_VarArgsToBool(____GilData_EchoStringBool("trace_guard(\"State AUTO_VAR_TEST__S1: check behavior `2. EV1 [auto_var_1 == 2] TransitionTo(AUTO_VAR_TEST__S2)`.\", this.vars.auto_var_1 == 2)")))
        {
            // Step 1: Exit states until we reach `AUTO_VAR_TEST` state (Least Common Ancestor for transition).
            this.AUTO_VAR_TEST__S1_exit();
            
            // Step 2: Transition action: `trace("Transition action `` for AUTO_VAR_TEST__S1 to AUTO_VAR_TEST__S2.");`.
            ____GilData_EchoStringVoid("MainClass.Trace(\"Transition action `` for AUTO_VAR_TEST__S1 to AUTO_VAR_TEST__S2.\");");
            
            // Step 3: Enter/move towards transition target `AUTO_VAR_TEST__S2`.
            this.AUTO_VAR_TEST__S2_enter();
            
            // Step 4: complete transition. Ends event dispatch. No other behaviors are checked.
            return;
        } // end of behavior for AUTO_VAR_TEST__S1
        
        // No ancestor handles this event.
    }
    
    
    ////////////////////////////////////////////////////////////////////////////////
    // event handlers for state AUTO_VAR_TEST__S2
    ////////////////////////////////////////////////////////////////////////////////
    
    private void AUTO_VAR_TEST__S2_enter()
    {
        this.stateId = StateId.AUTO_VAR_TEST__S2;
        
        // AUTO_VAR_TEST__S2 behavior
        // uml: enter / { trace("Enter AUTO_VAR_TEST__S2."); }
        {
            // Step 1: execute action `trace("Enter AUTO_VAR_TEST__S2.");`
            ____GilData_EchoStringVoid("MainClass.Trace(\"Enter AUTO_VAR_TEST__S2.\");");
        } // end of behavior for AUTO_VAR_TEST__S2
    }
    
    private void AUTO_VAR_TEST__S2_exit()
    {
        // AUTO_VAR_TEST__S2 behavior
        // uml: exit / { trace("Exit AUTO_VAR_TEST__S2."); }
        {
            // Step 1: execute action `trace("Exit AUTO_VAR_TEST__S2.");`
            ____GilData_EchoStringVoid("MainClass.Trace(\"Exit AUTO_VAR_TEST__S2.\");");
        } // end of behavior for AUTO_VAR_TEST__S2
        
        this.stateId = StateId.AUTO_VAR_TEST;
    }
    
    
    ////////////////////////////////////////////////////////////////////////////////
    // event handlers for state META_EXPANSIONS
    ////////////////////////////////////////////////////////////////////////////////
    
    private void META_EXPANSIONS_enter()
    {
        this.stateId = StateId.META_EXPANSIONS;
        
        // META_EXPANSIONS behavior
        // uml: enter / { trace("Enter META_EXPANSIONS."); }
        {
            // Step 1: execute action `trace("Enter META_EXPANSIONS.");`
            ____GilData_EchoStringVoid("MainClass.Trace(\"Enter META_EXPANSIONS.\");");
        } // end of behavior for META_EXPANSIONS
    }
    
    private void META_EXPANSIONS_exit()
    {
        // META_EXPANSIONS behavior
        // uml: exit / { trace("Exit META_EXPANSIONS."); }
        {
            // Step 1: execute action `trace("Exit META_EXPANSIONS.");`
            ____GilData_EchoStringVoid("MainClass.Trace(\"Exit META_EXPANSIONS.\");");
        } // end of behavior for META_EXPANSIONS
        
        this.stateId = StateId.TEST6_ROOT;
    }
    
    private void META_EXPANSIONS_ChoicePoint_2__transition()
    {
        // META_EXPANSIONS.<ChoicePoint>(2) behavior
        // uml: / { trace("Transition action `trace_meta();` for META_EXPANSIONS.<ChoicePoint>(2) to S5.");\ntrace_meta(); } TransitionTo(S5)
        {
            // Step 1: Exit states until we reach `META_EXPANSIONS` state (Least Common Ancestor for transition). Already at LCA, no exiting required.
            
            // Step 2: Transition action: `trace("Transition action `trace_meta();` for META_EXPANSIONS.<ChoicePoint>(2) to S5.");\ntrace_meta();`.
            ____GilData_EchoStringVoid("MainClass.Trace(\"Transition action `trace_meta();` for META_EXPANSIONS.<ChoicePoint>(2) to S5.\");");
            ____GilData_EchoStringVoid("MainClass.Trace(\"META: State: META_EXPANSIONS, trigger: , behavior vertex: META_EXPANSIONS.<ChoicePoint>(2)\");");
            
            // Step 3: Enter/move towards transition target `S5`.
            this.S5_enter();
            
            // Step 4: complete transition. Ends event dispatch. No other behaviors are checked.
            return;
        } // end of behavior for META_EXPANSIONS.<ChoicePoint>(2)
        
        // unreachable behavior: `else / { trace("Transition action `trace_meta();` for META_EXPANSIONS.<ChoicePoint>(2) to S4.");\ntrace_meta(); } TransitionTo(S4)` due to unconditional transition above
    }
    
    
    ////////////////////////////////////////////////////////////////////////////////
    // event handlers for state META_EXPANSIONS__S1
    ////////////////////////////////////////////////////////////////////////////////
    
    private void META_EXPANSIONS__S1_enter()
    {
        this.stateId = StateId.META_EXPANSIONS__S1;
        
        // META_EXPANSIONS__S1 behavior
        // uml: enter / { trace("Enter META_EXPANSIONS__S1."); }
        {
            // Step 1: execute action `trace("Enter META_EXPANSIONS__S1.");`
            ____GilData_EchoStringVoid("MainClass.Trace(\"Enter META_EXPANSIONS__S1.\");");
        } // end of behavior for META_EXPANSIONS__S1
        
        // META_EXPANSIONS__S1 behavior
        // uml: enter [trace_guard("State META_EXPANSIONS__S1: check behavior `enter / { clear_output(); }`.", true)] / { clear_output(); }
        if (____GilData_VarArgsToBool(____GilData_EchoStringBool("trace_guard(\"State META_EXPANSIONS__S1: check behavior `enter / { clear_output(); }`.\", true)")))
        {
            // Step 1: execute action `clear_output();`
            ____GilData_EchoStringVoid("MainClass.Trace(\"IGNORE_OUTPUT_BEFORE_THIS\");");
        } // end of behavior for META_EXPANSIONS__S1
    }
    
    private void META_EXPANSIONS__S1_exit()
    {
        // META_EXPANSIONS__S1 behavior
        // uml: exit / { trace("Exit META_EXPANSIONS__S1."); }
        {
            // Step 1: execute action `trace("Exit META_EXPANSIONS__S1.");`
            ____GilData_EchoStringVoid("MainClass.Trace(\"Exit META_EXPANSIONS__S1.\");");
        } // end of behavior for META_EXPANSIONS__S1
        
        this.stateId = StateId.META_EXPANSIONS;
    }
    
    private void META_EXPANSIONS__S1_ev1()
    {
        // META_EXPANSIONS__S1 behavior
        // uml: EV1 [trace_guard("State META_EXPANSIONS__S1: check behavior `EV1 / { trace_meta(); } TransitionTo(META_EXPANSIONS__S2)`.", true)] / { trace("Transition action `trace_meta();` for META_EXPANSIONS__S1 to META_EXPANSIONS__S2.");\ntrace_meta(); } TransitionTo(META_EXPANSIONS__S2)
        if (____GilData_VarArgsToBool(____GilData_EchoStringBool("trace_guard(\"State META_EXPANSIONS__S1: check behavior `EV1 / { trace_meta(); } TransitionTo(META_EXPANSIONS__S2)`.\", true)")))
        {
            // Step 1: Exit states until we reach `META_EXPANSIONS` state (Least Common Ancestor for transition).
            this.META_EXPANSIONS__S1_exit();
            
            // Step 2: Transition action: `trace("Transition action `trace_meta();` for META_EXPANSIONS__S1 to META_EXPANSIONS__S2.");\ntrace_meta();`.
            ____GilData_EchoStringVoid("MainClass.Trace(\"Transition action `trace_meta();` for META_EXPANSIONS__S1 to META_EXPANSIONS__S2.\");");
            ____GilData_EchoStringVoid("MainClass.Trace(\"META: State: META_EXPANSIONS__S1, trigger: ev1, behavior vertex: META_EXPANSIONS__S1\");");
            
            // Step 3: Enter/move towards transition target `META_EXPANSIONS__S2`.
            this.META_EXPANSIONS__S2_enter();
            
            // Step 4: complete transition. Ends event dispatch. No other behaviors are checked.
            return;
        } // end of behavior for META_EXPANSIONS__S1
        
        // No ancestor handles this event.
    }
    
    
    ////////////////////////////////////////////////////////////////////////////////
    // event handlers for state META_EXPANSIONS__S2
    ////////////////////////////////////////////////////////////////////////////////
    
    private void META_EXPANSIONS__S2_enter()
    {
        this.stateId = StateId.META_EXPANSIONS__S2;
        
        // META_EXPANSIONS__S2 behavior
        // uml: enter / { trace("Enter META_EXPANSIONS__S2."); }
        {
            // Step 1: execute action `trace("Enter META_EXPANSIONS__S2.");`
            ____GilData_EchoStringVoid("MainClass.Trace(\"Enter META_EXPANSIONS__S2.\");");
        } // end of behavior for META_EXPANSIONS__S2
        
        // META_EXPANSIONS__S2 behavior
        // uml: enter [trace_guard("State META_EXPANSIONS__S2: check behavior `enter / { trace_meta(); }`.", true)] / { trace_meta(); }
        if (____GilData_VarArgsToBool(____GilData_EchoStringBool("trace_guard(\"State META_EXPANSIONS__S2: check behavior `enter / { trace_meta(); }`.\", true)")))
        {
            // Step 1: execute action `trace_meta();`
            ____GilData_EchoStringVoid("MainClass.Trace(\"META: State: META_EXPANSIONS__S2, trigger: enter, behavior vertex: META_EXPANSIONS__S2\");");
        } // end of behavior for META_EXPANSIONS__S2
    }
    
    private void META_EXPANSIONS__S2_exit()
    {
        // META_EXPANSIONS__S2 behavior
        // uml: exit / { trace("Exit META_EXPANSIONS__S2."); }
        {
            // Step 1: execute action `trace("Exit META_EXPANSIONS__S2.");`
            ____GilData_EchoStringVoid("MainClass.Trace(\"Exit META_EXPANSIONS__S2.\");");
        } // end of behavior for META_EXPANSIONS__S2
        
        this.stateId = StateId.META_EXPANSIONS;
    }
    
    private void META_EXPANSIONS__S2_ev1()
    {
        // META_EXPANSIONS__S2 behavior
        // uml: EV1 [trace_guard("State META_EXPANSIONS__S2: check behavior `EV1 / { trace_meta(); } TransitionTo(META_EXPANSIONS.<ChoicePoint>(1))`.", true)] / { trace("Transition action `trace_meta();` for META_EXPANSIONS__S2 to META_EXPANSIONS.<ChoicePoint>(1).");\ntrace_meta(); } TransitionTo(META_EXPANSIONS.<ChoicePoint>(1))
        if (____GilData_VarArgsToBool(____GilData_EchoStringBool("trace_guard(\"State META_EXPANSIONS__S2: check behavior `EV1 / { trace_meta(); } TransitionTo(META_EXPANSIONS.<ChoicePoint>(1))`.\", true)")))
        {
            // Step 1: Exit states until we reach `META_EXPANSIONS` state (Least Common Ancestor for transition).
            this.META_EXPANSIONS__S2_exit();
            
            // Step 2: Transition action: `trace("Transition action `trace_meta();` for META_EXPANSIONS__S2 to META_EXPANSIONS.<ChoicePoint>(1).");\ntrace_meta();`.
            ____GilData_EchoStringVoid("MainClass.Trace(\"Transition action `trace_meta();` for META_EXPANSIONS__S2 to META_EXPANSIONS.<ChoicePoint>(1).\");");
            ____GilData_EchoStringVoid("MainClass.Trace(\"META: State: META_EXPANSIONS__S2, trigger: ev1, behavior vertex: META_EXPANSIONS__S2\");");
            
            // Step 3: Enter/move towards transition target `META_EXPANSIONS.<ChoicePoint>(1)`.
            // META_EXPANSIONS.<ChoicePoint>(1) is a pseudo state and cannot have an `enter` trigger.
            
            // META_EXPANSIONS.<ChoicePoint>(1) behavior
            // uml: / { trace("Transition action `trace_meta();` for META_EXPANSIONS.<ChoicePoint>(1) to S3.");\ntrace_meta(); } TransitionTo(S3)
            {
                // Step 1: Exit states until we reach `META_EXPANSIONS` state (Least Common Ancestor for transition). Already at LCA, no exiting required.
                
                // Step 2: Transition action: `trace("Transition action `trace_meta();` for META_EXPANSIONS.<ChoicePoint>(1) to S3.");\ntrace_meta();`.
                ____GilData_EchoStringVoid("MainClass.Trace(\"Transition action `trace_meta();` for META_EXPANSIONS.<ChoicePoint>(1) to S3.\");");
                ____GilData_EchoStringVoid("MainClass.Trace(\"META: State: META_EXPANSIONS__S2, trigger: ev1, behavior vertex: META_EXPANSIONS.<ChoicePoint>(1)\");");
                
                // Step 3: Enter/move towards transition target `S3`.
                this.S3_enter();
                
                // Step 4: complete transition. Ends event dispatch. No other behaviors are checked.
                return;
            } // end of behavior for META_EXPANSIONS.<ChoicePoint>(1)
            
            // unreachable behavior: `else / { trace("Transition action `trace_meta();` for META_EXPANSIONS.<ChoicePoint>(1) to S4.");\ntrace_meta(); } TransitionTo(S4)` due to unconditional transition above
        } // end of behavior for META_EXPANSIONS__S2
        
        // No ancestor handles this event.
    }
    
    private void META_EXPANSIONS__S2_ev2()
    {
        // META_EXPANSIONS__S2 behavior
        // uml: EV2 [trace_guard("State META_EXPANSIONS__S2: check behavior `EV2 TransitionTo(META_EXPANSIONS.<ChoicePoint>(2))`.", true)] / { trace("Transition action `` for META_EXPANSIONS__S2 to META_EXPANSIONS.<ChoicePoint>(2)."); } TransitionTo(META_EXPANSIONS.<ChoicePoint>(2))
        if (____GilData_VarArgsToBool(____GilData_EchoStringBool("trace_guard(\"State META_EXPANSIONS__S2: check behavior `EV2 TransitionTo(META_EXPANSIONS.<ChoicePoint>(2))`.\", true)")))
        {
            // Step 1: Exit states until we reach `META_EXPANSIONS` state (Least Common Ancestor for transition).
            this.META_EXPANSIONS__S2_exit();
            
            // Step 2: Transition action: `trace("Transition action `` for META_EXPANSIONS__S2 to META_EXPANSIONS.<ChoicePoint>(2).");`.
            ____GilData_EchoStringVoid("MainClass.Trace(\"Transition action `` for META_EXPANSIONS__S2 to META_EXPANSIONS.<ChoicePoint>(2).\");");
            
            // Step 3: Enter/move towards transition target `META_EXPANSIONS.<ChoicePoint>(2)`.
            // META_EXPANSIONS.<ChoicePoint>(2) is a pseudo state and cannot have an `enter` trigger.
            
            // Finish transition by calling pseudo state transition function.
            this.META_EXPANSIONS_ChoicePoint_2__transition();
            return; // event processing immediately stops when a transition finishes. No other behaviors for this state are checked.
        } // end of behavior for META_EXPANSIONS__S2
        
        // No ancestor handles this event.
    }
    
    
    ////////////////////////////////////////////////////////////////////////////////
    // event handlers for state S3
    ////////////////////////////////////////////////////////////////////////////////
    
    private void S3_enter()
    {
        this.stateId = StateId.S3;
        
        // S3 behavior
        // uml: enter / { trace("Enter S3."); }
        {
            // Step 1: execute action `trace("Enter S3.");`
            ____GilData_EchoStringVoid("MainClass.Trace(\"Enter S3.\");");
        } // end of behavior for S3
    }
    
    private void S3_exit()
    {
        // S3 behavior
        // uml: exit / { trace("Exit S3."); }
        {
            // Step 1: execute action `trace("Exit S3.");`
            ____GilData_EchoStringVoid("MainClass.Trace(\"Exit S3.\");");
        } // end of behavior for S3
        
        this.stateId = StateId.META_EXPANSIONS;
    }
    
    private void S3_ev1()
    {
        // S3 behavior
        // uml: EV1 [trace_guard("State S3: check behavior `EV1 / { trace_meta(); } TransitionTo(META_EXPANSIONS.<ChoicePoint>(2))`.", true)] / { trace("Transition action `trace_meta();` for S3 to META_EXPANSIONS.<ChoicePoint>(2).");\ntrace_meta(); } TransitionTo(META_EXPANSIONS.<ChoicePoint>(2))
        if (____GilData_VarArgsToBool(____GilData_EchoStringBool("trace_guard(\"State S3: check behavior `EV1 / { trace_meta(); } TransitionTo(META_EXPANSIONS.<ChoicePoint>(2))`.\", true)")))
        {
            // Step 1: Exit states until we reach `META_EXPANSIONS` state (Least Common Ancestor for transition).
            this.S3_exit();
            
            // Step 2: Transition action: `trace("Transition action `trace_meta();` for S3 to META_EXPANSIONS.<ChoicePoint>(2).");\ntrace_meta();`.
            ____GilData_EchoStringVoid("MainClass.Trace(\"Transition action `trace_meta();` for S3 to META_EXPANSIONS.<ChoicePoint>(2).\");");
            ____GilData_EchoStringVoid("MainClass.Trace(\"META: State: S3, trigger: ev1, behavior vertex: S3\");");
            
            // Step 3: Enter/move towards transition target `META_EXPANSIONS.<ChoicePoint>(2)`.
            // META_EXPANSIONS.<ChoicePoint>(2) is a pseudo state and cannot have an `enter` trigger.
            
            // Finish transition by calling pseudo state transition function.
            this.META_EXPANSIONS_ChoicePoint_2__transition();
            return; // event processing immediately stops when a transition finishes. No other behaviors for this state are checked.
        } // end of behavior for S3
        
        // No ancestor handles this event.
    }
    
    
    ////////////////////////////////////////////////////////////////////////////////
    // event handlers for state S4
    ////////////////////////////////////////////////////////////////////////////////
    
    private void S4_enter()
    {
        this.stateId = StateId.S4;
        
        // S4 behavior
        // uml: enter / { trace("Enter S4."); }
        {
            // Step 1: execute action `trace("Enter S4.");`
            ____GilData_EchoStringVoid("MainClass.Trace(\"Enter S4.\");");
        } // end of behavior for S4
    }
    
    private void S4_exit()
    {
        // S4 behavior
        // uml: exit / { trace("Exit S4."); }
        {
            // Step 1: execute action `trace("Exit S4.");`
            ____GilData_EchoStringVoid("MainClass.Trace(\"Exit S4.\");");
        } // end of behavior for S4
        
        this.stateId = StateId.META_EXPANSIONS;
    }
    
    
    ////////////////////////////////////////////////////////////////////////////////
    // event handlers for state S5
    ////////////////////////////////////////////////////////////////////////////////
    
    private void S5_enter()
    {
        this.stateId = StateId.S5;
        
        // S5 behavior
        // uml: enter / { trace("Enter S5."); }
        {
            // Step 1: execute action `trace("Enter S5.");`
            ____GilData_EchoStringVoid("MainClass.Trace(\"Enter S5.\");");
        } // end of behavior for S5
    }
    
    private void S5_exit()
    {
        // S5 behavior
        // uml: exit / { trace("Exit S5."); }
        {
            // Step 1: execute action `trace("Exit S5.");`
            ____GilData_EchoStringVoid("MainClass.Trace(\"Exit S5.\");");
        } // end of behavior for S5
        
        this.stateId = StateId.META_EXPANSIONS;
    }
    
    
    ////////////////////////////////////////////////////////////////////////////////
    // event handlers for state NORMAL
    ////////////////////////////////////////////////////////////////////////////////
    
    private void NORMAL_enter()
    {
        this.stateId = StateId.NORMAL;
        
        // NORMAL behavior
        // uml: enter / { trace("Enter NORMAL."); }
        {
            // Step 1: execute action `trace("Enter NORMAL.");`
            ____GilData_EchoStringVoid("MainClass.Trace(\"Enter NORMAL.\");");
        } // end of behavior for NORMAL
    }
    
    private void NORMAL_exit()
    {
        // NORMAL behavior
        // uml: exit / { trace("Exit NORMAL."); }
        {
            // Step 1: execute action `trace("Exit NORMAL.");`
            ____GilData_EchoStringVoid("MainClass.Trace(\"Exit NORMAL.\");");
        } // end of behavior for NORMAL
        
        this.stateId = StateId.TEST6_ROOT;
    }
    
    
    ////////////////////////////////////////////////////////////////////////////////
    // event handlers for state NORMAL__S1
    ////////////////////////////////////////////////////////////////////////////////
    
    private void NORMAL__S1_enter()
    {
        this.stateId = StateId.NORMAL__S1;
        
        // NORMAL__S1 behavior
        // uml: enter / { trace("Enter NORMAL__S1."); }
        {
            // Step 1: execute action `trace("Enter NORMAL__S1.");`
            ____GilData_EchoStringVoid("MainClass.Trace(\"Enter NORMAL__S1.\");");
        } // end of behavior for NORMAL__S1
        
        // NORMAL__S1 behavior
        // uml: enter [trace_guard("State NORMAL__S1: check behavior `enter / { clear_output(); }`.", true)] / { clear_output(); }
        if (____GilData_VarArgsToBool(____GilData_EchoStringBool("trace_guard(\"State NORMAL__S1: check behavior `enter / { clear_output(); }`.\", true)")))
        {
            // Step 1: execute action `clear_output();`
            ____GilData_EchoStringVoid("MainClass.Trace(\"IGNORE_OUTPUT_BEFORE_THIS\");");
        } // end of behavior for NORMAL__S1
    }
    
    private void NORMAL__S1_exit()
    {
        // NORMAL__S1 behavior
        // uml: exit / { trace("Exit NORMAL__S1."); }
        {
            // Step 1: execute action `trace("Exit NORMAL__S1.");`
            ____GilData_EchoStringVoid("MainClass.Trace(\"Exit NORMAL__S1.\");");
        } // end of behavior for NORMAL__S1
        
        this.stateId = StateId.NORMAL;
    }
    
    private void NORMAL__S1_ev1()
    {
        // NORMAL__S1 behavior
        // uml: 1. EV1 [trace_guard("State NORMAL__S1: check behavior `1. EV1 / { count++; }`.", true)] / { count++; }
        if (____GilData_VarArgsToBool(____GilData_EchoStringBool("trace_guard(\"State NORMAL__S1: check behavior `1. EV1 / { count++; }`.\", true)")))
        {
            // Step 1: execute action `count++;`
            ____GilData_EchoStringVoid("this.vars.count++;");
        } // end of behavior for NORMAL__S1
        
        // NORMAL__S1 behavior
        // uml: 2. EV1 [trace_guard("State NORMAL__S1: check behavior `2. EV1 [count >= 2] TransitionTo(NORMAL__S2)`.", count >= 2)] / { trace("Transition action `` for NORMAL__S1 to NORMAL__S2."); } TransitionTo(NORMAL__S2)
        if (____GilData_VarArgsToBool(____GilData_EchoStringBool("trace_guard(\"State NORMAL__S1: check behavior `2. EV1 [count >= 2] TransitionTo(NORMAL__S2)`.\", this.vars.count >= 2)")))
        {
            // Step 1: Exit states until we reach `NORMAL` state (Least Common Ancestor for transition).
            this.NORMAL__S1_exit();
            
            // Step 2: Transition action: `trace("Transition action `` for NORMAL__S1 to NORMAL__S2.");`.
            ____GilData_EchoStringVoid("MainClass.Trace(\"Transition action `` for NORMAL__S1 to NORMAL__S2.\");");
            
            // Step 3: Enter/move towards transition target `NORMAL__S2`.
            this.NORMAL__S2_enter();
            
            // Step 4: complete transition. Ends event dispatch. No other behaviors are checked.
            return;
        } // end of behavior for NORMAL__S1
        
        // No ancestor handles this event.
    }
    
    
    ////////////////////////////////////////////////////////////////////////////////
    // event handlers for state NORMAL__S2
    ////////////////////////////////////////////////////////////////////////////////
    
    private void NORMAL__S2_enter()
    {
        this.stateId = StateId.NORMAL__S2;
        
        // NORMAL__S2 behavior
        // uml: enter / { trace("Enter NORMAL__S2."); }
        {
            // Step 1: execute action `trace("Enter NORMAL__S2.");`
            ____GilData_EchoStringVoid("MainClass.Trace(\"Enter NORMAL__S2.\");");
        } // end of behavior for NORMAL__S2
    }
    
    private void NORMAL__S2_exit()
    {
        // NORMAL__S2 behavior
        // uml: exit / { trace("Exit NORMAL__S2."); }
        {
            // Step 1: execute action `trace("Exit NORMAL__S2.");`
            ____GilData_EchoStringVoid("MainClass.Trace(\"Exit NORMAL__S2.\");");
        } // end of behavior for NORMAL__S2
        
        this.stateId = StateId.NORMAL;
    }
    
    
    ////////////////////////////////////////////////////////////////////////////////
    // event handlers for state TEST6_VARS_EXPANSIONS__DECIDE
    ////////////////////////////////////////////////////////////////////////////////
    
    private void TEST6_VARS_EXPANSIONS__DECIDE_enter()
    {
        this.stateId = StateId.TEST6_VARS_EXPANSIONS__DECIDE;
        
        // TEST6_VARS_EXPANSIONS__DECIDE behavior
        // uml: enter / { trace("Enter TEST6_VARS_EXPANSIONS__DECIDE."); }
        {
            // Step 1: execute action `trace("Enter TEST6_VARS_EXPANSIONS__DECIDE.");`
            ____GilData_EchoStringVoid("MainClass.Trace(\"Enter TEST6_VARS_EXPANSIONS__DECIDE.\");");
        } // end of behavior for TEST6_VARS_EXPANSIONS__DECIDE
    }
    
    private void TEST6_VARS_EXPANSIONS__DECIDE_exit()
    {
        // TEST6_VARS_EXPANSIONS__DECIDE behavior
        // uml: exit / { trace("Exit TEST6_VARS_EXPANSIONS__DECIDE."); }
        {
            // Step 1: execute action `trace("Exit TEST6_VARS_EXPANSIONS__DECIDE.");`
            ____GilData_EchoStringVoid("MainClass.Trace(\"Exit TEST6_VARS_EXPANSIONS__DECIDE.\");");
        } // end of behavior for TEST6_VARS_EXPANSIONS__DECIDE
        
        this.stateId = StateId.TEST6_ROOT;
    }
    
    private void TEST6_VARS_EXPANSIONS__DECIDE_ev1()
    {
        // TEST6_VARS_EXPANSIONS__DECIDE behavior
        // uml: EV1 [trace_guard("State TEST6_VARS_EXPANSIONS__DECIDE: check behavior `EV1 TransitionTo(NORMAL)`.", true)] / { trace("Transition action `` for TEST6_VARS_EXPANSIONS__DECIDE to NORMAL."); } TransitionTo(NORMAL)
        if (____GilData_VarArgsToBool(____GilData_EchoStringBool("trace_guard(\"State TEST6_VARS_EXPANSIONS__DECIDE: check behavior `EV1 TransitionTo(NORMAL)`.\", true)")))
        {
            // Step 1: Exit states until we reach `TEST6_ROOT` state (Least Common Ancestor for transition).
            this.TEST6_VARS_EXPANSIONS__DECIDE_exit();
            
            // Step 2: Transition action: `trace("Transition action `` for TEST6_VARS_EXPANSIONS__DECIDE to NORMAL.");`.
            ____GilData_EchoStringVoid("MainClass.Trace(\"Transition action `` for TEST6_VARS_EXPANSIONS__DECIDE to NORMAL.\");");
            
            // Step 3: Enter/move towards transition target `NORMAL`.
            this.NORMAL_enter();
            
            // NORMAL.<InitialState> behavior
            // uml: / { trace("Transition action `` for NORMAL.<InitialState> to NORMAL__S1."); } TransitionTo(NORMAL__S1)
            {
                // Step 1: Exit states until we reach `NORMAL` state (Least Common Ancestor for transition). Already at LCA, no exiting required.
                
                // Step 2: Transition action: `trace("Transition action `` for NORMAL.<InitialState> to NORMAL__S1.");`.
                ____GilData_EchoStringVoid("MainClass.Trace(\"Transition action `` for NORMAL.<InitialState> to NORMAL__S1.\");");
                
                // Step 3: Enter/move towards transition target `NORMAL__S1`.
                this.NORMAL__S1_enter();
                
                // Step 4: complete transition. Ends event dispatch. No other behaviors are checked.
                return;
            } // end of behavior for NORMAL.<InitialState>
        } // end of behavior for TEST6_VARS_EXPANSIONS__DECIDE
        
        // No ancestor handles this event.
    }
    
    private void TEST6_VARS_EXPANSIONS__DECIDE_ev2()
    {
        // TEST6_VARS_EXPANSIONS__DECIDE behavior
        // uml: EV2 [trace_guard("State TEST6_VARS_EXPANSIONS__DECIDE: check behavior `EV2 TransitionTo(AUTO_VAR_TEST)`.", true)] / { trace("Transition action `` for TEST6_VARS_EXPANSIONS__DECIDE to AUTO_VAR_TEST."); } TransitionTo(AUTO_VAR_TEST)
        if (____GilData_VarArgsToBool(____GilData_EchoStringBool("trace_guard(\"State TEST6_VARS_EXPANSIONS__DECIDE: check behavior `EV2 TransitionTo(AUTO_VAR_TEST)`.\", true)")))
        {
            // Step 1: Exit states until we reach `TEST6_ROOT` state (Least Common Ancestor for transition).
            this.TEST6_VARS_EXPANSIONS__DECIDE_exit();
            
            // Step 2: Transition action: `trace("Transition action `` for TEST6_VARS_EXPANSIONS__DECIDE to AUTO_VAR_TEST.");`.
            ____GilData_EchoStringVoid("MainClass.Trace(\"Transition action `` for TEST6_VARS_EXPANSIONS__DECIDE to AUTO_VAR_TEST.\");");
            
            // Step 3: Enter/move towards transition target `AUTO_VAR_TEST`.
            this.AUTO_VAR_TEST_enter();
            
            // AUTO_VAR_TEST.<InitialState> behavior
            // uml: / { trace("Transition action `` for AUTO_VAR_TEST.<InitialState> to AUTO_VAR_TEST__S1."); } TransitionTo(AUTO_VAR_TEST__S1)
            {
                // Step 1: Exit states until we reach `AUTO_VAR_TEST` state (Least Common Ancestor for transition). Already at LCA, no exiting required.
                
                // Step 2: Transition action: `trace("Transition action `` for AUTO_VAR_TEST.<InitialState> to AUTO_VAR_TEST__S1.");`.
                ____GilData_EchoStringVoid("MainClass.Trace(\"Transition action `` for AUTO_VAR_TEST.<InitialState> to AUTO_VAR_TEST__S1.\");");
                
                // Step 3: Enter/move towards transition target `AUTO_VAR_TEST__S1`.
                this.AUTO_VAR_TEST__S1_enter();
                
                // Step 4: complete transition. Ends event dispatch. No other behaviors are checked.
                return;
            } // end of behavior for AUTO_VAR_TEST.<InitialState>
        } // end of behavior for TEST6_VARS_EXPANSIONS__DECIDE
        
        // No ancestor handles this event.
    }
    
    private void TEST6_VARS_EXPANSIONS__DECIDE_ev3()
    {
        // TEST6_VARS_EXPANSIONS__DECIDE behavior
        // uml: EV3 [trace_guard("State TEST6_VARS_EXPANSIONS__DECIDE: check behavior `EV3 TransitionTo(META_EXPANSIONS)`.", true)] / { trace("Transition action `` for TEST6_VARS_EXPANSIONS__DECIDE to META_EXPANSIONS."); } TransitionTo(META_EXPANSIONS)
        if (____GilData_VarArgsToBool(____GilData_EchoStringBool("trace_guard(\"State TEST6_VARS_EXPANSIONS__DECIDE: check behavior `EV3 TransitionTo(META_EXPANSIONS)`.\", true)")))
        {
            // Step 1: Exit states until we reach `TEST6_ROOT` state (Least Common Ancestor for transition).
            this.TEST6_VARS_EXPANSIONS__DECIDE_exit();
            
            // Step 2: Transition action: `trace("Transition action `` for TEST6_VARS_EXPANSIONS__DECIDE to META_EXPANSIONS.");`.
            ____GilData_EchoStringVoid("MainClass.Trace(\"Transition action `` for TEST6_VARS_EXPANSIONS__DECIDE to META_EXPANSIONS.\");");
            
            // Step 3: Enter/move towards transition target `META_EXPANSIONS`.
            this.META_EXPANSIONS_enter();
            
            // META_EXPANSIONS.<InitialState> behavior
            // uml: / { trace("Transition action `` for META_EXPANSIONS.<InitialState> to META_EXPANSIONS__S1."); } TransitionTo(META_EXPANSIONS__S1)
            {
                // Step 1: Exit states until we reach `META_EXPANSIONS` state (Least Common Ancestor for transition). Already at LCA, no exiting required.
                
                // Step 2: Transition action: `trace("Transition action `` for META_EXPANSIONS.<InitialState> to META_EXPANSIONS__S1.");`.
                ____GilData_EchoStringVoid("MainClass.Trace(\"Transition action `` for META_EXPANSIONS.<InitialState> to META_EXPANSIONS__S1.\");");
                
                // Step 3: Enter/move towards transition target `META_EXPANSIONS__S1`.
                this.META_EXPANSIONS__S1_enter();
                
                // Step 4: complete transition. Ends event dispatch. No other behaviors are checked.
                return;
            } // end of behavior for META_EXPANSIONS.<InitialState>
        } // end of behavior for TEST6_VARS_EXPANSIONS__DECIDE
        
        // No ancestor handles this event.
    }
    
    
    ////////////////////////////////////////////////////////////////////////////////
    // event handlers for state TEST7_INITIAL_OR_HISTORY
    ////////////////////////////////////////////////////////////////////////////////
    
    private void TEST7_INITIAL_OR_HISTORY_enter()
    {
        this.stateId = StateId.TEST7_INITIAL_OR_HISTORY;
        
        // TEST7_INITIAL_OR_HISTORY behavior
        // uml: enter / { trace("Enter TEST7_INITIAL_OR_HISTORY."); }
        {
            // Step 1: execute action `trace("Enter TEST7_INITIAL_OR_HISTORY.");`
            ____GilData_EchoStringVoid("MainClass.Trace(\"Enter TEST7_INITIAL_OR_HISTORY.\");");
        } // end of behavior for TEST7_INITIAL_OR_HISTORY
    }
    
    private void TEST7_INITIAL_OR_HISTORY_exit()
    {
        // TEST7_INITIAL_OR_HISTORY behavior
        // uml: exit / { trace("Exit TEST7_INITIAL_OR_HISTORY."); }
        {
            // Step 1: execute action `trace("Exit TEST7_INITIAL_OR_HISTORY.");`
            ____GilData_EchoStringVoid("MainClass.Trace(\"Exit TEST7_INITIAL_OR_HISTORY.\");");
        } // end of behavior for TEST7_INITIAL_OR_HISTORY
        
        this.stateId = StateId.ROOT;
    }
    
    
    ////////////////////////////////////////////////////////////////////////////////
    // event handlers for state TEST7
    ////////////////////////////////////////////////////////////////////////////////
    
    private void TEST7_enter()
    {
        this.stateId = StateId.TEST7;
        
        // TEST7 behavior
        // uml: enter / { trace("Enter TEST7."); }
        {
            // Step 1: execute action `trace("Enter TEST7.");`
            ____GilData_EchoStringVoid("MainClass.Trace(\"Enter TEST7.\");");
        } // end of behavior for TEST7
        
        // TEST7 behavior
        // uml: enter [trace_guard("State TEST7: check behavior `enter / { clear_dispatch_output(); }`.", true)] / { clear_dispatch_output(); }
        if (____GilData_VarArgsToBool(____GilData_EchoStringBool("trace_guard(\"State TEST7: check behavior `enter / { clear_dispatch_output(); }`.\", true)")))
        {
            // Step 1: execute action `clear_dispatch_output();`
            ____GilData_EchoStringVoid("MainClass.Trace(\"CLEAR_OUTPUT_BEFORE_THIS_AND_FOR_THIS_EVENT_DISPATCH\");");
        } // end of behavior for TEST7
    }
    
    private void TEST7_exit()
    {
        // TEST7 behavior
        // uml: exit / { trace("Exit TEST7."); }
        {
            // Step 1: execute action `trace("Exit TEST7.");`
            ____GilData_EchoStringVoid("MainClass.Trace(\"Exit TEST7.\");");
        } // end of behavior for TEST7
        
        this.stateId = StateId.TEST7_INITIAL_OR_HISTORY;
    }
    
    
    ////////////////////////////////////////////////////////////////////////////////
    // event handlers for state T7__DEEP_HISTORY1
    ////////////////////////////////////////////////////////////////////////////////
    
    private void T7__DEEP_HISTORY1_enter()
    {
        this.stateId = StateId.T7__DEEP_HISTORY1;
        
        // T7__DEEP_HISTORY1 behavior
        // uml: enter / { trace("Enter T7__DEEP_HISTORY1."); }
        {
            // Step 1: execute action `trace("Enter T7__DEEP_HISTORY1.");`
            ____GilData_EchoStringVoid("MainClass.Trace(\"Enter T7__DEEP_HISTORY1.\");");
        } // end of behavior for T7__DEEP_HISTORY1
    }
    
    private void T7__DEEP_HISTORY1_exit()
    {
        // T7__DEEP_HISTORY1 behavior
        // uml: exit / { trace("Exit T7__DEEP_HISTORY1."); }
        {
            // Step 1: execute action `trace("Exit T7__DEEP_HISTORY1.");`
            ____GilData_EchoStringVoid("MainClass.Trace(\"Exit T7__DEEP_HISTORY1.\");");
        } // end of behavior for T7__DEEP_HISTORY1
        
        this.stateId = StateId.TEST7;
    }
    
    
    ////////////////////////////////////////////////////////////////////////////////
    // event handlers for state T7__DH1__SANTAS_WORKSHOP
    ////////////////////////////////////////////////////////////////////////////////
    
    private void T7__DH1__SANTAS_WORKSHOP_enter()
    {
        this.stateId = StateId.T7__DH1__SANTAS_WORKSHOP;
        
        // T7__DH1__SANTAS_WORKSHOP behavior
        // uml: enter / { trace("Enter T7__DH1__SANTAS_WORKSHOP."); }
        {
            // Step 1: execute action `trace("Enter T7__DH1__SANTAS_WORKSHOP.");`
            ____GilData_EchoStringVoid("MainClass.Trace(\"Enter T7__DH1__SANTAS_WORKSHOP.\");");
        } // end of behavior for T7__DH1__SANTAS_WORKSHOP
    }
    
    private void T7__DH1__SANTAS_WORKSHOP_exit()
    {
        // T7__DH1__SANTAS_WORKSHOP behavior
        // uml: exit / { trace("Exit T7__DH1__SANTAS_WORKSHOP."); }
        {
            // Step 1: execute action `trace("Exit T7__DH1__SANTAS_WORKSHOP.");`
            ____GilData_EchoStringVoid("MainClass.Trace(\"Exit T7__DH1__SANTAS_WORKSHOP.\");");
        } // end of behavior for T7__DH1__SANTAS_WORKSHOP
        
        this.stateId = StateId.T7__DEEP_HISTORY1;
    }
    
    
    ////////////////////////////////////////////////////////////////////////////////
    // event handlers for state T7__DH1__ALIENS_DETECTED
    ////////////////////////////////////////////////////////////////////////////////
    
    private void T7__DH1__ALIENS_DETECTED_enter()
    {
        this.stateId = StateId.T7__DH1__ALIENS_DETECTED;
        
        // T7__DH1__ALIENS_DETECTED behavior
        // uml: enter / { trace("Enter T7__DH1__ALIENS_DETECTED."); }
        {
            // Step 1: execute action `trace("Enter T7__DH1__ALIENS_DETECTED.");`
            ____GilData_EchoStringVoid("MainClass.Trace(\"Enter T7__DH1__ALIENS_DETECTED.\");");
        } // end of behavior for T7__DH1__ALIENS_DETECTED
    }
    
    private void T7__DH1__ALIENS_DETECTED_exit()
    {
        // T7__DH1__ALIENS_DETECTED behavior
        // uml: exit / { trace("Exit T7__DH1__ALIENS_DETECTED."); }
        {
            // Step 1: execute action `trace("Exit T7__DH1__ALIENS_DETECTED.");`
            ____GilData_EchoStringVoid("MainClass.Trace(\"Exit T7__DH1__ALIENS_DETECTED.\");");
        } // end of behavior for T7__DH1__ALIENS_DETECTED
        
        this.stateId = StateId.T7__DH1__SANTAS_WORKSHOP;
    }
    
    private void T7__DH1__ALIENS_DETECTED_ev8()
    {
        // T7__DH1__ALIENS_DETECTED behavior
        // uml: EV8 [trace_guard("State T7__DH1__ALIENS_DETECTED: check behavior `EV8 TransitionTo(T7__DH1__BUILD)`.", true)] / { trace("Transition action `` for T7__DH1__ALIENS_DETECTED to T7__DH1__BUILD."); } TransitionTo(T7__DH1__BUILD)
        if (____GilData_VarArgsToBool(____GilData_EchoStringBool("trace_guard(\"State T7__DH1__ALIENS_DETECTED: check behavior `EV8 TransitionTo(T7__DH1__BUILD)`.\", true)")))
        {
            // Step 1: Exit states until we reach `T7__DH1__SANTAS_WORKSHOP` state (Least Common Ancestor for transition).
            this.ExitUpToStateHandler(StateId.T7__DH1__SANTAS_WORKSHOP);
            
            // Step 2: Transition action: `trace("Transition action `` for T7__DH1__ALIENS_DETECTED to T7__DH1__BUILD.");`.
            ____GilData_EchoStringVoid("MainClass.Trace(\"Transition action `` for T7__DH1__ALIENS_DETECTED to T7__DH1__BUILD.\");");
            
            // Step 3: Enter/move towards transition target `T7__DH1__BUILD`.
            this.T7__DH1__BUILD_enter();
            
            // Finish transition by calling pseudo state transition function.
            this.T7__DH1__BUILD_InitialState_transition();
            return; // event processing immediately stops when a transition finishes. No other behaviors for this state are checked.
        } // end of behavior for T7__DH1__ALIENS_DETECTED
        
        // No ancestor handles this event.
    }
    
    
    ////////////////////////////////////////////////////////////////////////////////
    // event handlers for state T7__DH1__GET_BACKUP
    ////////////////////////////////////////////////////////////////////////////////
    
    private void T7__DH1__GET_BACKUP_enter()
    {
        this.stateId = StateId.T7__DH1__GET_BACKUP;
        
        // T7__DH1__GET_BACKUP behavior
        // uml: enter / { trace("Enter T7__DH1__GET_BACKUP."); }
        {
            // Step 1: execute action `trace("Enter T7__DH1__GET_BACKUP.");`
            ____GilData_EchoStringVoid("MainClass.Trace(\"Enter T7__DH1__GET_BACKUP.\");");
        } // end of behavior for T7__DH1__GET_BACKUP
    }
    
    private void T7__DH1__GET_BACKUP_exit()
    {
        // T7__DH1__GET_BACKUP behavior
        // uml: exit / { trace("Exit T7__DH1__GET_BACKUP."); }
        {
            // Step 1: execute action `trace("Exit T7__DH1__GET_BACKUP.");`
            ____GilData_EchoStringVoid("MainClass.Trace(\"Exit T7__DH1__GET_BACKUP.\");");
        } // end of behavior for T7__DH1__GET_BACKUP
        
        this.stateId = StateId.T7__DH1__ALIENS_DETECTED;
    }
    
    
    ////////////////////////////////////////////////////////////////////////////////
    // event handlers for state T7__DH1__HERO
    ////////////////////////////////////////////////////////////////////////////////
    
    private void T7__DH1__HERO_enter()
    {
        this.stateId = StateId.T7__DH1__HERO;
        
        // T7__DH1__HERO behavior
        // uml: enter / { trace("Enter T7__DH1__HERO."); }
        {
            // Step 1: execute action `trace("Enter T7__DH1__HERO.");`
            ____GilData_EchoStringVoid("MainClass.Trace(\"Enter T7__DH1__HERO.\");");
        } // end of behavior for T7__DH1__HERO
        
        // T7__DH1__HERO behavior
        // uml: enter [trace_guard("State T7__DH1__HERO: check behavior `enter / { $gil(this.vars.T7__DH1__ALIENS_DETECTED_history = T7__DH1__ALIENS_DETECTED_HistoryId.T7__DH1__HERO;) }`.", true)] / { $gil(this.vars.T7__DH1__ALIENS_DETECTED_history = T7__DH1__ALIENS_DETECTED_HistoryId.T7__DH1__HERO;) }
        if (____GilData_VarArgsToBool(____GilData_EchoStringBool("trace_guard(\"State T7__DH1__HERO: check behavior `enter / { $gil(this.vars.T7__DH1__ALIENS_DETECTED_history = T7__DH1__ALIENS_DETECTED_HistoryId.T7__DH1__HERO;) }`.\", true)")))
        {
            // Step 1: execute action `$gil(this.vars.T7__DH1__ALIENS_DETECTED_history = T7__DH1__ALIENS_DETECTED_HistoryId.T7__DH1__HERO;)`
            this.vars.T7__DH1__ALIENS_DETECTED_history = T7__DH1__ALIENS_DETECTED_HistoryId.T7__DH1__HERO;
        } // end of behavior for T7__DH1__HERO
        
        // T7__DH1__HERO behavior
        // uml: enter [trace_guard("State T7__DH1__HERO: check behavior `enter / { $gil(this.vars.T7__DH1__GET_BACKUP_history = T7__DH1__GET_BACKUP_HistoryId.T7__DH1__HERO;) }`.", true)] / { $gil(this.vars.T7__DH1__GET_BACKUP_history = T7__DH1__GET_BACKUP_HistoryId.T7__DH1__HERO;) }
        if (____GilData_VarArgsToBool(____GilData_EchoStringBool("trace_guard(\"State T7__DH1__HERO: check behavior `enter / { $gil(this.vars.T7__DH1__GET_BACKUP_history = T7__DH1__GET_BACKUP_HistoryId.T7__DH1__HERO;) }`.\", true)")))
        {
            // Step 1: execute action `$gil(this.vars.T7__DH1__GET_BACKUP_history = T7__DH1__GET_BACKUP_HistoryId.T7__DH1__HERO;)`
            this.vars.T7__DH1__GET_BACKUP_history = T7__DH1__GET_BACKUP_HistoryId.T7__DH1__HERO;
        } // end of behavior for T7__DH1__HERO
    }
    
    private void T7__DH1__HERO_exit()
    {
        // T7__DH1__HERO behavior
        // uml: exit / { trace("Exit T7__DH1__HERO."); }
        {
            // Step 1: execute action `trace("Exit T7__DH1__HERO.");`
            ____GilData_EchoStringVoid("MainClass.Trace(\"Exit T7__DH1__HERO.\");");
        } // end of behavior for T7__DH1__HERO
        
        this.stateId = StateId.T7__DH1__GET_BACKUP;
    }
    
    private void T7__DH1__HERO_InitialState_transition()
    {
        // T7__DH1__HERO.<InitialState> behavior
        // uml: / { trace("Transition action `` for T7__DH1__HERO.<InitialState> to T7__DH1__CALL_THOR."); } TransitionTo(T7__DH1__CALL_THOR)
        {
            // Step 1: Exit states until we reach `T7__DH1__HERO` state (Least Common Ancestor for transition). Already at LCA, no exiting required.
            
            // Step 2: Transition action: `trace("Transition action `` for T7__DH1__HERO.<InitialState> to T7__DH1__CALL_THOR.");`.
            ____GilData_EchoStringVoid("MainClass.Trace(\"Transition action `` for T7__DH1__HERO.<InitialState> to T7__DH1__CALL_THOR.\");");
            
            // Step 3: Enter/move towards transition target `T7__DH1__CALL_THOR`.
            this.T7__DH1__CALL_THOR_enter();
            
            // Step 4: complete transition. Ends event dispatch. No other behaviors are checked.
            return;
        } // end of behavior for T7__DH1__HERO.<InitialState>
    }
    
    
    ////////////////////////////////////////////////////////////////////////////////
    // event handlers for state T7__DH1__CALL_BATMAN
    ////////////////////////////////////////////////////////////////////////////////
    
    private void T7__DH1__CALL_BATMAN_enter()
    {
        this.stateId = StateId.T7__DH1__CALL_BATMAN;
        
        // T7__DH1__CALL_BATMAN behavior
        // uml: enter / { trace("Enter T7__DH1__CALL_BATMAN."); }
        {
            // Step 1: execute action `trace("Enter T7__DH1__CALL_BATMAN.");`
            ____GilData_EchoStringVoid("MainClass.Trace(\"Enter T7__DH1__CALL_BATMAN.\");");
        } // end of behavior for T7__DH1__CALL_BATMAN
    }
    
    private void T7__DH1__CALL_BATMAN_exit()
    {
        // T7__DH1__CALL_BATMAN behavior
        // uml: exit / { trace("Exit T7__DH1__CALL_BATMAN."); }
        {
            // Step 1: execute action `trace("Exit T7__DH1__CALL_BATMAN.");`
            ____GilData_EchoStringVoid("MainClass.Trace(\"Exit T7__DH1__CALL_BATMAN.\");");
        } // end of behavior for T7__DH1__CALL_BATMAN
        
        this.stateId = StateId.T7__DH1__HERO;
    }
    
    private void T7__DH1__CALL_BATMAN_ev1()
    {
        // T7__DH1__CALL_BATMAN behavior
        // uml: EV1 [trace_guard("State T7__DH1__CALL_BATMAN: check behavior `EV1 TransitionTo(T7__DH1__BUDDY_ELF)`.", true)] / { trace("Transition action `` for T7__DH1__CALL_BATMAN to T7__DH1__BUDDY_ELF."); } TransitionTo(T7__DH1__BUDDY_ELF)
        if (____GilData_VarArgsToBool(____GilData_EchoStringBool("trace_guard(\"State T7__DH1__CALL_BATMAN: check behavior `EV1 TransitionTo(T7__DH1__BUDDY_ELF)`.\", true)")))
        {
            // Step 1: Exit states until we reach `T7__DH1__GET_BACKUP` state (Least Common Ancestor for transition).
            this.ExitUpToStateHandler(StateId.T7__DH1__GET_BACKUP);
            
            // Step 2: Transition action: `trace("Transition action `` for T7__DH1__CALL_BATMAN to T7__DH1__BUDDY_ELF.");`.
            ____GilData_EchoStringVoid("MainClass.Trace(\"Transition action `` for T7__DH1__CALL_BATMAN to T7__DH1__BUDDY_ELF.\");");
            
            // Step 3: Enter/move towards transition target `T7__DH1__BUDDY_ELF`.
            this.T7__DH1__LOCAL_HELP_enter();
            this.T7__DH1__BUDDY_ELF_enter();
            
            // Step 4: complete transition. Ends event dispatch. No other behaviors are checked.
            return;
        } // end of behavior for T7__DH1__CALL_BATMAN
        
        // No ancestor handles this event.
    }
    
    
    ////////////////////////////////////////////////////////////////////////////////
    // event handlers for state T7__DH1__CALL_THOR
    ////////////////////////////////////////////////////////////////////////////////
    
    private void T7__DH1__CALL_THOR_enter()
    {
        this.stateId = StateId.T7__DH1__CALL_THOR;
        
        // T7__DH1__CALL_THOR behavior
        // uml: enter / { trace("Enter T7__DH1__CALL_THOR."); }
        {
            // Step 1: execute action `trace("Enter T7__DH1__CALL_THOR.");`
            ____GilData_EchoStringVoid("MainClass.Trace(\"Enter T7__DH1__CALL_THOR.\");");
        } // end of behavior for T7__DH1__CALL_THOR
    }
    
    private void T7__DH1__CALL_THOR_exit()
    {
        // T7__DH1__CALL_THOR behavior
        // uml: exit / { trace("Exit T7__DH1__CALL_THOR."); }
        {
            // Step 1: execute action `trace("Exit T7__DH1__CALL_THOR.");`
            ____GilData_EchoStringVoid("MainClass.Trace(\"Exit T7__DH1__CALL_THOR.\");");
        } // end of behavior for T7__DH1__CALL_THOR
        
        this.stateId = StateId.T7__DH1__HERO;
    }
    
    private void T7__DH1__CALL_THOR_ev1()
    {
        // T7__DH1__CALL_THOR behavior
        // uml: EV1 [trace_guard("State T7__DH1__CALL_THOR: check behavior `EV1 TransitionTo(T7__DH1__CALL_BATMAN)`.", true)] / { trace("Transition action `` for T7__DH1__CALL_THOR to T7__DH1__CALL_BATMAN."); } TransitionTo(T7__DH1__CALL_BATMAN)
        if (____GilData_VarArgsToBool(____GilData_EchoStringBool("trace_guard(\"State T7__DH1__CALL_THOR: check behavior `EV1 TransitionTo(T7__DH1__CALL_BATMAN)`.\", true)")))
        {
            // Step 1: Exit states until we reach `T7__DH1__HERO` state (Least Common Ancestor for transition).
            this.T7__DH1__CALL_THOR_exit();
            
            // Step 2: Transition action: `trace("Transition action `` for T7__DH1__CALL_THOR to T7__DH1__CALL_BATMAN.");`.
            ____GilData_EchoStringVoid("MainClass.Trace(\"Transition action `` for T7__DH1__CALL_THOR to T7__DH1__CALL_BATMAN.\");");
            
            // Step 3: Enter/move towards transition target `T7__DH1__CALL_BATMAN`.
            this.T7__DH1__CALL_BATMAN_enter();
            
            // Step 4: complete transition. Ends event dispatch. No other behaviors are checked.
            return;
        } // end of behavior for T7__DH1__CALL_THOR
        
        // No ancestor handles this event.
    }
    
    
    ////////////////////////////////////////////////////////////////////////////////
    // event handlers for state T7__DH1__LOCAL_HELP
    ////////////////////////////////////////////////////////////////////////////////
    
    private void T7__DH1__LOCAL_HELP_enter()
    {
        this.stateId = StateId.T7__DH1__LOCAL_HELP;
        
        // T7__DH1__LOCAL_HELP behavior
        // uml: enter / { trace("Enter T7__DH1__LOCAL_HELP."); }
        {
            // Step 1: execute action `trace("Enter T7__DH1__LOCAL_HELP.");`
            ____GilData_EchoStringVoid("MainClass.Trace(\"Enter T7__DH1__LOCAL_HELP.\");");
        } // end of behavior for T7__DH1__LOCAL_HELP
    }
    
    private void T7__DH1__LOCAL_HELP_exit()
    {
        // T7__DH1__LOCAL_HELP behavior
        // uml: exit / { trace("Exit T7__DH1__LOCAL_HELP."); }
        {
            // Step 1: execute action `trace("Exit T7__DH1__LOCAL_HELP.");`
            ____GilData_EchoStringVoid("MainClass.Trace(\"Exit T7__DH1__LOCAL_HELP.\");");
        } // end of behavior for T7__DH1__LOCAL_HELP
        
        this.stateId = StateId.T7__DH1__GET_BACKUP;
    }
    
    
    ////////////////////////////////////////////////////////////////////////////////
    // event handlers for state T7__DH1__BUDDY_ELF
    ////////////////////////////////////////////////////////////////////////////////
    
    private void T7__DH1__BUDDY_ELF_enter()
    {
        this.stateId = StateId.T7__DH1__BUDDY_ELF;
        
        // T7__DH1__BUDDY_ELF behavior
        // uml: enter / { trace("Enter T7__DH1__BUDDY_ELF."); }
        {
            // Step 1: execute action `trace("Enter T7__DH1__BUDDY_ELF.");`
            ____GilData_EchoStringVoid("MainClass.Trace(\"Enter T7__DH1__BUDDY_ELF.\");");
        } // end of behavior for T7__DH1__BUDDY_ELF
        
        // T7__DH1__BUDDY_ELF behavior
        // uml: enter [trace_guard("State T7__DH1__BUDDY_ELF: check behavior `enter / { $gil(this.vars.T7__DH1__ALIENS_DETECTED_history = T7__DH1__ALIENS_DETECTED_HistoryId.T7__DH1__BUDDY_ELF;) }`.", true)] / { $gil(this.vars.T7__DH1__ALIENS_DETECTED_history = T7__DH1__ALIENS_DETECTED_HistoryId.T7__DH1__BUDDY_ELF;) }
        if (____GilData_VarArgsToBool(____GilData_EchoStringBool("trace_guard(\"State T7__DH1__BUDDY_ELF: check behavior `enter / { $gil(this.vars.T7__DH1__ALIENS_DETECTED_history = T7__DH1__ALIENS_DETECTED_HistoryId.T7__DH1__BUDDY_ELF;) }`.\", true)")))
        {
            // Step 1: execute action `$gil(this.vars.T7__DH1__ALIENS_DETECTED_history = T7__DH1__ALIENS_DETECTED_HistoryId.T7__DH1__BUDDY_ELF;)`
            this.vars.T7__DH1__ALIENS_DETECTED_history = T7__DH1__ALIENS_DETECTED_HistoryId.T7__DH1__BUDDY_ELF;
        } // end of behavior for T7__DH1__BUDDY_ELF
        
        // T7__DH1__BUDDY_ELF behavior
        // uml: enter [trace_guard("State T7__DH1__BUDDY_ELF: check behavior `enter / { $gil(this.vars.T7__DH1__GET_BACKUP_history = T7__DH1__GET_BACKUP_HistoryId.T7__DH1__BUDDY_ELF;) }`.", true)] / { $gil(this.vars.T7__DH1__GET_BACKUP_history = T7__DH1__GET_BACKUP_HistoryId.T7__DH1__BUDDY_ELF;) }
        if (____GilData_VarArgsToBool(____GilData_EchoStringBool("trace_guard(\"State T7__DH1__BUDDY_ELF: check behavior `enter / { $gil(this.vars.T7__DH1__GET_BACKUP_history = T7__DH1__GET_BACKUP_HistoryId.T7__DH1__BUDDY_ELF;) }`.\", true)")))
        {
            // Step 1: execute action `$gil(this.vars.T7__DH1__GET_BACKUP_history = T7__DH1__GET_BACKUP_HistoryId.T7__DH1__BUDDY_ELF;)`
            this.vars.T7__DH1__GET_BACKUP_history = T7__DH1__GET_BACKUP_HistoryId.T7__DH1__BUDDY_ELF;
        } // end of behavior for T7__DH1__BUDDY_ELF
    }
    
    private void T7__DH1__BUDDY_ELF_exit()
    {
        // T7__DH1__BUDDY_ELF behavior
        // uml: exit / { trace("Exit T7__DH1__BUDDY_ELF."); }
        {
            // Step 1: execute action `trace("Exit T7__DH1__BUDDY_ELF.");`
            ____GilData_EchoStringVoid("MainClass.Trace(\"Exit T7__DH1__BUDDY_ELF.\");");
        } // end of behavior for T7__DH1__BUDDY_ELF
        
        this.stateId = StateId.T7__DH1__LOCAL_HELP;
    }
    
    private void T7__DH1__BUDDY_ELF_ev1()
    {
        // T7__DH1__BUDDY_ELF behavior
        // uml: EV1 [trace_guard("State T7__DH1__BUDDY_ELF: check behavior `EV1 TransitionTo(T7__DH1__POLAR_BEARS)`.", true)] / { trace("Transition action `` for T7__DH1__BUDDY_ELF to T7__DH1__POLAR_BEARS."); } TransitionTo(T7__DH1__POLAR_BEARS)
        if (____GilData_VarArgsToBool(____GilData_EchoStringBool("trace_guard(\"State T7__DH1__BUDDY_ELF: check behavior `EV1 TransitionTo(T7__DH1__POLAR_BEARS)`.\", true)")))
        {
            // Step 1: Exit states until we reach `T7__DH1__LOCAL_HELP` state (Least Common Ancestor for transition).
            this.T7__DH1__BUDDY_ELF_exit();
            
            // Step 2: Transition action: `trace("Transition action `` for T7__DH1__BUDDY_ELF to T7__DH1__POLAR_BEARS.");`.
            ____GilData_EchoStringVoid("MainClass.Trace(\"Transition action `` for T7__DH1__BUDDY_ELF to T7__DH1__POLAR_BEARS.\");");
            
            // Step 3: Enter/move towards transition target `T7__DH1__POLAR_BEARS`.
            this.T7__DH1__POLAR_BEARS_enter();
            
            // Step 4: complete transition. Ends event dispatch. No other behaviors are checked.
            return;
        } // end of behavior for T7__DH1__BUDDY_ELF
        
        // No ancestor handles this event.
    }
    
    
    ////////////////////////////////////////////////////////////////////////////////
    // event handlers for state T7__DH1__POLAR_BEARS
    ////////////////////////////////////////////////////////////////////////////////
    
    private void T7__DH1__POLAR_BEARS_enter()
    {
        this.stateId = StateId.T7__DH1__POLAR_BEARS;
        
        // T7__DH1__POLAR_BEARS behavior
        // uml: enter / { trace("Enter T7__DH1__POLAR_BEARS."); }
        {
            // Step 1: execute action `trace("Enter T7__DH1__POLAR_BEARS.");`
            ____GilData_EchoStringVoid("MainClass.Trace(\"Enter T7__DH1__POLAR_BEARS.\");");
        } // end of behavior for T7__DH1__POLAR_BEARS
        
        // T7__DH1__POLAR_BEARS behavior
        // uml: enter [trace_guard("State T7__DH1__POLAR_BEARS: check behavior `enter / { $gil(this.vars.T7__DH1__ALIENS_DETECTED_history = T7__DH1__ALIENS_DETECTED_HistoryId.T7__DH1__POLAR_BEARS;) }`.", true)] / { $gil(this.vars.T7__DH1__ALIENS_DETECTED_history = T7__DH1__ALIENS_DETECTED_HistoryId.T7__DH1__POLAR_BEARS;) }
        if (____GilData_VarArgsToBool(____GilData_EchoStringBool("trace_guard(\"State T7__DH1__POLAR_BEARS: check behavior `enter / { $gil(this.vars.T7__DH1__ALIENS_DETECTED_history = T7__DH1__ALIENS_DETECTED_HistoryId.T7__DH1__POLAR_BEARS;) }`.\", true)")))
        {
            // Step 1: execute action `$gil(this.vars.T7__DH1__ALIENS_DETECTED_history = T7__DH1__ALIENS_DETECTED_HistoryId.T7__DH1__POLAR_BEARS;)`
            this.vars.T7__DH1__ALIENS_DETECTED_history = T7__DH1__ALIENS_DETECTED_HistoryId.T7__DH1__POLAR_BEARS;
        } // end of behavior for T7__DH1__POLAR_BEARS
        
        // T7__DH1__POLAR_BEARS behavior
        // uml: enter [trace_guard("State T7__DH1__POLAR_BEARS: check behavior `enter / { $gil(this.vars.T7__DH1__GET_BACKUP_history = T7__DH1__GET_BACKUP_HistoryId.T7__DH1__POLAR_BEARS;) }`.", true)] / { $gil(this.vars.T7__DH1__GET_BACKUP_history = T7__DH1__GET_BACKUP_HistoryId.T7__DH1__POLAR_BEARS;) }
        if (____GilData_VarArgsToBool(____GilData_EchoStringBool("trace_guard(\"State T7__DH1__POLAR_BEARS: check behavior `enter / { $gil(this.vars.T7__DH1__GET_BACKUP_history = T7__DH1__GET_BACKUP_HistoryId.T7__DH1__POLAR_BEARS;) }`.\", true)")))
        {
            // Step 1: execute action `$gil(this.vars.T7__DH1__GET_BACKUP_history = T7__DH1__GET_BACKUP_HistoryId.T7__DH1__POLAR_BEARS;)`
            this.vars.T7__DH1__GET_BACKUP_history = T7__DH1__GET_BACKUP_HistoryId.T7__DH1__POLAR_BEARS;
        } // end of behavior for T7__DH1__POLAR_BEARS
    }
    
    private void T7__DH1__POLAR_BEARS_exit()
    {
        // T7__DH1__POLAR_BEARS behavior
        // uml: exit / { trace("Exit T7__DH1__POLAR_BEARS."); }
        {
            // Step 1: execute action `trace("Exit T7__DH1__POLAR_BEARS.");`
            ____GilData_EchoStringVoid("MainClass.Trace(\"Exit T7__DH1__POLAR_BEARS.\");");
        } // end of behavior for T7__DH1__POLAR_BEARS
        
        this.stateId = StateId.T7__DH1__LOCAL_HELP;
    }
    
    
    ////////////////////////////////////////////////////////////////////////////////
    // event handlers for state T7__DH1__GIVE_COOKIES
    ////////////////////////////////////////////////////////////////////////////////
    
    private void T7__DH1__GIVE_COOKIES_enter()
    {
        this.stateId = StateId.T7__DH1__GIVE_COOKIES;
        
        // T7__DH1__GIVE_COOKIES behavior
        // uml: enter / { trace("Enter T7__DH1__GIVE_COOKIES."); }
        {
            // Step 1: execute action `trace("Enter T7__DH1__GIVE_COOKIES.");`
            ____GilData_EchoStringVoid("MainClass.Trace(\"Enter T7__DH1__GIVE_COOKIES.\");");
        } // end of behavior for T7__DH1__GIVE_COOKIES
        
        // T7__DH1__GIVE_COOKIES behavior
        // uml: enter [trace_guard("State T7__DH1__GIVE_COOKIES: check behavior `enter / { $gil(this.vars.T7__DH1__ALIENS_DETECTED_history = T7__DH1__ALIENS_DETECTED_HistoryId.T7__DH1__GIVE_COOKIES;) }`.", true)] / { $gil(this.vars.T7__DH1__ALIENS_DETECTED_history = T7__DH1__ALIENS_DETECTED_HistoryId.T7__DH1__GIVE_COOKIES;) }
        if (____GilData_VarArgsToBool(____GilData_EchoStringBool("trace_guard(\"State T7__DH1__GIVE_COOKIES: check behavior `enter / { $gil(this.vars.T7__DH1__ALIENS_DETECTED_history = T7__DH1__ALIENS_DETECTED_HistoryId.T7__DH1__GIVE_COOKIES;) }`.\", true)")))
        {
            // Step 1: execute action `$gil(this.vars.T7__DH1__ALIENS_DETECTED_history = T7__DH1__ALIENS_DETECTED_HistoryId.T7__DH1__GIVE_COOKIES;)`
            this.vars.T7__DH1__ALIENS_DETECTED_history = T7__DH1__ALIENS_DETECTED_HistoryId.T7__DH1__GIVE_COOKIES;
        } // end of behavior for T7__DH1__GIVE_COOKIES
    }
    
    private void T7__DH1__GIVE_COOKIES_exit()
    {
        // T7__DH1__GIVE_COOKIES behavior
        // uml: exit / { trace("Exit T7__DH1__GIVE_COOKIES."); }
        {
            // Step 1: execute action `trace("Exit T7__DH1__GIVE_COOKIES.");`
            ____GilData_EchoStringVoid("MainClass.Trace(\"Exit T7__DH1__GIVE_COOKIES.\");");
        } // end of behavior for T7__DH1__GIVE_COOKIES
        
        this.stateId = StateId.T7__DH1__ALIENS_DETECTED;
    }
    
    private void T7__DH1__GIVE_COOKIES_ev1()
    {
        // T7__DH1__GIVE_COOKIES behavior
        // uml: EV1 [trace_guard("State T7__DH1__GIVE_COOKIES: check behavior `EV1 TransitionTo(T7__DH1__CALL_THOR)`.", true)] / { trace("Transition action `` for T7__DH1__GIVE_COOKIES to T7__DH1__CALL_THOR."); } TransitionTo(T7__DH1__CALL_THOR)
        if (____GilData_VarArgsToBool(____GilData_EchoStringBool("trace_guard(\"State T7__DH1__GIVE_COOKIES: check behavior `EV1 TransitionTo(T7__DH1__CALL_THOR)`.\", true)")))
        {
            // Step 1: Exit states until we reach `T7__DH1__ALIENS_DETECTED` state (Least Common Ancestor for transition).
            this.T7__DH1__GIVE_COOKIES_exit();
            
            // Step 2: Transition action: `trace("Transition action `` for T7__DH1__GIVE_COOKIES to T7__DH1__CALL_THOR.");`.
            ____GilData_EchoStringVoid("MainClass.Trace(\"Transition action `` for T7__DH1__GIVE_COOKIES to T7__DH1__CALL_THOR.\");");
            
            // Step 3: Enter/move towards transition target `T7__DH1__CALL_THOR`.
            this.T7__DH1__GET_BACKUP_enter();
            this.T7__DH1__HERO_enter();
            this.T7__DH1__CALL_THOR_enter();
            
            // Step 4: complete transition. Ends event dispatch. No other behaviors are checked.
            return;
        } // end of behavior for T7__DH1__GIVE_COOKIES
        
        // No ancestor handles this event.
    }
    
    
    ////////////////////////////////////////////////////////////////////////////////
    // event handlers for state T7__DH1__SNOWBALL_FIGHT
    ////////////////////////////////////////////////////////////////////////////////
    
    private void T7__DH1__SNOWBALL_FIGHT_enter()
    {
        this.stateId = StateId.T7__DH1__SNOWBALL_FIGHT;
        
        // T7__DH1__SNOWBALL_FIGHT behavior
        // uml: enter / { trace("Enter T7__DH1__SNOWBALL_FIGHT."); }
        {
            // Step 1: execute action `trace("Enter T7__DH1__SNOWBALL_FIGHT.");`
            ____GilData_EchoStringVoid("MainClass.Trace(\"Enter T7__DH1__SNOWBALL_FIGHT.\");");
        } // end of behavior for T7__DH1__SNOWBALL_FIGHT
        
        // T7__DH1__SNOWBALL_FIGHT behavior
        // uml: enter [trace_guard("State T7__DH1__SNOWBALL_FIGHT: check behavior `enter / { $gil(this.vars.T7__DH1__ALIENS_DETECTED_history = T7__DH1__ALIENS_DETECTED_HistoryId.T7__DH1__SNOWBALL_FIGHT;) }`.", true)] / { $gil(this.vars.T7__DH1__ALIENS_DETECTED_history = T7__DH1__ALIENS_DETECTED_HistoryId.T7__DH1__SNOWBALL_FIGHT;) }
        if (____GilData_VarArgsToBool(____GilData_EchoStringBool("trace_guard(\"State T7__DH1__SNOWBALL_FIGHT: check behavior `enter / { $gil(this.vars.T7__DH1__ALIENS_DETECTED_history = T7__DH1__ALIENS_DETECTED_HistoryId.T7__DH1__SNOWBALL_FIGHT;) }`.\", true)")))
        {
            // Step 1: execute action `$gil(this.vars.T7__DH1__ALIENS_DETECTED_history = T7__DH1__ALIENS_DETECTED_HistoryId.T7__DH1__SNOWBALL_FIGHT;)`
            this.vars.T7__DH1__ALIENS_DETECTED_history = T7__DH1__ALIENS_DETECTED_HistoryId.T7__DH1__SNOWBALL_FIGHT;
        } // end of behavior for T7__DH1__SNOWBALL_FIGHT
    }
    
    private void T7__DH1__SNOWBALL_FIGHT_exit()
    {
        // T7__DH1__SNOWBALL_FIGHT behavior
        // uml: exit / { trace("Exit T7__DH1__SNOWBALL_FIGHT."); }
        {
            // Step 1: execute action `trace("Exit T7__DH1__SNOWBALL_FIGHT.");`
            ____GilData_EchoStringVoid("MainClass.Trace(\"Exit T7__DH1__SNOWBALL_FIGHT.\");");
        } // end of behavior for T7__DH1__SNOWBALL_FIGHT
        
        this.stateId = StateId.T7__DH1__ALIENS_DETECTED;
    }
    
    private void T7__DH1__SNOWBALL_FIGHT_ev1()
    {
        // T7__DH1__SNOWBALL_FIGHT behavior
        // uml: EV1 [trace_guard("State T7__DH1__SNOWBALL_FIGHT: check behavior `EV1 TransitionTo(T7__DH1__GIVE_COOKIES)`.", true)] / { trace("Transition action `` for T7__DH1__SNOWBALL_FIGHT to T7__DH1__GIVE_COOKIES."); } TransitionTo(T7__DH1__GIVE_COOKIES)
        if (____GilData_VarArgsToBool(____GilData_EchoStringBool("trace_guard(\"State T7__DH1__SNOWBALL_FIGHT: check behavior `EV1 TransitionTo(T7__DH1__GIVE_COOKIES)`.\", true)")))
        {
            // Step 1: Exit states until we reach `T7__DH1__ALIENS_DETECTED` state (Least Common Ancestor for transition).
            this.T7__DH1__SNOWBALL_FIGHT_exit();
            
            // Step 2: Transition action: `trace("Transition action `` for T7__DH1__SNOWBALL_FIGHT to T7__DH1__GIVE_COOKIES.");`.
            ____GilData_EchoStringVoid("MainClass.Trace(\"Transition action `` for T7__DH1__SNOWBALL_FIGHT to T7__DH1__GIVE_COOKIES.\");");
            
            // Step 3: Enter/move towards transition target `T7__DH1__GIVE_COOKIES`.
            this.T7__DH1__GIVE_COOKIES_enter();
            
            // Step 4: complete transition. Ends event dispatch. No other behaviors are checked.
            return;
        } // end of behavior for T7__DH1__SNOWBALL_FIGHT
        
        // No ancestor handles this event.
    }
    
    
    ////////////////////////////////////////////////////////////////////////////////
    // event handlers for state T7__DH1__BUILD
    ////////////////////////////////////////////////////////////////////////////////
    
    private void T7__DH1__BUILD_enter()
    {
        this.stateId = StateId.T7__DH1__BUILD;
        
        // T7__DH1__BUILD behavior
        // uml: enter / { trace("Enter T7__DH1__BUILD."); }
        {
            // Step 1: execute action `trace("Enter T7__DH1__BUILD.");`
            ____GilData_EchoStringVoid("MainClass.Trace(\"Enter T7__DH1__BUILD.\");");
        } // end of behavior for T7__DH1__BUILD
    }
    
    private void T7__DH1__BUILD_exit()
    {
        // T7__DH1__BUILD behavior
        // uml: exit / { trace("Exit T7__DH1__BUILD."); }
        {
            // Step 1: execute action `trace("Exit T7__DH1__BUILD.");`
            ____GilData_EchoStringVoid("MainClass.Trace(\"Exit T7__DH1__BUILD.\");");
        } // end of behavior for T7__DH1__BUILD
        
        this.stateId = StateId.T7__DH1__SANTAS_WORKSHOP;
    }
    
    private void T7__DH1__BUILD_ev6()
    {
        // T7__DH1__BUILD behavior
        // uml: EV6 [trace_guard("State T7__DH1__BUILD: check behavior `EV6 TransitionTo(T7__DH1__ALIENS_DETECTED)`.", true)] / { trace("Transition action `` for T7__DH1__BUILD to T7__DH1__ALIENS_DETECTED."); } TransitionTo(T7__DH1__ALIENS_DETECTED)
        if (____GilData_VarArgsToBool(____GilData_EchoStringBool("trace_guard(\"State T7__DH1__BUILD: check behavior `EV6 TransitionTo(T7__DH1__ALIENS_DETECTED)`.\", true)")))
        {
            // Step 1: Exit states until we reach `T7__DH1__SANTAS_WORKSHOP` state (Least Common Ancestor for transition).
            this.ExitUpToStateHandler(StateId.T7__DH1__SANTAS_WORKSHOP);
            
            // Step 2: Transition action: `trace("Transition action `` for T7__DH1__BUILD to T7__DH1__ALIENS_DETECTED.");`.
            ____GilData_EchoStringVoid("MainClass.Trace(\"Transition action `` for T7__DH1__BUILD to T7__DH1__ALIENS_DETECTED.\");");
            
            // Step 3: Enter/move towards transition target `T7__DH1__ALIENS_DETECTED`.
            this.T7__DH1__ALIENS_DETECTED_enter();
            
            // T7__DH1__ALIENS_DETECTED.<InitialState> behavior
            // uml: / { trace("Transition action `` for T7__DH1__ALIENS_DETECTED.<InitialState> to T7__DH1__ALIENS_DETECTED.<History>."); } TransitionTo(T7__DH1__ALIENS_DETECTED.<History>)
            {
                // Step 1: Exit states until we reach `T7__DH1__ALIENS_DETECTED` state (Least Common Ancestor for transition). Already at LCA, no exiting required.
                
                // Step 2: Transition action: `trace("Transition action `` for T7__DH1__ALIENS_DETECTED.<InitialState> to T7__DH1__ALIENS_DETECTED.<History>.");`.
                ____GilData_EchoStringVoid("MainClass.Trace(\"Transition action `` for T7__DH1__ALIENS_DETECTED.<InitialState> to T7__DH1__ALIENS_DETECTED.<History>.\");");
                
                // Step 3: Enter/move towards transition target `T7__DH1__ALIENS_DETECTED.<History>`.
                // T7__DH1__ALIENS_DETECTED.<History> is a pseudo state and cannot have an `enter` trigger.
                
                // T7__DH1__ALIENS_DETECTED.<History> behavior
                // uml: [$gil(this.vars.T7__DH1__ALIENS_DETECTED_history == T7__DH1__ALIENS_DETECTED_HistoryId.T7__DH1__GIVE_COOKIES)] / { trace("Transition action `` for T7__DH1__ALIENS_DETECTED.<History> to T7__DH1__GIVE_COOKIES."); } TransitionTo(T7__DH1__GIVE_COOKIES)
                if (____GilData_VarArgsToBool(this.vars.T7__DH1__ALIENS_DETECTED_history == T7__DH1__ALIENS_DETECTED_HistoryId.T7__DH1__GIVE_COOKIES))
                {
                    // Step 1: Exit states until we reach `T7__DH1__ALIENS_DETECTED` state (Least Common Ancestor for transition). Already at LCA, no exiting required.
                    
                    // Step 2: Transition action: `trace("Transition action `` for T7__DH1__ALIENS_DETECTED.<History> to T7__DH1__GIVE_COOKIES.");`.
                    ____GilData_EchoStringVoid("MainClass.Trace(\"Transition action `` for T7__DH1__ALIENS_DETECTED.<History> to T7__DH1__GIVE_COOKIES.\");");
                    
                    // Step 3: Enter/move towards transition target `T7__DH1__GIVE_COOKIES`.
                    this.T7__DH1__GIVE_COOKIES_enter();
                    
                    // Step 4: complete transition. Ends event dispatch. No other behaviors are checked.
                    return;
                } // end of behavior for T7__DH1__ALIENS_DETECTED.<History>
                
                // T7__DH1__ALIENS_DETECTED.<History> behavior
                // uml: [$gil(this.vars.T7__DH1__ALIENS_DETECTED_history == T7__DH1__ALIENS_DETECTED_HistoryId.T7__DH1__HERO)] / { trace("Transition action `` for T7__DH1__ALIENS_DETECTED.<History> to T7__DH1__HERO."); } TransitionTo(T7__DH1__HERO)
                if (____GilData_VarArgsToBool(this.vars.T7__DH1__ALIENS_DETECTED_history == T7__DH1__ALIENS_DETECTED_HistoryId.T7__DH1__HERO))
                {
                    // Step 1: Exit states until we reach `T7__DH1__ALIENS_DETECTED` state (Least Common Ancestor for transition). Already at LCA, no exiting required.
                    
                    // Step 2: Transition action: `trace("Transition action `` for T7__DH1__ALIENS_DETECTED.<History> to T7__DH1__HERO.");`.
                    ____GilData_EchoStringVoid("MainClass.Trace(\"Transition action `` for T7__DH1__ALIENS_DETECTED.<History> to T7__DH1__HERO.\");");
                    
                    // Step 3: Enter/move towards transition target `T7__DH1__HERO`.
                    this.T7__DH1__GET_BACKUP_enter();
                    this.T7__DH1__HERO_enter();
                    
                    // Finish transition by calling pseudo state transition function.
                    this.T7__DH1__HERO_InitialState_transition();
                    return; // event processing immediately stops when a transition finishes. No other behaviors for this state are checked.
                } // end of behavior for T7__DH1__ALIENS_DETECTED.<History>
                
                // T7__DH1__ALIENS_DETECTED.<History> behavior
                // uml: [$gil(this.vars.T7__DH1__ALIENS_DETECTED_history == T7__DH1__ALIENS_DETECTED_HistoryId.T7__DH1__BUDDY_ELF)] / { trace("Transition action `` for T7__DH1__ALIENS_DETECTED.<History> to T7__DH1__BUDDY_ELF."); } TransitionTo(T7__DH1__BUDDY_ELF)
                if (____GilData_VarArgsToBool(this.vars.T7__DH1__ALIENS_DETECTED_history == T7__DH1__ALIENS_DETECTED_HistoryId.T7__DH1__BUDDY_ELF))
                {
                    // Step 1: Exit states until we reach `T7__DH1__ALIENS_DETECTED` state (Least Common Ancestor for transition). Already at LCA, no exiting required.
                    
                    // Step 2: Transition action: `trace("Transition action `` for T7__DH1__ALIENS_DETECTED.<History> to T7__DH1__BUDDY_ELF.");`.
                    ____GilData_EchoStringVoid("MainClass.Trace(\"Transition action `` for T7__DH1__ALIENS_DETECTED.<History> to T7__DH1__BUDDY_ELF.\");");
                    
                    // Step 3: Enter/move towards transition target `T7__DH1__BUDDY_ELF`.
                    this.T7__DH1__GET_BACKUP_enter();
                    this.T7__DH1__LOCAL_HELP_enter();
                    this.T7__DH1__BUDDY_ELF_enter();
                    
                    // Step 4: complete transition. Ends event dispatch. No other behaviors are checked.
                    return;
                } // end of behavior for T7__DH1__ALIENS_DETECTED.<History>
                
                // T7__DH1__ALIENS_DETECTED.<History> behavior
                // uml: [$gil(this.vars.T7__DH1__ALIENS_DETECTED_history == T7__DH1__ALIENS_DETECTED_HistoryId.T7__DH1__POLAR_BEARS)] / { trace("Transition action `` for T7__DH1__ALIENS_DETECTED.<History> to T7__DH1__POLAR_BEARS."); } TransitionTo(T7__DH1__POLAR_BEARS)
                if (____GilData_VarArgsToBool(this.vars.T7__DH1__ALIENS_DETECTED_history == T7__DH1__ALIENS_DETECTED_HistoryId.T7__DH1__POLAR_BEARS))
                {
                    // Step 1: Exit states until we reach `T7__DH1__ALIENS_DETECTED` state (Least Common Ancestor for transition). Already at LCA, no exiting required.
                    
                    // Step 2: Transition action: `trace("Transition action `` for T7__DH1__ALIENS_DETECTED.<History> to T7__DH1__POLAR_BEARS.");`.
                    ____GilData_EchoStringVoid("MainClass.Trace(\"Transition action `` for T7__DH1__ALIENS_DETECTED.<History> to T7__DH1__POLAR_BEARS.\");");
                    
                    // Step 3: Enter/move towards transition target `T7__DH1__POLAR_BEARS`.
                    this.T7__DH1__GET_BACKUP_enter();
                    this.T7__DH1__LOCAL_HELP_enter();
                    this.T7__DH1__POLAR_BEARS_enter();
                    
                    // Step 4: complete transition. Ends event dispatch. No other behaviors are checked.
                    return;
                } // end of behavior for T7__DH1__ALIENS_DETECTED.<History>
                
                // T7__DH1__ALIENS_DETECTED.<History> behavior
                // uml: else / { trace("Transition action `` for T7__DH1__ALIENS_DETECTED.<History> to T7__DH1__SNOWBALL_FIGHT."); } TransitionTo(T7__DH1__SNOWBALL_FIGHT)
                {
                    // Step 1: Exit states until we reach `T7__DH1__ALIENS_DETECTED` state (Least Common Ancestor for transition). Already at LCA, no exiting required.
                    
                    // Step 2: Transition action: `trace("Transition action `` for T7__DH1__ALIENS_DETECTED.<History> to T7__DH1__SNOWBALL_FIGHT.");`.
                    ____GilData_EchoStringVoid("MainClass.Trace(\"Transition action `` for T7__DH1__ALIENS_DETECTED.<History> to T7__DH1__SNOWBALL_FIGHT.\");");
                    
                    // Step 3: Enter/move towards transition target `T7__DH1__SNOWBALL_FIGHT`.
                    this.T7__DH1__SNOWBALL_FIGHT_enter();
                    
                    // Step 4: complete transition. Ends event dispatch. No other behaviors are checked.
                    return;
                } // end of behavior for T7__DH1__ALIENS_DETECTED.<History>
            } // end of behavior for T7__DH1__ALIENS_DETECTED.<InitialState>
        } // end of behavior for T7__DH1__BUILD
        
        // No ancestor handles this event.
    }
    
    private void T7__DH1__BUILD_ev7()
    {
        // T7__DH1__BUILD behavior
        // uml: EV7 [trace_guard("State T7__DH1__BUILD: check behavior `EV7 TransitionTo(T7__DH1__GET_BACKUP.<History>)`.", true)] / { trace("Transition action `` for T7__DH1__BUILD to T7__DH1__GET_BACKUP.<History>."); } TransitionTo(T7__DH1__GET_BACKUP.<History>)
        if (____GilData_VarArgsToBool(____GilData_EchoStringBool("trace_guard(\"State T7__DH1__BUILD: check behavior `EV7 TransitionTo(T7__DH1__GET_BACKUP.<History>)`.\", true)")))
        {
            // Step 1: Exit states until we reach `T7__DH1__SANTAS_WORKSHOP` state (Least Common Ancestor for transition).
            this.ExitUpToStateHandler(StateId.T7__DH1__SANTAS_WORKSHOP);
            
            // Step 2: Transition action: `trace("Transition action `` for T7__DH1__BUILD to T7__DH1__GET_BACKUP.<History>.");`.
            ____GilData_EchoStringVoid("MainClass.Trace(\"Transition action `` for T7__DH1__BUILD to T7__DH1__GET_BACKUP.<History>.\");");
            
            // Step 3: Enter/move towards transition target `T7__DH1__GET_BACKUP.<History>`.
            this.T7__DH1__ALIENS_DETECTED_enter();
            this.T7__DH1__GET_BACKUP_enter();
            // T7__DH1__GET_BACKUP.<History> is a pseudo state and cannot have an `enter` trigger.
            
            // T7__DH1__GET_BACKUP.<History> behavior
            // uml: [$gil(this.vars.T7__DH1__GET_BACKUP_history == T7__DH1__GET_BACKUP_HistoryId.T7__DH1__HERO)] / { trace("Transition action `` for T7__DH1__GET_BACKUP.<History> to T7__DH1__HERO."); } TransitionTo(T7__DH1__HERO)
            if (____GilData_VarArgsToBool(this.vars.T7__DH1__GET_BACKUP_history == T7__DH1__GET_BACKUP_HistoryId.T7__DH1__HERO))
            {
                // Step 1: Exit states until we reach `T7__DH1__GET_BACKUP` state (Least Common Ancestor for transition). Already at LCA, no exiting required.
                
                // Step 2: Transition action: `trace("Transition action `` for T7__DH1__GET_BACKUP.<History> to T7__DH1__HERO.");`.
                ____GilData_EchoStringVoid("MainClass.Trace(\"Transition action `` for T7__DH1__GET_BACKUP.<History> to T7__DH1__HERO.\");");
                
                // Step 3: Enter/move towards transition target `T7__DH1__HERO`.
                this.T7__DH1__HERO_enter();
                
                // Finish transition by calling pseudo state transition function.
                this.T7__DH1__HERO_InitialState_transition();
                return; // event processing immediately stops when a transition finishes. No other behaviors for this state are checked.
            } // end of behavior for T7__DH1__GET_BACKUP.<History>
            
            // T7__DH1__GET_BACKUP.<History> behavior
            // uml: [$gil(this.vars.T7__DH1__GET_BACKUP_history == T7__DH1__GET_BACKUP_HistoryId.T7__DH1__BUDDY_ELF)] / { trace("Transition action `` for T7__DH1__GET_BACKUP.<History> to T7__DH1__BUDDY_ELF."); } TransitionTo(T7__DH1__BUDDY_ELF)
            if (____GilData_VarArgsToBool(this.vars.T7__DH1__GET_BACKUP_history == T7__DH1__GET_BACKUP_HistoryId.T7__DH1__BUDDY_ELF))
            {
                // Step 1: Exit states until we reach `T7__DH1__GET_BACKUP` state (Least Common Ancestor for transition). Already at LCA, no exiting required.
                
                // Step 2: Transition action: `trace("Transition action `` for T7__DH1__GET_BACKUP.<History> to T7__DH1__BUDDY_ELF.");`.
                ____GilData_EchoStringVoid("MainClass.Trace(\"Transition action `` for T7__DH1__GET_BACKUP.<History> to T7__DH1__BUDDY_ELF.\");");
                
                // Step 3: Enter/move towards transition target `T7__DH1__BUDDY_ELF`.
                this.T7__DH1__LOCAL_HELP_enter();
                this.T7__DH1__BUDDY_ELF_enter();
                
                // Step 4: complete transition. Ends event dispatch. No other behaviors are checked.
                return;
            } // end of behavior for T7__DH1__GET_BACKUP.<History>
            
            // T7__DH1__GET_BACKUP.<History> behavior
            // uml: [$gil(this.vars.T7__DH1__GET_BACKUP_history == T7__DH1__GET_BACKUP_HistoryId.T7__DH1__POLAR_BEARS)] / { trace("Transition action `` for T7__DH1__GET_BACKUP.<History> to T7__DH1__POLAR_BEARS."); } TransitionTo(T7__DH1__POLAR_BEARS)
            if (____GilData_VarArgsToBool(this.vars.T7__DH1__GET_BACKUP_history == T7__DH1__GET_BACKUP_HistoryId.T7__DH1__POLAR_BEARS))
            {
                // Step 1: Exit states until we reach `T7__DH1__GET_BACKUP` state (Least Common Ancestor for transition). Already at LCA, no exiting required.
                
                // Step 2: Transition action: `trace("Transition action `` for T7__DH1__GET_BACKUP.<History> to T7__DH1__POLAR_BEARS.");`.
                ____GilData_EchoStringVoid("MainClass.Trace(\"Transition action `` for T7__DH1__GET_BACKUP.<History> to T7__DH1__POLAR_BEARS.\");");
                
                // Step 3: Enter/move towards transition target `T7__DH1__POLAR_BEARS`.
                this.T7__DH1__LOCAL_HELP_enter();
                this.T7__DH1__POLAR_BEARS_enter();
                
                // Step 4: complete transition. Ends event dispatch. No other behaviors are checked.
                return;
            } // end of behavior for T7__DH1__GET_BACKUP.<History>
            
            // T7__DH1__GET_BACKUP.<History> behavior
            // uml: else / { trace("Transition action `` for T7__DH1__GET_BACKUP.<History> to T7__DH1__GET_BACKUP.<ChoicePoint>()."); } TransitionTo(T7__DH1__GET_BACKUP.<ChoicePoint>())
            {
                // Step 1: Exit states until we reach `T7__DH1__GET_BACKUP` state (Least Common Ancestor for transition). Already at LCA, no exiting required.
                
                // Step 2: Transition action: `trace("Transition action `` for T7__DH1__GET_BACKUP.<History> to T7__DH1__GET_BACKUP.<ChoicePoint>().");`.
                ____GilData_EchoStringVoid("MainClass.Trace(\"Transition action `` for T7__DH1__GET_BACKUP.<History> to T7__DH1__GET_BACKUP.<ChoicePoint>().\");");
                
                // Step 3: Enter/move towards transition target `T7__DH1__GET_BACKUP.<ChoicePoint>()`.
                // T7__DH1__GET_BACKUP.<ChoicePoint>() is a pseudo state and cannot have an `enter` trigger.
                
                // T7__DH1__GET_BACKUP.<ChoicePoint>() behavior
                // uml: / { trace("Transition action `` for T7__DH1__GET_BACKUP.<ChoicePoint>() to T7__DH1__HERO."); } TransitionTo(T7__DH1__HERO)
                {
                    // Step 1: Exit states until we reach `T7__DH1__GET_BACKUP` state (Least Common Ancestor for transition). Already at LCA, no exiting required.
                    
                    // Step 2: Transition action: `trace("Transition action `` for T7__DH1__GET_BACKUP.<ChoicePoint>() to T7__DH1__HERO.");`.
                    ____GilData_EchoStringVoid("MainClass.Trace(\"Transition action `` for T7__DH1__GET_BACKUP.<ChoicePoint>() to T7__DH1__HERO.\");");
                    
                    // Step 3: Enter/move towards transition target `T7__DH1__HERO`.
                    this.T7__DH1__HERO_enter();
                    
                    // Finish transition by calling pseudo state transition function.
                    this.T7__DH1__HERO_InitialState_transition();
                    return; // event processing immediately stops when a transition finishes. No other behaviors for this state are checked.
                } // end of behavior for T7__DH1__GET_BACKUP.<ChoicePoint>()
            } // end of behavior for T7__DH1__GET_BACKUP.<History>
        } // end of behavior for T7__DH1__BUILD
        
        // No ancestor handles this event.
    }
    
    private void T7__DH1__BUILD_InitialState_transition()
    {
        // T7__DH1__BUILD.<InitialState> behavior
        // uml: / { trace("Transition action `` for T7__DH1__BUILD.<InitialState> to T7__DH1__BUILD.<History>."); } TransitionTo(T7__DH1__BUILD.<History>)
        {
            // Step 1: Exit states until we reach `T7__DH1__BUILD` state (Least Common Ancestor for transition). Already at LCA, no exiting required.
            
            // Step 2: Transition action: `trace("Transition action `` for T7__DH1__BUILD.<InitialState> to T7__DH1__BUILD.<History>.");`.
            ____GilData_EchoStringVoid("MainClass.Trace(\"Transition action `` for T7__DH1__BUILD.<InitialState> to T7__DH1__BUILD.<History>.\");");
            
            // Step 3: Enter/move towards transition target `T7__DH1__BUILD.<History>`.
            // T7__DH1__BUILD.<History> is a pseudo state and cannot have an `enter` trigger.
            
            // T7__DH1__BUILD.<History> behavior
            // uml: [$gil(this.vars.T7__DH1__BUILD_history == T7__DH1__BUILD_HistoryId.T7__DH1__TOOL)] / { trace("Transition action `` for T7__DH1__BUILD.<History> to T7__DH1__TOOL."); } TransitionTo(T7__DH1__TOOL)
            if (____GilData_VarArgsToBool(this.vars.T7__DH1__BUILD_history == T7__DH1__BUILD_HistoryId.T7__DH1__TOOL))
            {
                // Step 1: Exit states until we reach `T7__DH1__BUILD` state (Least Common Ancestor for transition). Already at LCA, no exiting required.
                
                // Step 2: Transition action: `trace("Transition action `` for T7__DH1__BUILD.<History> to T7__DH1__TOOL.");`.
                ____GilData_EchoStringVoid("MainClass.Trace(\"Transition action `` for T7__DH1__BUILD.<History> to T7__DH1__TOOL.\");");
                
                // Step 3: Enter/move towards transition target `T7__DH1__TOOL`.
                this.T7__DH1__TOOL_enter();
                
                // Finish transition by calling pseudo state transition function.
                this.T7__DH1__TOOL_InitialState_transition();
                return; // event processing immediately stops when a transition finishes. No other behaviors for this state are checked.
            } // end of behavior for T7__DH1__BUILD.<History>
            
            // T7__DH1__BUILD.<History> behavior
            // uml: [$gil(this.vars.T7__DH1__BUILD_history == T7__DH1__BUILD_HistoryId.T7__DH1__RACE_CAR)] / { trace("Transition action `` for T7__DH1__BUILD.<History> to T7__DH1__RACE_CAR."); } TransitionTo(T7__DH1__RACE_CAR)
            if (____GilData_VarArgsToBool(this.vars.T7__DH1__BUILD_history == T7__DH1__BUILD_HistoryId.T7__DH1__RACE_CAR))
            {
                // Step 1: Exit states until we reach `T7__DH1__BUILD` state (Least Common Ancestor for transition). Already at LCA, no exiting required.
                
                // Step 2: Transition action: `trace("Transition action `` for T7__DH1__BUILD.<History> to T7__DH1__RACE_CAR.");`.
                ____GilData_EchoStringVoid("MainClass.Trace(\"Transition action `` for T7__DH1__BUILD.<History> to T7__DH1__RACE_CAR.\");");
                
                // Step 3: Enter/move towards transition target `T7__DH1__RACE_CAR`.
                this.T7__DH1__TOY_enter();
                this.T7__DH1__RACE_CAR_enter();
                
                // Step 4: complete transition. Ends event dispatch. No other behaviors are checked.
                return;
            } // end of behavior for T7__DH1__BUILD.<History>
            
            // T7__DH1__BUILD.<History> behavior
            // uml: [$gil(this.vars.T7__DH1__BUILD_history == T7__DH1__BUILD_HistoryId.T7__DH1__TEDDY_BEAR)] / { trace("Transition action `` for T7__DH1__BUILD.<History> to T7__DH1__TEDDY_BEAR."); } TransitionTo(T7__DH1__TEDDY_BEAR)
            if (____GilData_VarArgsToBool(this.vars.T7__DH1__BUILD_history == T7__DH1__BUILD_HistoryId.T7__DH1__TEDDY_BEAR))
            {
                // Step 1: Exit states until we reach `T7__DH1__BUILD` state (Least Common Ancestor for transition). Already at LCA, no exiting required.
                
                // Step 2: Transition action: `trace("Transition action `` for T7__DH1__BUILD.<History> to T7__DH1__TEDDY_BEAR.");`.
                ____GilData_EchoStringVoid("MainClass.Trace(\"Transition action `` for T7__DH1__BUILD.<History> to T7__DH1__TEDDY_BEAR.\");");
                
                // Step 3: Enter/move towards transition target `T7__DH1__TEDDY_BEAR`.
                this.T7__DH1__TOY_enter();
                this.T7__DH1__TEDDY_BEAR_enter();
                
                // Step 4: complete transition. Ends event dispatch. No other behaviors are checked.
                return;
            } // end of behavior for T7__DH1__BUILD.<History>
            
            // T7__DH1__BUILD.<History> behavior
            // uml: [$gil(this.vars.T7__DH1__BUILD_history == T7__DH1__BUILD_HistoryId.T7__DH1__GLOW_WORM)] / { trace("Transition action `` for T7__DH1__BUILD.<History> to T7__DH1__GLOW_WORM."); } TransitionTo(T7__DH1__GLOW_WORM)
            if (____GilData_VarArgsToBool(this.vars.T7__DH1__BUILD_history == T7__DH1__BUILD_HistoryId.T7__DH1__GLOW_WORM))
            {
                // Step 1: Exit states until we reach `T7__DH1__BUILD` state (Least Common Ancestor for transition). Already at LCA, no exiting required.
                
                // Step 2: Transition action: `trace("Transition action `` for T7__DH1__BUILD.<History> to T7__DH1__GLOW_WORM.");`.
                ____GilData_EchoStringVoid("MainClass.Trace(\"Transition action `` for T7__DH1__BUILD.<History> to T7__DH1__GLOW_WORM.\");");
                
                // Step 3: Enter/move towards transition target `T7__DH1__GLOW_WORM`.
                this.T7__DH1__TOY_enter();
                this.T7__DH1__GLOW_WORM_enter();
                
                // Step 4: complete transition. Ends event dispatch. No other behaviors are checked.
                return;
            } // end of behavior for T7__DH1__BUILD.<History>
            
            // T7__DH1__BUILD.<History> behavior
            // uml: [$gil(this.vars.T7__DH1__BUILD_history == T7__DH1__BUILD_HistoryId.T7__DH1__ROBOT)] / { trace("Transition action `` for T7__DH1__BUILD.<History> to T7__DH1__ROBOT."); } TransitionTo(T7__DH1__ROBOT)
            if (____GilData_VarArgsToBool(this.vars.T7__DH1__BUILD_history == T7__DH1__BUILD_HistoryId.T7__DH1__ROBOT))
            {
                // Step 1: Exit states until we reach `T7__DH1__BUILD` state (Least Common Ancestor for transition). Already at LCA, no exiting required.
                
                // Step 2: Transition action: `trace("Transition action `` for T7__DH1__BUILD.<History> to T7__DH1__ROBOT.");`.
                ____GilData_EchoStringVoid("MainClass.Trace(\"Transition action `` for T7__DH1__BUILD.<History> to T7__DH1__ROBOT.\");");
                
                // Step 3: Enter/move towards transition target `T7__DH1__ROBOT`.
                this.T7__DH1__TOY_enter();
                this.T7__DH1__ROBOT_enter();
                
                // Finish transition by calling pseudo state transition function.
                this.T7__DH1__ROBOT_InitialState_transition();
                return; // event processing immediately stops when a transition finishes. No other behaviors for this state are checked.
            } // end of behavior for T7__DH1__BUILD.<History>
            
            // T7__DH1__BUILD.<History> behavior
            // uml: [$gil(this.vars.T7__DH1__BUILD_history == T7__DH1__BUILD_HistoryId.T7__DH1__BATTLEBOT)] / { trace("Transition action `` for T7__DH1__BUILD.<History> to T7__DH1__BATTLEBOT."); } TransitionTo(T7__DH1__BATTLEBOT)
            if (____GilData_VarArgsToBool(this.vars.T7__DH1__BUILD_history == T7__DH1__BUILD_HistoryId.T7__DH1__BATTLEBOT))
            {
                // Step 1: Exit states until we reach `T7__DH1__BUILD` state (Least Common Ancestor for transition). Already at LCA, no exiting required.
                
                // Step 2: Transition action: `trace("Transition action `` for T7__DH1__BUILD.<History> to T7__DH1__BATTLEBOT.");`.
                ____GilData_EchoStringVoid("MainClass.Trace(\"Transition action `` for T7__DH1__BUILD.<History> to T7__DH1__BATTLEBOT.\");");
                
                // Step 3: Enter/move towards transition target `T7__DH1__BATTLEBOT`.
                this.T7__DH1__TOY_enter();
                this.T7__DH1__ROBOT_enter();
                this.T7__DH1__BATTLEBOT_enter();
                
                // Step 4: complete transition. Ends event dispatch. No other behaviors are checked.
                return;
            } // end of behavior for T7__DH1__BUILD.<History>
            
            // T7__DH1__BUILD.<History> behavior
            // uml: [$gil(this.vars.T7__DH1__BUILD_history == T7__DH1__BUILD_HistoryId.T7__DH1__WALL_E)] / { trace("Transition action `` for T7__DH1__BUILD.<History> to T7__DH1__WALL_E."); } TransitionTo(T7__DH1__WALL_E)
            if (____GilData_VarArgsToBool(this.vars.T7__DH1__BUILD_history == T7__DH1__BUILD_HistoryId.T7__DH1__WALL_E))
            {
                // Step 1: Exit states until we reach `T7__DH1__BUILD` state (Least Common Ancestor for transition). Already at LCA, no exiting required.
                
                // Step 2: Transition action: `trace("Transition action `` for T7__DH1__BUILD.<History> to T7__DH1__WALL_E.");`.
                ____GilData_EchoStringVoid("MainClass.Trace(\"Transition action `` for T7__DH1__BUILD.<History> to T7__DH1__WALL_E.\");");
                
                // Step 3: Enter/move towards transition target `T7__DH1__WALL_E`.
                this.T7__DH1__TOY_enter();
                this.T7__DH1__ROBOT_enter();
                this.T7__DH1__WALL_E_enter();
                
                // Step 4: complete transition. Ends event dispatch. No other behaviors are checked.
                return;
            } // end of behavior for T7__DH1__BUILD.<History>
            
            // T7__DH1__BUILD.<History> behavior
            // uml: [$gil(this.vars.T7__DH1__BUILD_history == T7__DH1__BUILD_HistoryId.T7__DH1__IMPACT_DRILL)] / { trace("Transition action `` for T7__DH1__BUILD.<History> to T7__DH1__IMPACT_DRILL."); } TransitionTo(T7__DH1__IMPACT_DRILL)
            if (____GilData_VarArgsToBool(this.vars.T7__DH1__BUILD_history == T7__DH1__BUILD_HistoryId.T7__DH1__IMPACT_DRILL))
            {
                // Step 1: Exit states until we reach `T7__DH1__BUILD` state (Least Common Ancestor for transition). Already at LCA, no exiting required.
                
                // Step 2: Transition action: `trace("Transition action `` for T7__DH1__BUILD.<History> to T7__DH1__IMPACT_DRILL.");`.
                ____GilData_EchoStringVoid("MainClass.Trace(\"Transition action `` for T7__DH1__BUILD.<History> to T7__DH1__IMPACT_DRILL.\");");
                
                // Step 3: Enter/move towards transition target `T7__DH1__IMPACT_DRILL`.
                this.T7__DH1__TOOL_enter();
                this.T7__DH1__IMPACT_DRILL_enter();
                
                // Step 4: complete transition. Ends event dispatch. No other behaviors are checked.
                return;
            } // end of behavior for T7__DH1__BUILD.<History>
            
            // T7__DH1__BUILD.<History> behavior
            // uml: [$gil(this.vars.T7__DH1__BUILD_history == T7__DH1__BUILD_HistoryId.T7__DH1__CIRCULAR_SAW)] / { trace("Transition action `` for T7__DH1__BUILD.<History> to T7__DH1__CIRCULAR_SAW."); } TransitionTo(T7__DH1__CIRCULAR_SAW)
            if (____GilData_VarArgsToBool(this.vars.T7__DH1__BUILD_history == T7__DH1__BUILD_HistoryId.T7__DH1__CIRCULAR_SAW))
            {
                // Step 1: Exit states until we reach `T7__DH1__BUILD` state (Least Common Ancestor for transition). Already at LCA, no exiting required.
                
                // Step 2: Transition action: `trace("Transition action `` for T7__DH1__BUILD.<History> to T7__DH1__CIRCULAR_SAW.");`.
                ____GilData_EchoStringVoid("MainClass.Trace(\"Transition action `` for T7__DH1__BUILD.<History> to T7__DH1__CIRCULAR_SAW.\");");
                
                // Step 3: Enter/move towards transition target `T7__DH1__CIRCULAR_SAW`.
                this.T7__DH1__TOOL_enter();
                this.T7__DH1__CIRCULAR_SAW_enter();
                
                // Step 4: complete transition. Ends event dispatch. No other behaviors are checked.
                return;
            } // end of behavior for T7__DH1__BUILD.<History>
            
            // T7__DH1__BUILD.<History> behavior
            // uml: else / { trace("Transition action `` for T7__DH1__BUILD.<History> to T7__DH1__TOY."); } TransitionTo(T7__DH1__TOY)
            {
                // Step 1: Exit states until we reach `T7__DH1__BUILD` state (Least Common Ancestor for transition). Already at LCA, no exiting required.
                
                // Step 2: Transition action: `trace("Transition action `` for T7__DH1__BUILD.<History> to T7__DH1__TOY.");`.
                ____GilData_EchoStringVoid("MainClass.Trace(\"Transition action `` for T7__DH1__BUILD.<History> to T7__DH1__TOY.\");");
                
                // Step 3: Enter/move towards transition target `T7__DH1__TOY`.
                this.T7__DH1__TOY_enter();
                
                // Finish transition by calling pseudo state transition function.
                this.T7__DH1__TOY_InitialState_transition();
                return; // event processing immediately stops when a transition finishes. No other behaviors for this state are checked.
            } // end of behavior for T7__DH1__BUILD.<History>
        } // end of behavior for T7__DH1__BUILD.<InitialState>
    }
    
    
    ////////////////////////////////////////////////////////////////////////////////
    // event handlers for state T7__DH1__TOOL
    ////////////////////////////////////////////////////////////////////////////////
    
    private void T7__DH1__TOOL_enter()
    {
        this.stateId = StateId.T7__DH1__TOOL;
        
        // T7__DH1__TOOL behavior
        // uml: enter / { trace("Enter T7__DH1__TOOL."); }
        {
            // Step 1: execute action `trace("Enter T7__DH1__TOOL.");`
            ____GilData_EchoStringVoid("MainClass.Trace(\"Enter T7__DH1__TOOL.\");");
        } // end of behavior for T7__DH1__TOOL
        
        // T7__DH1__TOOL behavior
        // uml: enter [trace_guard("State T7__DH1__TOOL: check behavior `enter / { $gil(this.vars.T7__DH1__BUILD_history = T7__DH1__BUILD_HistoryId.T7__DH1__TOOL;) }`.", true)] / { $gil(this.vars.T7__DH1__BUILD_history = T7__DH1__BUILD_HistoryId.T7__DH1__TOOL;) }
        if (____GilData_VarArgsToBool(____GilData_EchoStringBool("trace_guard(\"State T7__DH1__TOOL: check behavior `enter / { $gil(this.vars.T7__DH1__BUILD_history = T7__DH1__BUILD_HistoryId.T7__DH1__TOOL;) }`.\", true)")))
        {
            // Step 1: execute action `$gil(this.vars.T7__DH1__BUILD_history = T7__DH1__BUILD_HistoryId.T7__DH1__TOOL;)`
            this.vars.T7__DH1__BUILD_history = T7__DH1__BUILD_HistoryId.T7__DH1__TOOL;
        } // end of behavior for T7__DH1__TOOL
    }
    
    private void T7__DH1__TOOL_exit()
    {
        // T7__DH1__TOOL behavior
        // uml: exit / { trace("Exit T7__DH1__TOOL."); }
        {
            // Step 1: execute action `trace("Exit T7__DH1__TOOL.");`
            ____GilData_EchoStringVoid("MainClass.Trace(\"Exit T7__DH1__TOOL.\");");
        } // end of behavior for T7__DH1__TOOL
        
        this.stateId = StateId.T7__DH1__BUILD;
    }
    
    private void T7__DH1__TOOL_ev2()
    {
        // T7__DH1__TOOL behavior
        // uml: EV2 [trace_guard("State T7__DH1__TOOL: check behavior `EV2 TransitionTo(T7__DH1__TOY)`.", true)] / { trace("Transition action `` for T7__DH1__TOOL to T7__DH1__TOY."); } TransitionTo(T7__DH1__TOY)
        if (____GilData_VarArgsToBool(____GilData_EchoStringBool("trace_guard(\"State T7__DH1__TOOL: check behavior `EV2 TransitionTo(T7__DH1__TOY)`.\", true)")))
        {
            // Step 1: Exit states until we reach `T7__DH1__BUILD` state (Least Common Ancestor for transition).
            this.ExitUpToStateHandler(StateId.T7__DH1__BUILD);
            
            // Step 2: Transition action: `trace("Transition action `` for T7__DH1__TOOL to T7__DH1__TOY.");`.
            ____GilData_EchoStringVoid("MainClass.Trace(\"Transition action `` for T7__DH1__TOOL to T7__DH1__TOY.\");");
            
            // Step 3: Enter/move towards transition target `T7__DH1__TOY`.
            this.T7__DH1__TOY_enter();
            
            // Finish transition by calling pseudo state transition function.
            this.T7__DH1__TOY_InitialState_transition();
            return; // event processing immediately stops when a transition finishes. No other behaviors for this state are checked.
        } // end of behavior for T7__DH1__TOOL
        
        // No ancestor handles this event.
    }
    
    private void T7__DH1__TOOL_InitialState_transition()
    {
        // T7__DH1__TOOL.<InitialState> behavior
        // uml: / { trace("Transition action `` for T7__DH1__TOOL.<InitialState> to T7__DH1__IMPACT_DRILL."); } TransitionTo(T7__DH1__IMPACT_DRILL)
        {
            // Step 1: Exit states until we reach `T7__DH1__TOOL` state (Least Common Ancestor for transition). Already at LCA, no exiting required.
            
            // Step 2: Transition action: `trace("Transition action `` for T7__DH1__TOOL.<InitialState> to T7__DH1__IMPACT_DRILL.");`.
            ____GilData_EchoStringVoid("MainClass.Trace(\"Transition action `` for T7__DH1__TOOL.<InitialState> to T7__DH1__IMPACT_DRILL.\");");
            
            // Step 3: Enter/move towards transition target `T7__DH1__IMPACT_DRILL`.
            this.T7__DH1__IMPACT_DRILL_enter();
            
            // Step 4: complete transition. Ends event dispatch. No other behaviors are checked.
            return;
        } // end of behavior for T7__DH1__TOOL.<InitialState>
    }
    
    
    ////////////////////////////////////////////////////////////////////////////////
    // event handlers for state T7__DH1__CIRCULAR_SAW
    ////////////////////////////////////////////////////////////////////////////////
    
    private void T7__DH1__CIRCULAR_SAW_enter()
    {
        this.stateId = StateId.T7__DH1__CIRCULAR_SAW;
        
        // T7__DH1__CIRCULAR_SAW behavior
        // uml: enter / { trace("Enter T7__DH1__CIRCULAR_SAW."); }
        {
            // Step 1: execute action `trace("Enter T7__DH1__CIRCULAR_SAW.");`
            ____GilData_EchoStringVoid("MainClass.Trace(\"Enter T7__DH1__CIRCULAR_SAW.\");");
        } // end of behavior for T7__DH1__CIRCULAR_SAW
        
        // T7__DH1__CIRCULAR_SAW behavior
        // uml: enter [trace_guard("State T7__DH1__CIRCULAR_SAW: check behavior `enter / { $gil(this.vars.T7__DH1__BUILD_history = T7__DH1__BUILD_HistoryId.T7__DH1__CIRCULAR_SAW;) }`.", true)] / { $gil(this.vars.T7__DH1__BUILD_history = T7__DH1__BUILD_HistoryId.T7__DH1__CIRCULAR_SAW;) }
        if (____GilData_VarArgsToBool(____GilData_EchoStringBool("trace_guard(\"State T7__DH1__CIRCULAR_SAW: check behavior `enter / { $gil(this.vars.T7__DH1__BUILD_history = T7__DH1__BUILD_HistoryId.T7__DH1__CIRCULAR_SAW;) }`.\", true)")))
        {
            // Step 1: execute action `$gil(this.vars.T7__DH1__BUILD_history = T7__DH1__BUILD_HistoryId.T7__DH1__CIRCULAR_SAW;)`
            this.vars.T7__DH1__BUILD_history = T7__DH1__BUILD_HistoryId.T7__DH1__CIRCULAR_SAW;
        } // end of behavior for T7__DH1__CIRCULAR_SAW
    }
    
    private void T7__DH1__CIRCULAR_SAW_exit()
    {
        // T7__DH1__CIRCULAR_SAW behavior
        // uml: exit / { trace("Exit T7__DH1__CIRCULAR_SAW."); }
        {
            // Step 1: execute action `trace("Exit T7__DH1__CIRCULAR_SAW.");`
            ____GilData_EchoStringVoid("MainClass.Trace(\"Exit T7__DH1__CIRCULAR_SAW.\");");
        } // end of behavior for T7__DH1__CIRCULAR_SAW
        
        this.stateId = StateId.T7__DH1__TOOL;
    }
    
    
    ////////////////////////////////////////////////////////////////////////////////
    // event handlers for state T7__DH1__IMPACT_DRILL
    ////////////////////////////////////////////////////////////////////////////////
    
    private void T7__DH1__IMPACT_DRILL_enter()
    {
        this.stateId = StateId.T7__DH1__IMPACT_DRILL;
        
        // T7__DH1__IMPACT_DRILL behavior
        // uml: enter / { trace("Enter T7__DH1__IMPACT_DRILL."); }
        {
            // Step 1: execute action `trace("Enter T7__DH1__IMPACT_DRILL.");`
            ____GilData_EchoStringVoid("MainClass.Trace(\"Enter T7__DH1__IMPACT_DRILL.\");");
        } // end of behavior for T7__DH1__IMPACT_DRILL
        
        // T7__DH1__IMPACT_DRILL behavior
        // uml: enter [trace_guard("State T7__DH1__IMPACT_DRILL: check behavior `enter / { $gil(this.vars.T7__DH1__BUILD_history = T7__DH1__BUILD_HistoryId.T7__DH1__IMPACT_DRILL;) }`.", true)] / { $gil(this.vars.T7__DH1__BUILD_history = T7__DH1__BUILD_HistoryId.T7__DH1__IMPACT_DRILL;) }
        if (____GilData_VarArgsToBool(____GilData_EchoStringBool("trace_guard(\"State T7__DH1__IMPACT_DRILL: check behavior `enter / { $gil(this.vars.T7__DH1__BUILD_history = T7__DH1__BUILD_HistoryId.T7__DH1__IMPACT_DRILL;) }`.\", true)")))
        {
            // Step 1: execute action `$gil(this.vars.T7__DH1__BUILD_history = T7__DH1__BUILD_HistoryId.T7__DH1__IMPACT_DRILL;)`
            this.vars.T7__DH1__BUILD_history = T7__DH1__BUILD_HistoryId.T7__DH1__IMPACT_DRILL;
        } // end of behavior for T7__DH1__IMPACT_DRILL
    }
    
    private void T7__DH1__IMPACT_DRILL_exit()
    {
        // T7__DH1__IMPACT_DRILL behavior
        // uml: exit / { trace("Exit T7__DH1__IMPACT_DRILL."); }
        {
            // Step 1: execute action `trace("Exit T7__DH1__IMPACT_DRILL.");`
            ____GilData_EchoStringVoid("MainClass.Trace(\"Exit T7__DH1__IMPACT_DRILL.\");");
        } // end of behavior for T7__DH1__IMPACT_DRILL
        
        this.stateId = StateId.T7__DH1__TOOL;
    }
    
    private void T7__DH1__IMPACT_DRILL_ev1()
    {
        // T7__DH1__IMPACT_DRILL behavior
        // uml: EV1 [trace_guard("State T7__DH1__IMPACT_DRILL: check behavior `EV1 TransitionTo(T7__DH1__CIRCULAR_SAW)`.", true)] / { trace("Transition action `` for T7__DH1__IMPACT_DRILL to T7__DH1__CIRCULAR_SAW."); } TransitionTo(T7__DH1__CIRCULAR_SAW)
        if (____GilData_VarArgsToBool(____GilData_EchoStringBool("trace_guard(\"State T7__DH1__IMPACT_DRILL: check behavior `EV1 TransitionTo(T7__DH1__CIRCULAR_SAW)`.\", true)")))
        {
            // Step 1: Exit states until we reach `T7__DH1__TOOL` state (Least Common Ancestor for transition).
            this.T7__DH1__IMPACT_DRILL_exit();
            
            // Step 2: Transition action: `trace("Transition action `` for T7__DH1__IMPACT_DRILL to T7__DH1__CIRCULAR_SAW.");`.
            ____GilData_EchoStringVoid("MainClass.Trace(\"Transition action `` for T7__DH1__IMPACT_DRILL to T7__DH1__CIRCULAR_SAW.\");");
            
            // Step 3: Enter/move towards transition target `T7__DH1__CIRCULAR_SAW`.
            this.T7__DH1__CIRCULAR_SAW_enter();
            
            // Step 4: complete transition. Ends event dispatch. No other behaviors are checked.
            return;
        } // end of behavior for T7__DH1__IMPACT_DRILL
        
        // No ancestor handles this event.
    }
    
    
    ////////////////////////////////////////////////////////////////////////////////
    // event handlers for state T7__DH1__TOY
    ////////////////////////////////////////////////////////////////////////////////
    
    private void T7__DH1__TOY_enter()
    {
        this.stateId = StateId.T7__DH1__TOY;
        
        // T7__DH1__TOY behavior
        // uml: enter / { trace("Enter T7__DH1__TOY."); }
        {
            // Step 1: execute action `trace("Enter T7__DH1__TOY.");`
            ____GilData_EchoStringVoid("MainClass.Trace(\"Enter T7__DH1__TOY.\");");
        } // end of behavior for T7__DH1__TOY
        
        // T7__DH1__TOY behavior
        // uml: enter [trace_guard("State T7__DH1__TOY: check behavior `enter / { $gil(this.vars.T7__DH1__BUILD_history = T7__DH1__BUILD_HistoryId.T7__DH1__TOY;) }`.", true)] / { $gil(this.vars.T7__DH1__BUILD_history = T7__DH1__BUILD_HistoryId.T7__DH1__TOY;) }
        if (____GilData_VarArgsToBool(____GilData_EchoStringBool("trace_guard(\"State T7__DH1__TOY: check behavior `enter / { $gil(this.vars.T7__DH1__BUILD_history = T7__DH1__BUILD_HistoryId.T7__DH1__TOY;) }`.\", true)")))
        {
            // Step 1: execute action `$gil(this.vars.T7__DH1__BUILD_history = T7__DH1__BUILD_HistoryId.T7__DH1__TOY;)`
            this.vars.T7__DH1__BUILD_history = T7__DH1__BUILD_HistoryId.T7__DH1__TOY;
        } // end of behavior for T7__DH1__TOY
    }
    
    private void T7__DH1__TOY_exit()
    {
        // T7__DH1__TOY behavior
        // uml: exit / { trace("Exit T7__DH1__TOY."); }
        {
            // Step 1: execute action `trace("Exit T7__DH1__TOY.");`
            ____GilData_EchoStringVoid("MainClass.Trace(\"Exit T7__DH1__TOY.\");");
        } // end of behavior for T7__DH1__TOY
        
        this.stateId = StateId.T7__DH1__BUILD;
    }
    
    private void T7__DH1__TOY_ev1()
    {
        // T7__DH1__TOY behavior
        // uml: EV1 [trace_guard("State T7__DH1__TOY: check behavior `EV1 TransitionTo(T7__DH1__TOOL)`.", true)] / { trace("Transition action `` for T7__DH1__TOY to T7__DH1__TOOL."); } TransitionTo(T7__DH1__TOOL)
        if (____GilData_VarArgsToBool(____GilData_EchoStringBool("trace_guard(\"State T7__DH1__TOY: check behavior `EV1 TransitionTo(T7__DH1__TOOL)`.\", true)")))
        {
            // Step 1: Exit states until we reach `T7__DH1__BUILD` state (Least Common Ancestor for transition).
            this.ExitUpToStateHandler(StateId.T7__DH1__BUILD);
            
            // Step 2: Transition action: `trace("Transition action `` for T7__DH1__TOY to T7__DH1__TOOL.");`.
            ____GilData_EchoStringVoid("MainClass.Trace(\"Transition action `` for T7__DH1__TOY to T7__DH1__TOOL.\");");
            
            // Step 3: Enter/move towards transition target `T7__DH1__TOOL`.
            this.T7__DH1__TOOL_enter();
            
            // Finish transition by calling pseudo state transition function.
            this.T7__DH1__TOOL_InitialState_transition();
            return; // event processing immediately stops when a transition finishes. No other behaviors for this state are checked.
        } // end of behavior for T7__DH1__TOY
        
        // No ancestor handles this event.
    }
    
    private void T7__DH1__TOY_InitialState_transition()
    {
        // T7__DH1__TOY.<InitialState> behavior
        // uml: / { trace("Transition action `` for T7__DH1__TOY.<InitialState> to T7__DH1__RACE_CAR."); } TransitionTo(T7__DH1__RACE_CAR)
        {
            // Step 1: Exit states until we reach `T7__DH1__TOY` state (Least Common Ancestor for transition). Already at LCA, no exiting required.
            
            // Step 2: Transition action: `trace("Transition action `` for T7__DH1__TOY.<InitialState> to T7__DH1__RACE_CAR.");`.
            ____GilData_EchoStringVoid("MainClass.Trace(\"Transition action `` for T7__DH1__TOY.<InitialState> to T7__DH1__RACE_CAR.\");");
            
            // Step 3: Enter/move towards transition target `T7__DH1__RACE_CAR`.
            this.T7__DH1__RACE_CAR_enter();
            
            // Step 4: complete transition. Ends event dispatch. No other behaviors are checked.
            return;
        } // end of behavior for T7__DH1__TOY.<InitialState>
    }
    
    
    ////////////////////////////////////////////////////////////////////////////////
    // event handlers for state T7__DH1__GLOW_WORM
    ////////////////////////////////////////////////////////////////////////////////
    
    private void T7__DH1__GLOW_WORM_enter()
    {
        this.stateId = StateId.T7__DH1__GLOW_WORM;
        
        // T7__DH1__GLOW_WORM behavior
        // uml: enter / { trace("Enter T7__DH1__GLOW_WORM."); }
        {
            // Step 1: execute action `trace("Enter T7__DH1__GLOW_WORM.");`
            ____GilData_EchoStringVoid("MainClass.Trace(\"Enter T7__DH1__GLOW_WORM.\");");
        } // end of behavior for T7__DH1__GLOW_WORM
        
        // T7__DH1__GLOW_WORM behavior
        // uml: enter [trace_guard("State T7__DH1__GLOW_WORM: check behavior `enter / { $gil(this.vars.T7__DH1__BUILD_history = T7__DH1__BUILD_HistoryId.T7__DH1__GLOW_WORM;) }`.", true)] / { $gil(this.vars.T7__DH1__BUILD_history = T7__DH1__BUILD_HistoryId.T7__DH1__GLOW_WORM;) }
        if (____GilData_VarArgsToBool(____GilData_EchoStringBool("trace_guard(\"State T7__DH1__GLOW_WORM: check behavior `enter / { $gil(this.vars.T7__DH1__BUILD_history = T7__DH1__BUILD_HistoryId.T7__DH1__GLOW_WORM;) }`.\", true)")))
        {
            // Step 1: execute action `$gil(this.vars.T7__DH1__BUILD_history = T7__DH1__BUILD_HistoryId.T7__DH1__GLOW_WORM;)`
            this.vars.T7__DH1__BUILD_history = T7__DH1__BUILD_HistoryId.T7__DH1__GLOW_WORM;
        } // end of behavior for T7__DH1__GLOW_WORM
    }
    
    private void T7__DH1__GLOW_WORM_exit()
    {
        // T7__DH1__GLOW_WORM behavior
        // uml: exit / { trace("Exit T7__DH1__GLOW_WORM."); }
        {
            // Step 1: execute action `trace("Exit T7__DH1__GLOW_WORM.");`
            ____GilData_EchoStringVoid("MainClass.Trace(\"Exit T7__DH1__GLOW_WORM.\");");
        } // end of behavior for T7__DH1__GLOW_WORM
        
        this.stateId = StateId.T7__DH1__TOY;
    }
    
    private void T7__DH1__GLOW_WORM_ev1()
    {
        bool consume_event = false;
        
        // T7__DH1__GLOW_WORM behavior
        // uml: EV1 [trace_guard("State T7__DH1__GLOW_WORM: check behavior `EV1 TransitionTo(T7__DH1__ROBOT)`.", true)] / { trace("Transition action `` for T7__DH1__GLOW_WORM to T7__DH1__ROBOT."); } TransitionTo(T7__DH1__ROBOT)
        if (____GilData_VarArgsToBool(____GilData_EchoStringBool("trace_guard(\"State T7__DH1__GLOW_WORM: check behavior `EV1 TransitionTo(T7__DH1__ROBOT)`.\", true)")))
        {
            // Step 1: Exit states until we reach `T7__DH1__TOY` state (Least Common Ancestor for transition).
            this.T7__DH1__GLOW_WORM_exit();
            
            // Step 2: Transition action: `trace("Transition action `` for T7__DH1__GLOW_WORM to T7__DH1__ROBOT.");`.
            ____GilData_EchoStringVoid("MainClass.Trace(\"Transition action `` for T7__DH1__GLOW_WORM to T7__DH1__ROBOT.\");");
            
            // Step 3: Enter/move towards transition target `T7__DH1__ROBOT`.
            this.T7__DH1__ROBOT_enter();
            
            // Finish transition by calling pseudo state transition function.
            this.T7__DH1__ROBOT_InitialState_transition();
            return; // event processing immediately stops when a transition finishes. No other behaviors for this state are checked.
        } // end of behavior for T7__DH1__GLOW_WORM
        
        // Check if event has been consumed before calling ancestor handler.
        if (!consume_event)
        {
            this.T7__DH1__TOY_ev1();
        }
    }
    
    
    ////////////////////////////////////////////////////////////////////////////////
    // event handlers for state T7__DH1__RACE_CAR
    ////////////////////////////////////////////////////////////////////////////////
    
    private void T7__DH1__RACE_CAR_enter()
    {
        this.stateId = StateId.T7__DH1__RACE_CAR;
        
        // T7__DH1__RACE_CAR behavior
        // uml: enter / { trace("Enter T7__DH1__RACE_CAR."); }
        {
            // Step 1: execute action `trace("Enter T7__DH1__RACE_CAR.");`
            ____GilData_EchoStringVoid("MainClass.Trace(\"Enter T7__DH1__RACE_CAR.\");");
        } // end of behavior for T7__DH1__RACE_CAR
        
        // T7__DH1__RACE_CAR behavior
        // uml: enter [trace_guard("State T7__DH1__RACE_CAR: check behavior `enter / { $gil(this.vars.T7__DH1__BUILD_history = T7__DH1__BUILD_HistoryId.T7__DH1__RACE_CAR;) }`.", true)] / { $gil(this.vars.T7__DH1__BUILD_history = T7__DH1__BUILD_HistoryId.T7__DH1__RACE_CAR;) }
        if (____GilData_VarArgsToBool(____GilData_EchoStringBool("trace_guard(\"State T7__DH1__RACE_CAR: check behavior `enter / { $gil(this.vars.T7__DH1__BUILD_history = T7__DH1__BUILD_HistoryId.T7__DH1__RACE_CAR;) }`.\", true)")))
        {
            // Step 1: execute action `$gil(this.vars.T7__DH1__BUILD_history = T7__DH1__BUILD_HistoryId.T7__DH1__RACE_CAR;)`
            this.vars.T7__DH1__BUILD_history = T7__DH1__BUILD_HistoryId.T7__DH1__RACE_CAR;
        } // end of behavior for T7__DH1__RACE_CAR
    }
    
    private void T7__DH1__RACE_CAR_exit()
    {
        // T7__DH1__RACE_CAR behavior
        // uml: exit / { trace("Exit T7__DH1__RACE_CAR."); }
        {
            // Step 1: execute action `trace("Exit T7__DH1__RACE_CAR.");`
            ____GilData_EchoStringVoid("MainClass.Trace(\"Exit T7__DH1__RACE_CAR.\");");
        } // end of behavior for T7__DH1__RACE_CAR
        
        this.stateId = StateId.T7__DH1__TOY;
    }
    
    private void T7__DH1__RACE_CAR_ev1()
    {
        bool consume_event = false;
        
        // T7__DH1__RACE_CAR behavior
        // uml: EV1 [trace_guard("State T7__DH1__RACE_CAR: check behavior `EV1 TransitionTo(T7__DH1__TEDDY_BEAR)`.", true)] / { trace("Transition action `` for T7__DH1__RACE_CAR to T7__DH1__TEDDY_BEAR."); } TransitionTo(T7__DH1__TEDDY_BEAR)
        if (____GilData_VarArgsToBool(____GilData_EchoStringBool("trace_guard(\"State T7__DH1__RACE_CAR: check behavior `EV1 TransitionTo(T7__DH1__TEDDY_BEAR)`.\", true)")))
        {
            // Step 1: Exit states until we reach `T7__DH1__TOY` state (Least Common Ancestor for transition).
            this.T7__DH1__RACE_CAR_exit();
            
            // Step 2: Transition action: `trace("Transition action `` for T7__DH1__RACE_CAR to T7__DH1__TEDDY_BEAR.");`.
            ____GilData_EchoStringVoid("MainClass.Trace(\"Transition action `` for T7__DH1__RACE_CAR to T7__DH1__TEDDY_BEAR.\");");
            
            // Step 3: Enter/move towards transition target `T7__DH1__TEDDY_BEAR`.
            this.T7__DH1__TEDDY_BEAR_enter();
            
            // Step 4: complete transition. Ends event dispatch. No other behaviors are checked.
            return;
        } // end of behavior for T7__DH1__RACE_CAR
        
        // Check if event has been consumed before calling ancestor handler.
        if (!consume_event)
        {
            this.T7__DH1__TOY_ev1();
        }
    }
    
    
    ////////////////////////////////////////////////////////////////////////////////
    // event handlers for state T7__DH1__ROBOT
    ////////////////////////////////////////////////////////////////////////////////
    
    private void T7__DH1__ROBOT_enter()
    {
        this.stateId = StateId.T7__DH1__ROBOT;
        
        // T7__DH1__ROBOT behavior
        // uml: enter / { trace("Enter T7__DH1__ROBOT."); }
        {
            // Step 1: execute action `trace("Enter T7__DH1__ROBOT.");`
            ____GilData_EchoStringVoid("MainClass.Trace(\"Enter T7__DH1__ROBOT.\");");
        } // end of behavior for T7__DH1__ROBOT
        
        // T7__DH1__ROBOT behavior
        // uml: enter [trace_guard("State T7__DH1__ROBOT: check behavior `enter / { $gil(this.vars.T7__DH1__BUILD_history = T7__DH1__BUILD_HistoryId.T7__DH1__ROBOT;) }`.", true)] / { $gil(this.vars.T7__DH1__BUILD_history = T7__DH1__BUILD_HistoryId.T7__DH1__ROBOT;) }
        if (____GilData_VarArgsToBool(____GilData_EchoStringBool("trace_guard(\"State T7__DH1__ROBOT: check behavior `enter / { $gil(this.vars.T7__DH1__BUILD_history = T7__DH1__BUILD_HistoryId.T7__DH1__ROBOT;) }`.\", true)")))
        {
            // Step 1: execute action `$gil(this.vars.T7__DH1__BUILD_history = T7__DH1__BUILD_HistoryId.T7__DH1__ROBOT;)`
            this.vars.T7__DH1__BUILD_history = T7__DH1__BUILD_HistoryId.T7__DH1__ROBOT;
        } // end of behavior for T7__DH1__ROBOT
    }
    
    private void T7__DH1__ROBOT_exit()
    {
        // T7__DH1__ROBOT behavior
        // uml: exit / { trace("Exit T7__DH1__ROBOT."); }
        {
            // Step 1: execute action `trace("Exit T7__DH1__ROBOT.");`
            ____GilData_EchoStringVoid("MainClass.Trace(\"Exit T7__DH1__ROBOT.\");");
        } // end of behavior for T7__DH1__ROBOT
        
        this.stateId = StateId.T7__DH1__TOY;
    }
    
    private void T7__DH1__ROBOT_InitialState_transition()
    {
        // T7__DH1__ROBOT.<InitialState> behavior
        // uml: / { trace("Transition action `` for T7__DH1__ROBOT.<InitialState> to T7__DH1__BATTLEBOT."); } TransitionTo(T7__DH1__BATTLEBOT)
        {
            // Step 1: Exit states until we reach `T7__DH1__ROBOT` state (Least Common Ancestor for transition). Already at LCA, no exiting required.
            
            // Step 2: Transition action: `trace("Transition action `` for T7__DH1__ROBOT.<InitialState> to T7__DH1__BATTLEBOT.");`.
            ____GilData_EchoStringVoid("MainClass.Trace(\"Transition action `` for T7__DH1__ROBOT.<InitialState> to T7__DH1__BATTLEBOT.\");");
            
            // Step 3: Enter/move towards transition target `T7__DH1__BATTLEBOT`.
            this.T7__DH1__BATTLEBOT_enter();
            
            // Step 4: complete transition. Ends event dispatch. No other behaviors are checked.
            return;
        } // end of behavior for T7__DH1__ROBOT.<InitialState>
    }
    
    
    ////////////////////////////////////////////////////////////////////////////////
    // event handlers for state T7__DH1__BATTLEBOT
    ////////////////////////////////////////////////////////////////////////////////
    
    private void T7__DH1__BATTLEBOT_enter()
    {
        this.stateId = StateId.T7__DH1__BATTLEBOT;
        
        // T7__DH1__BATTLEBOT behavior
        // uml: enter / { trace("Enter T7__DH1__BATTLEBOT."); }
        {
            // Step 1: execute action `trace("Enter T7__DH1__BATTLEBOT.");`
            ____GilData_EchoStringVoid("MainClass.Trace(\"Enter T7__DH1__BATTLEBOT.\");");
        } // end of behavior for T7__DH1__BATTLEBOT
        
        // T7__DH1__BATTLEBOT behavior
        // uml: enter [trace_guard("State T7__DH1__BATTLEBOT: check behavior `enter / { $gil(this.vars.T7__DH1__BUILD_history = T7__DH1__BUILD_HistoryId.T7__DH1__BATTLEBOT;) }`.", true)] / { $gil(this.vars.T7__DH1__BUILD_history = T7__DH1__BUILD_HistoryId.T7__DH1__BATTLEBOT;) }
        if (____GilData_VarArgsToBool(____GilData_EchoStringBool("trace_guard(\"State T7__DH1__BATTLEBOT: check behavior `enter / { $gil(this.vars.T7__DH1__BUILD_history = T7__DH1__BUILD_HistoryId.T7__DH1__BATTLEBOT;) }`.\", true)")))
        {
            // Step 1: execute action `$gil(this.vars.T7__DH1__BUILD_history = T7__DH1__BUILD_HistoryId.T7__DH1__BATTLEBOT;)`
            this.vars.T7__DH1__BUILD_history = T7__DH1__BUILD_HistoryId.T7__DH1__BATTLEBOT;
        } // end of behavior for T7__DH1__BATTLEBOT
    }
    
    private void T7__DH1__BATTLEBOT_exit()
    {
        // T7__DH1__BATTLEBOT behavior
        // uml: exit / { trace("Exit T7__DH1__BATTLEBOT."); }
        {
            // Step 1: execute action `trace("Exit T7__DH1__BATTLEBOT.");`
            ____GilData_EchoStringVoid("MainClass.Trace(\"Exit T7__DH1__BATTLEBOT.\");");
        } // end of behavior for T7__DH1__BATTLEBOT
        
        this.stateId = StateId.T7__DH1__ROBOT;
    }
    
    private void T7__DH1__BATTLEBOT_ev1()
    {
        bool consume_event = false;
        
        // T7__DH1__BATTLEBOT behavior
        // uml: EV1 [trace_guard("State T7__DH1__BATTLEBOT: check behavior `EV1 TransitionTo(T7__DH1__WALL_E)`.", true)] / { trace("Transition action `` for T7__DH1__BATTLEBOT to T7__DH1__WALL_E."); } TransitionTo(T7__DH1__WALL_E)
        if (____GilData_VarArgsToBool(____GilData_EchoStringBool("trace_guard(\"State T7__DH1__BATTLEBOT: check behavior `EV1 TransitionTo(T7__DH1__WALL_E)`.\", true)")))
        {
            // Step 1: Exit states until we reach `T7__DH1__ROBOT` state (Least Common Ancestor for transition).
            this.T7__DH1__BATTLEBOT_exit();
            
            // Step 2: Transition action: `trace("Transition action `` for T7__DH1__BATTLEBOT to T7__DH1__WALL_E.");`.
            ____GilData_EchoStringVoid("MainClass.Trace(\"Transition action `` for T7__DH1__BATTLEBOT to T7__DH1__WALL_E.\");");
            
            // Step 3: Enter/move towards transition target `T7__DH1__WALL_E`.
            this.T7__DH1__WALL_E_enter();
            
            // Step 4: complete transition. Ends event dispatch. No other behaviors are checked.
            return;
        } // end of behavior for T7__DH1__BATTLEBOT
        
        // Check if event has been consumed before calling ancestor handler.
        if (!consume_event)
        {
            this.T7__DH1__TOY_ev1();
        }
    }
    
    
    ////////////////////////////////////////////////////////////////////////////////
    // event handlers for state T7__DH1__WALL_E
    ////////////////////////////////////////////////////////////////////////////////
    
    private void T7__DH1__WALL_E_enter()
    {
        this.stateId = StateId.T7__DH1__WALL_E;
        
        // T7__DH1__WALL_E behavior
        // uml: enter / { trace("Enter T7__DH1__WALL_E."); }
        {
            // Step 1: execute action `trace("Enter T7__DH1__WALL_E.");`
            ____GilData_EchoStringVoid("MainClass.Trace(\"Enter T7__DH1__WALL_E.\");");
        } // end of behavior for T7__DH1__WALL_E
        
        // T7__DH1__WALL_E behavior
        // uml: enter [trace_guard("State T7__DH1__WALL_E: check behavior `enter / { $gil(this.vars.T7__DH1__BUILD_history = T7__DH1__BUILD_HistoryId.T7__DH1__WALL_E;) }`.", true)] / { $gil(this.vars.T7__DH1__BUILD_history = T7__DH1__BUILD_HistoryId.T7__DH1__WALL_E;) }
        if (____GilData_VarArgsToBool(____GilData_EchoStringBool("trace_guard(\"State T7__DH1__WALL_E: check behavior `enter / { $gil(this.vars.T7__DH1__BUILD_history = T7__DH1__BUILD_HistoryId.T7__DH1__WALL_E;) }`.\", true)")))
        {
            // Step 1: execute action `$gil(this.vars.T7__DH1__BUILD_history = T7__DH1__BUILD_HistoryId.T7__DH1__WALL_E;)`
            this.vars.T7__DH1__BUILD_history = T7__DH1__BUILD_HistoryId.T7__DH1__WALL_E;
        } // end of behavior for T7__DH1__WALL_E
    }
    
    private void T7__DH1__WALL_E_exit()
    {
        // T7__DH1__WALL_E behavior
        // uml: exit / { trace("Exit T7__DH1__WALL_E."); }
        {
            // Step 1: execute action `trace("Exit T7__DH1__WALL_E.");`
            ____GilData_EchoStringVoid("MainClass.Trace(\"Exit T7__DH1__WALL_E.\");");
        } // end of behavior for T7__DH1__WALL_E
        
        this.stateId = StateId.T7__DH1__ROBOT;
    }
    
    
    ////////////////////////////////////////////////////////////////////////////////
    // event handlers for state T7__DH1__TEDDY_BEAR
    ////////////////////////////////////////////////////////////////////////////////
    
    private void T7__DH1__TEDDY_BEAR_enter()
    {
        this.stateId = StateId.T7__DH1__TEDDY_BEAR;
        
        // T7__DH1__TEDDY_BEAR behavior
        // uml: enter / { trace("Enter T7__DH1__TEDDY_BEAR."); }
        {
            // Step 1: execute action `trace("Enter T7__DH1__TEDDY_BEAR.");`
            ____GilData_EchoStringVoid("MainClass.Trace(\"Enter T7__DH1__TEDDY_BEAR.\");");
        } // end of behavior for T7__DH1__TEDDY_BEAR
        
        // T7__DH1__TEDDY_BEAR behavior
        // uml: enter [trace_guard("State T7__DH1__TEDDY_BEAR: check behavior `enter / { $gil(this.vars.T7__DH1__BUILD_history = T7__DH1__BUILD_HistoryId.T7__DH1__TEDDY_BEAR;) }`.", true)] / { $gil(this.vars.T7__DH1__BUILD_history = T7__DH1__BUILD_HistoryId.T7__DH1__TEDDY_BEAR;) }
        if (____GilData_VarArgsToBool(____GilData_EchoStringBool("trace_guard(\"State T7__DH1__TEDDY_BEAR: check behavior `enter / { $gil(this.vars.T7__DH1__BUILD_history = T7__DH1__BUILD_HistoryId.T7__DH1__TEDDY_BEAR;) }`.\", true)")))
        {
            // Step 1: execute action `$gil(this.vars.T7__DH1__BUILD_history = T7__DH1__BUILD_HistoryId.T7__DH1__TEDDY_BEAR;)`
            this.vars.T7__DH1__BUILD_history = T7__DH1__BUILD_HistoryId.T7__DH1__TEDDY_BEAR;
        } // end of behavior for T7__DH1__TEDDY_BEAR
    }
    
    private void T7__DH1__TEDDY_BEAR_exit()
    {
        // T7__DH1__TEDDY_BEAR behavior
        // uml: exit / { trace("Exit T7__DH1__TEDDY_BEAR."); }
        {
            // Step 1: execute action `trace("Exit T7__DH1__TEDDY_BEAR.");`
            ____GilData_EchoStringVoid("MainClass.Trace(\"Exit T7__DH1__TEDDY_BEAR.\");");
        } // end of behavior for T7__DH1__TEDDY_BEAR
        
        this.stateId = StateId.T7__DH1__TOY;
    }
    
    private void T7__DH1__TEDDY_BEAR_ev1()
    {
        bool consume_event = false;
        
        // T7__DH1__TEDDY_BEAR behavior
        // uml: EV1 [trace_guard("State T7__DH1__TEDDY_BEAR: check behavior `EV1 TransitionTo(T7__DH1__GLOW_WORM)`.", true)] / { trace("Transition action `` for T7__DH1__TEDDY_BEAR to T7__DH1__GLOW_WORM."); } TransitionTo(T7__DH1__GLOW_WORM)
        if (____GilData_VarArgsToBool(____GilData_EchoStringBool("trace_guard(\"State T7__DH1__TEDDY_BEAR: check behavior `EV1 TransitionTo(T7__DH1__GLOW_WORM)`.\", true)")))
        {
            // Step 1: Exit states until we reach `T7__DH1__TOY` state (Least Common Ancestor for transition).
            this.T7__DH1__TEDDY_BEAR_exit();
            
            // Step 2: Transition action: `trace("Transition action `` for T7__DH1__TEDDY_BEAR to T7__DH1__GLOW_WORM.");`.
            ____GilData_EchoStringVoid("MainClass.Trace(\"Transition action `` for T7__DH1__TEDDY_BEAR to T7__DH1__GLOW_WORM.\");");
            
            // Step 3: Enter/move towards transition target `T7__DH1__GLOW_WORM`.
            this.T7__DH1__GLOW_WORM_enter();
            
            // Step 4: complete transition. Ends event dispatch. No other behaviors are checked.
            return;
        } // end of behavior for T7__DH1__TEDDY_BEAR
        
        // Check if event has been consumed before calling ancestor handler.
        if (!consume_event)
        {
            this.T7__DH1__TOY_ev1();
        }
    }
    
    
    ////////////////////////////////////////////////////////////////////////////////
    // event handlers for state T7__DEEP_HISTORY2
    ////////////////////////////////////////////////////////////////////////////////
    
    private void T7__DEEP_HISTORY2_enter()
    {
        this.stateId = StateId.T7__DEEP_HISTORY2;
        
        // T7__DEEP_HISTORY2 behavior
        // uml: enter / { trace("Enter T7__DEEP_HISTORY2."); }
        {
            // Step 1: execute action `trace("Enter T7__DEEP_HISTORY2.");`
            ____GilData_EchoStringVoid("MainClass.Trace(\"Enter T7__DEEP_HISTORY2.\");");
        } // end of behavior for T7__DEEP_HISTORY2
    }
    
    private void T7__DEEP_HISTORY2_exit()
    {
        // T7__DEEP_HISTORY2 behavior
        // uml: exit / { trace("Exit T7__DEEP_HISTORY2."); }
        {
            // Step 1: execute action `trace("Exit T7__DEEP_HISTORY2.");`
            ____GilData_EchoStringVoid("MainClass.Trace(\"Exit T7__DEEP_HISTORY2.\");");
        } // end of behavior for T7__DEEP_HISTORY2
        
        this.stateId = StateId.TEST7;
    }
    
    
    ////////////////////////////////////////////////////////////////////////////////
    // event handlers for state T7__DEEP_HISTORY2__T7__STATE_0
    ////////////////////////////////////////////////////////////////////////////////
    
    private void T7__DEEP_HISTORY2__T7__STATE_0_enter()
    {
        this.stateId = StateId.T7__DEEP_HISTORY2__T7__STATE_0;
        
        // T7__DEEP_HISTORY2__T7__state_0 behavior
        // uml: enter / { trace("Enter T7__DEEP_HISTORY2__T7__state_0."); }
        {
            // Step 1: execute action `trace("Enter T7__DEEP_HISTORY2__T7__state_0.");`
            ____GilData_EchoStringVoid("MainClass.Trace(\"Enter T7__DEEP_HISTORY2__T7__state_0.\");");
        } // end of behavior for T7__DEEP_HISTORY2__T7__state_0
    }
    
    private void T7__DEEP_HISTORY2__T7__STATE_0_exit()
    {
        // T7__DEEP_HISTORY2__T7__state_0 behavior
        // uml: exit / { trace("Exit T7__DEEP_HISTORY2__T7__state_0."); }
        {
            // Step 1: execute action `trace("Exit T7__DEEP_HISTORY2__T7__state_0.");`
            ____GilData_EchoStringVoid("MainClass.Trace(\"Exit T7__DEEP_HISTORY2__T7__state_0.\");");
        } // end of behavior for T7__DEEP_HISTORY2__T7__state_0
        
        this.stateId = StateId.T7__DEEP_HISTORY2;
    }
    
    private void T7__DEEP_HISTORY2__T7__STATE_0_evopen()
    {
        // T7__DEEP_HISTORY2__T7__state_0 behavior
        // uml: evOpen [trace_guard("State T7__DEEP_HISTORY2__T7__state_0: check behavior `evOpen TransitionTo(T7__DEEP_HISTORY2__T7__state_3)`.", true)] / { trace("Transition action `` for T7__DEEP_HISTORY2__T7__state_0 to T7__DEEP_HISTORY2__T7__state_3."); } TransitionTo(T7__DEEP_HISTORY2__T7__state_3)
        if (____GilData_VarArgsToBool(____GilData_EchoStringBool("trace_guard(\"State T7__DEEP_HISTORY2__T7__state_0: check behavior `evOpen TransitionTo(T7__DEEP_HISTORY2__T7__state_3)`.\", true)")))
        {
            // Step 1: Exit states until we reach `T7__DEEP_HISTORY2` state (Least Common Ancestor for transition).
            this.ExitUpToStateHandler(StateId.T7__DEEP_HISTORY2);
            
            // Step 2: Transition action: `trace("Transition action `` for T7__DEEP_HISTORY2__T7__state_0 to T7__DEEP_HISTORY2__T7__state_3.");`.
            ____GilData_EchoStringVoid("MainClass.Trace(\"Transition action `` for T7__DEEP_HISTORY2__T7__state_0 to T7__DEEP_HISTORY2__T7__state_3.\");");
            
            // Step 3: Enter/move towards transition target `T7__DEEP_HISTORY2__T7__state_3`.
            this.T7__DEEP_HISTORY2__T7__STATE_3_enter();
            
            // Step 4: complete transition. Ends event dispatch. No other behaviors are checked.
            return;
        } // end of behavior for T7__DEEP_HISTORY2__T7__state_0
        
        // No ancestor handles this event.
    }
    
    private void T7__DEEP_HISTORY2__T7__state_0_InitialState_transition()
    {
        // T7__DEEP_HISTORY2__T7__state_0.<InitialState> behavior
        // uml: / { trace("Transition action `` for T7__DEEP_HISTORY2__T7__state_0.<InitialState> to T7__DEEP_HISTORY2__T7__state_0.<History>."); } TransitionTo(T7__DEEP_HISTORY2__T7__state_0.<History>)
        {
            // Step 1: Exit states until we reach `T7__DEEP_HISTORY2__T7__state_0` state (Least Common Ancestor for transition). Already at LCA, no exiting required.
            
            // Step 2: Transition action: `trace("Transition action `` for T7__DEEP_HISTORY2__T7__state_0.<InitialState> to T7__DEEP_HISTORY2__T7__state_0.<History>.");`.
            ____GilData_EchoStringVoid("MainClass.Trace(\"Transition action `` for T7__DEEP_HISTORY2__T7__state_0.<InitialState> to T7__DEEP_HISTORY2__T7__state_0.<History>.\");");
            
            // Step 3: Enter/move towards transition target `T7__DEEP_HISTORY2__T7__state_0.<History>`.
            // T7__DEEP_HISTORY2__T7__state_0.<History> is a pseudo state and cannot have an `enter` trigger.
            
            // T7__DEEP_HISTORY2__T7__state_0.<History> behavior
            // uml: [$gil(this.vars.T7__DEEP_HISTORY2__T7__state_0_history == T7__DEEP_HISTORY2__T7__state_0_HistoryId.T7__DEEP_HISTORY2__T7__STATE_2)] / { trace("Transition action `` for T7__DEEP_HISTORY2__T7__state_0.<History> to T7__DEEP_HISTORY2__T7__state_2."); } TransitionTo(T7__DEEP_HISTORY2__T7__state_2)
            if (____GilData_VarArgsToBool(this.vars.T7__DEEP_HISTORY2__T7__state_0_history == T7__DEEP_HISTORY2__T7__state_0_HistoryId.T7__DEEP_HISTORY2__T7__STATE_2))
            {
                // Step 1: Exit states until we reach `T7__DEEP_HISTORY2__T7__state_0` state (Least Common Ancestor for transition). Already at LCA, no exiting required.
                
                // Step 2: Transition action: `trace("Transition action `` for T7__DEEP_HISTORY2__T7__state_0.<History> to T7__DEEP_HISTORY2__T7__state_2.");`.
                ____GilData_EchoStringVoid("MainClass.Trace(\"Transition action `` for T7__DEEP_HISTORY2__T7__state_0.<History> to T7__DEEP_HISTORY2__T7__state_2.\");");
                
                // Step 3: Enter/move towards transition target `T7__DEEP_HISTORY2__T7__state_2`.
                this.T7__DEEP_HISTORY2__T7__STATE_2_enter();
                
                // Finish transition by calling pseudo state transition function.
                this.T7__DEEP_HISTORY2__T7__state_2_InitialState_transition();
                return; // event processing immediately stops when a transition finishes. No other behaviors for this state are checked.
            } // end of behavior for T7__DEEP_HISTORY2__T7__state_0.<History>
            
            // T7__DEEP_HISTORY2__T7__state_0.<History> behavior
            // uml: [$gil(this.vars.T7__DEEP_HISTORY2__T7__state_0_history == T7__DEEP_HISTORY2__T7__state_0_HistoryId.T7__DEEP_HISTORY2__T7__STATE_6)] / { trace("Transition action `` for T7__DEEP_HISTORY2__T7__state_0.<History> to T7__DEEP_HISTORY2__T7__state_6."); } TransitionTo(T7__DEEP_HISTORY2__T7__state_6)
            if (____GilData_VarArgsToBool(this.vars.T7__DEEP_HISTORY2__T7__state_0_history == T7__DEEP_HISTORY2__T7__state_0_HistoryId.T7__DEEP_HISTORY2__T7__STATE_6))
            {
                // Step 1: Exit states until we reach `T7__DEEP_HISTORY2__T7__state_0` state (Least Common Ancestor for transition). Already at LCA, no exiting required.
                
                // Step 2: Transition action: `trace("Transition action `` for T7__DEEP_HISTORY2__T7__state_0.<History> to T7__DEEP_HISTORY2__T7__state_6.");`.
                ____GilData_EchoStringVoid("MainClass.Trace(\"Transition action `` for T7__DEEP_HISTORY2__T7__state_0.<History> to T7__DEEP_HISTORY2__T7__state_6.\");");
                
                // Step 3: Enter/move towards transition target `T7__DEEP_HISTORY2__T7__state_6`.
                this.T7__DEEP_HISTORY2__T7__STATE_2_enter();
                this.T7__DEEP_HISTORY2__T7__STATE_6_enter();
                
                // Step 4: complete transition. Ends event dispatch. No other behaviors are checked.
                return;
            } // end of behavior for T7__DEEP_HISTORY2__T7__state_0.<History>
            
            // T7__DEEP_HISTORY2__T7__state_0.<History> behavior
            // uml: [$gil(this.vars.T7__DEEP_HISTORY2__T7__state_0_history == T7__DEEP_HISTORY2__T7__state_0_HistoryId.T7__DEEP_HISTORY2__T7__STATE_9)] / { trace("Transition action `` for T7__DEEP_HISTORY2__T7__state_0.<History> to T7__DEEP_HISTORY2__T7__state_9."); } TransitionTo(T7__DEEP_HISTORY2__T7__state_9)
            if (____GilData_VarArgsToBool(this.vars.T7__DEEP_HISTORY2__T7__state_0_history == T7__DEEP_HISTORY2__T7__state_0_HistoryId.T7__DEEP_HISTORY2__T7__STATE_9))
            {
                // Step 1: Exit states until we reach `T7__DEEP_HISTORY2__T7__state_0` state (Least Common Ancestor for transition). Already at LCA, no exiting required.
                
                // Step 2: Transition action: `trace("Transition action `` for T7__DEEP_HISTORY2__T7__state_0.<History> to T7__DEEP_HISTORY2__T7__state_9.");`.
                ____GilData_EchoStringVoid("MainClass.Trace(\"Transition action `` for T7__DEEP_HISTORY2__T7__state_0.<History> to T7__DEEP_HISTORY2__T7__state_9.\");");
                
                // Step 3: Enter/move towards transition target `T7__DEEP_HISTORY2__T7__state_9`.
                this.T7__DEEP_HISTORY2__T7__STATE_2_enter();
                this.T7__DEEP_HISTORY2__T7__STATE_9_enter();
                
                // Step 4: complete transition. Ends event dispatch. No other behaviors are checked.
                return;
            } // end of behavior for T7__DEEP_HISTORY2__T7__state_0.<History>
            
            // T7__DEEP_HISTORY2__T7__state_0.<History> behavior
            // uml: else / { trace("Transition action `` for T7__DEEP_HISTORY2__T7__state_0.<History> to T7__DEEP_HISTORY2__T7__state_1."); } TransitionTo(T7__DEEP_HISTORY2__T7__state_1)
            {
                // Step 1: Exit states until we reach `T7__DEEP_HISTORY2__T7__state_0` state (Least Common Ancestor for transition). Already at LCA, no exiting required.
                
                // Step 2: Transition action: `trace("Transition action `` for T7__DEEP_HISTORY2__T7__state_0.<History> to T7__DEEP_HISTORY2__T7__state_1.");`.
                ____GilData_EchoStringVoid("MainClass.Trace(\"Transition action `` for T7__DEEP_HISTORY2__T7__state_0.<History> to T7__DEEP_HISTORY2__T7__state_1.\");");
                
                // Step 3: Enter/move towards transition target `T7__DEEP_HISTORY2__T7__state_1`.
                this.T7__DEEP_HISTORY2__T7__STATE_1_enter();
                
                // Step 4: complete transition. Ends event dispatch. No other behaviors are checked.
                return;
            } // end of behavior for T7__DEEP_HISTORY2__T7__state_0.<History>
        } // end of behavior for T7__DEEP_HISTORY2__T7__state_0.<InitialState>
    }
    
    
    ////////////////////////////////////////////////////////////////////////////////
    // event handlers for state T7__DEEP_HISTORY2__T7__STATE_1
    ////////////////////////////////////////////////////////////////////////////////
    
    private void T7__DEEP_HISTORY2__T7__STATE_1_enter()
    {
        this.stateId = StateId.T7__DEEP_HISTORY2__T7__STATE_1;
        
        // T7__DEEP_HISTORY2__T7__state_1 behavior
        // uml: enter / { trace("Enter T7__DEEP_HISTORY2__T7__state_1."); }
        {
            // Step 1: execute action `trace("Enter T7__DEEP_HISTORY2__T7__state_1.");`
            ____GilData_EchoStringVoid("MainClass.Trace(\"Enter T7__DEEP_HISTORY2__T7__state_1.\");");
        } // end of behavior for T7__DEEP_HISTORY2__T7__state_1
        
        // T7__DEEP_HISTORY2__T7__state_1 behavior
        // uml: enter [trace_guard("State T7__DEEP_HISTORY2__T7__state_1: check behavior `enter / { $gil(this.vars.T7__DEEP_HISTORY2__T7__state_0_history = T7__DEEP_HISTORY2__T7__state_0_HistoryId.T7__DEEP_HISTORY2__T7__STATE_1;) }`.", true)] / { $gil(this.vars.T7__DEEP_HISTORY2__T7__state_0_history = T7__DEEP_HISTORY2__T7__state_0_HistoryId.T7__DEEP_HISTORY2__T7__STATE_1;) }
        if (____GilData_VarArgsToBool(____GilData_EchoStringBool("trace_guard(\"State T7__DEEP_HISTORY2__T7__state_1: check behavior `enter / { $gil(this.vars.T7__DEEP_HISTORY2__T7__state_0_history = T7__DEEP_HISTORY2__T7__state_0_HistoryId.T7__DEEP_HISTORY2__T7__STATE_1;) }`.\", true)")))
        {
            // Step 1: execute action `$gil(this.vars.T7__DEEP_HISTORY2__T7__state_0_history = T7__DEEP_HISTORY2__T7__state_0_HistoryId.T7__DEEP_HISTORY2__T7__STATE_1;)`
            this.vars.T7__DEEP_HISTORY2__T7__state_0_history = T7__DEEP_HISTORY2__T7__state_0_HistoryId.T7__DEEP_HISTORY2__T7__STATE_1;
        } // end of behavior for T7__DEEP_HISTORY2__T7__state_1
    }
    
    private void T7__DEEP_HISTORY2__T7__STATE_1_exit()
    {
        // T7__DEEP_HISTORY2__T7__state_1 behavior
        // uml: exit / { trace("Exit T7__DEEP_HISTORY2__T7__state_1."); }
        {
            // Step 1: execute action `trace("Exit T7__DEEP_HISTORY2__T7__state_1.");`
            ____GilData_EchoStringVoid("MainClass.Trace(\"Exit T7__DEEP_HISTORY2__T7__state_1.\");");
        } // end of behavior for T7__DEEP_HISTORY2__T7__state_1
        
        this.stateId = StateId.T7__DEEP_HISTORY2__T7__STATE_0;
    }
    
    private void T7__DEEP_HISTORY2__T7__STATE_1_evstep()
    {
        // T7__DEEP_HISTORY2__T7__state_1 behavior
        // uml: evStep [trace_guard("State T7__DEEP_HISTORY2__T7__state_1: check behavior `evStep TransitionTo(T7__DEEP_HISTORY2__T7__state_2)`.", true)] / { trace("Transition action `` for T7__DEEP_HISTORY2__T7__state_1 to T7__DEEP_HISTORY2__T7__state_2."); } TransitionTo(T7__DEEP_HISTORY2__T7__state_2)
        if (____GilData_VarArgsToBool(____GilData_EchoStringBool("trace_guard(\"State T7__DEEP_HISTORY2__T7__state_1: check behavior `evStep TransitionTo(T7__DEEP_HISTORY2__T7__state_2)`.\", true)")))
        {
            // Step 1: Exit states until we reach `T7__DEEP_HISTORY2__T7__state_0` state (Least Common Ancestor for transition).
            this.T7__DEEP_HISTORY2__T7__STATE_1_exit();
            
            // Step 2: Transition action: `trace("Transition action `` for T7__DEEP_HISTORY2__T7__state_1 to T7__DEEP_HISTORY2__T7__state_2.");`.
            ____GilData_EchoStringVoid("MainClass.Trace(\"Transition action `` for T7__DEEP_HISTORY2__T7__state_1 to T7__DEEP_HISTORY2__T7__state_2.\");");
            
            // Step 3: Enter/move towards transition target `T7__DEEP_HISTORY2__T7__state_2`.
            this.T7__DEEP_HISTORY2__T7__STATE_2_enter();
            
            // Finish transition by calling pseudo state transition function.
            this.T7__DEEP_HISTORY2__T7__state_2_InitialState_transition();
            return; // event processing immediately stops when a transition finishes. No other behaviors for this state are checked.
        } // end of behavior for T7__DEEP_HISTORY2__T7__state_1
        
        // No ancestor handles this event.
    }
    
    
    ////////////////////////////////////////////////////////////////////////////////
    // event handlers for state T7__DEEP_HISTORY2__T7__STATE_2
    ////////////////////////////////////////////////////////////////////////////////
    
    private void T7__DEEP_HISTORY2__T7__STATE_2_enter()
    {
        this.stateId = StateId.T7__DEEP_HISTORY2__T7__STATE_2;
        
        // T7__DEEP_HISTORY2__T7__state_2 behavior
        // uml: enter / { trace("Enter T7__DEEP_HISTORY2__T7__state_2."); }
        {
            // Step 1: execute action `trace("Enter T7__DEEP_HISTORY2__T7__state_2.");`
            ____GilData_EchoStringVoid("MainClass.Trace(\"Enter T7__DEEP_HISTORY2__T7__state_2.\");");
        } // end of behavior for T7__DEEP_HISTORY2__T7__state_2
        
        // T7__DEEP_HISTORY2__T7__state_2 behavior
        // uml: enter [trace_guard("State T7__DEEP_HISTORY2__T7__state_2: check behavior `enter / { $gil(this.vars.T7__DEEP_HISTORY2__T7__state_0_history = T7__DEEP_HISTORY2__T7__state_0_HistoryId.T7__DEEP_HISTORY2__T7__STATE_2;) }`.", true)] / { $gil(this.vars.T7__DEEP_HISTORY2__T7__state_0_history = T7__DEEP_HISTORY2__T7__state_0_HistoryId.T7__DEEP_HISTORY2__T7__STATE_2;) }
        if (____GilData_VarArgsToBool(____GilData_EchoStringBool("trace_guard(\"State T7__DEEP_HISTORY2__T7__state_2: check behavior `enter / { $gil(this.vars.T7__DEEP_HISTORY2__T7__state_0_history = T7__DEEP_HISTORY2__T7__state_0_HistoryId.T7__DEEP_HISTORY2__T7__STATE_2;) }`.\", true)")))
        {
            // Step 1: execute action `$gil(this.vars.T7__DEEP_HISTORY2__T7__state_0_history = T7__DEEP_HISTORY2__T7__state_0_HistoryId.T7__DEEP_HISTORY2__T7__STATE_2;)`
            this.vars.T7__DEEP_HISTORY2__T7__state_0_history = T7__DEEP_HISTORY2__T7__state_0_HistoryId.T7__DEEP_HISTORY2__T7__STATE_2;
        } // end of behavior for T7__DEEP_HISTORY2__T7__state_2
    }
    
    private void T7__DEEP_HISTORY2__T7__STATE_2_exit()
    {
        // T7__DEEP_HISTORY2__T7__state_2 behavior
        // uml: exit / { trace("Exit T7__DEEP_HISTORY2__T7__state_2."); }
        {
            // Step 1: execute action `trace("Exit T7__DEEP_HISTORY2__T7__state_2.");`
            ____GilData_EchoStringVoid("MainClass.Trace(\"Exit T7__DEEP_HISTORY2__T7__state_2.\");");
        } // end of behavior for T7__DEEP_HISTORY2__T7__state_2
        
        this.stateId = StateId.T7__DEEP_HISTORY2__T7__STATE_0;
    }
    
    private void T7__DEEP_HISTORY2__T7__STATE_2_evback()
    {
        // T7__DEEP_HISTORY2__T7__state_2 behavior
        // uml: evBack [trace_guard("State T7__DEEP_HISTORY2__T7__state_2: check behavior `evBack TransitionTo(T7__DEEP_HISTORY2__T7__state_1)`.", true)] / { trace("Transition action `` for T7__DEEP_HISTORY2__T7__state_2 to T7__DEEP_HISTORY2__T7__state_1."); } TransitionTo(T7__DEEP_HISTORY2__T7__state_1)
        if (____GilData_VarArgsToBool(____GilData_EchoStringBool("trace_guard(\"State T7__DEEP_HISTORY2__T7__state_2: check behavior `evBack TransitionTo(T7__DEEP_HISTORY2__T7__state_1)`.\", true)")))
        {
            // Step 1: Exit states until we reach `T7__DEEP_HISTORY2__T7__state_0` state (Least Common Ancestor for transition).
            this.ExitUpToStateHandler(StateId.T7__DEEP_HISTORY2__T7__STATE_0);
            
            // Step 2: Transition action: `trace("Transition action `` for T7__DEEP_HISTORY2__T7__state_2 to T7__DEEP_HISTORY2__T7__state_1.");`.
            ____GilData_EchoStringVoid("MainClass.Trace(\"Transition action `` for T7__DEEP_HISTORY2__T7__state_2 to T7__DEEP_HISTORY2__T7__state_1.\");");
            
            // Step 3: Enter/move towards transition target `T7__DEEP_HISTORY2__T7__state_1`.
            this.T7__DEEP_HISTORY2__T7__STATE_1_enter();
            
            // Step 4: complete transition. Ends event dispatch. No other behaviors are checked.
            return;
        } // end of behavior for T7__DEEP_HISTORY2__T7__state_2
        
        // No ancestor handles this event.
    }
    
    private void T7__DEEP_HISTORY2__T7__state_2_InitialState_transition()
    {
        // T7__DEEP_HISTORY2__T7__state_2.<InitialState> behavior
        // uml: / { trace("Transition action `` for T7__DEEP_HISTORY2__T7__state_2.<InitialState> to T7__DEEP_HISTORY2__T7__state_6."); } TransitionTo(T7__DEEP_HISTORY2__T7__state_6)
        {
            // Step 1: Exit states until we reach `T7__DEEP_HISTORY2__T7__state_2` state (Least Common Ancestor for transition). Already at LCA, no exiting required.
            
            // Step 2: Transition action: `trace("Transition action `` for T7__DEEP_HISTORY2__T7__state_2.<InitialState> to T7__DEEP_HISTORY2__T7__state_6.");`.
            ____GilData_EchoStringVoid("MainClass.Trace(\"Transition action `` for T7__DEEP_HISTORY2__T7__state_2.<InitialState> to T7__DEEP_HISTORY2__T7__state_6.\");");
            
            // Step 3: Enter/move towards transition target `T7__DEEP_HISTORY2__T7__state_6`.
            this.T7__DEEP_HISTORY2__T7__STATE_6_enter();
            
            // Step 4: complete transition. Ends event dispatch. No other behaviors are checked.
            return;
        } // end of behavior for T7__DEEP_HISTORY2__T7__state_2.<InitialState>
    }
    
    
    ////////////////////////////////////////////////////////////////////////////////
    // event handlers for state T7__DEEP_HISTORY2__T7__STATE_6
    ////////////////////////////////////////////////////////////////////////////////
    
    private void T7__DEEP_HISTORY2__T7__STATE_6_enter()
    {
        this.stateId = StateId.T7__DEEP_HISTORY2__T7__STATE_6;
        
        // T7__DEEP_HISTORY2__T7__state_6 behavior
        // uml: enter / { trace("Enter T7__DEEP_HISTORY2__T7__state_6."); }
        {
            // Step 1: execute action `trace("Enter T7__DEEP_HISTORY2__T7__state_6.");`
            ____GilData_EchoStringVoid("MainClass.Trace(\"Enter T7__DEEP_HISTORY2__T7__state_6.\");");
        } // end of behavior for T7__DEEP_HISTORY2__T7__state_6
        
        // T7__DEEP_HISTORY2__T7__state_6 behavior
        // uml: enter [trace_guard("State T7__DEEP_HISTORY2__T7__state_6: check behavior `enter / { $gil(this.vars.T7__DEEP_HISTORY2__T7__state_0_history = T7__DEEP_HISTORY2__T7__state_0_HistoryId.T7__DEEP_HISTORY2__T7__STATE_6;) }`.", true)] / { $gil(this.vars.T7__DEEP_HISTORY2__T7__state_0_history = T7__DEEP_HISTORY2__T7__state_0_HistoryId.T7__DEEP_HISTORY2__T7__STATE_6;) }
        if (____GilData_VarArgsToBool(____GilData_EchoStringBool("trace_guard(\"State T7__DEEP_HISTORY2__T7__state_6: check behavior `enter / { $gil(this.vars.T7__DEEP_HISTORY2__T7__state_0_history = T7__DEEP_HISTORY2__T7__state_0_HistoryId.T7__DEEP_HISTORY2__T7__STATE_6;) }`.\", true)")))
        {
            // Step 1: execute action `$gil(this.vars.T7__DEEP_HISTORY2__T7__state_0_history = T7__DEEP_HISTORY2__T7__state_0_HistoryId.T7__DEEP_HISTORY2__T7__STATE_6;)`
            this.vars.T7__DEEP_HISTORY2__T7__state_0_history = T7__DEEP_HISTORY2__T7__state_0_HistoryId.T7__DEEP_HISTORY2__T7__STATE_6;
        } // end of behavior for T7__DEEP_HISTORY2__T7__state_6
    }
    
    private void T7__DEEP_HISTORY2__T7__STATE_6_exit()
    {
        // T7__DEEP_HISTORY2__T7__state_6 behavior
        // uml: exit / { trace("Exit T7__DEEP_HISTORY2__T7__state_6."); }
        {
            // Step 1: execute action `trace("Exit T7__DEEP_HISTORY2__T7__state_6.");`
            ____GilData_EchoStringVoid("MainClass.Trace(\"Exit T7__DEEP_HISTORY2__T7__state_6.\");");
        } // end of behavior for T7__DEEP_HISTORY2__T7__state_6
        
        this.stateId = StateId.T7__DEEP_HISTORY2__T7__STATE_2;
    }
    
    private void T7__DEEP_HISTORY2__T7__STATE_6_evstep()
    {
        // T7__DEEP_HISTORY2__T7__state_6 behavior
        // uml: evStep [trace_guard("State T7__DEEP_HISTORY2__T7__state_6: check behavior `evStep TransitionTo(T7__DEEP_HISTORY2__T7__state_9)`.", true)] / { trace("Transition action `` for T7__DEEP_HISTORY2__T7__state_6 to T7__DEEP_HISTORY2__T7__state_9."); } TransitionTo(T7__DEEP_HISTORY2__T7__state_9)
        if (____GilData_VarArgsToBool(____GilData_EchoStringBool("trace_guard(\"State T7__DEEP_HISTORY2__T7__state_6: check behavior `evStep TransitionTo(T7__DEEP_HISTORY2__T7__state_9)`.\", true)")))
        {
            // Step 1: Exit states until we reach `T7__DEEP_HISTORY2__T7__state_2` state (Least Common Ancestor for transition).
            this.T7__DEEP_HISTORY2__T7__STATE_6_exit();
            
            // Step 2: Transition action: `trace("Transition action `` for T7__DEEP_HISTORY2__T7__state_6 to T7__DEEP_HISTORY2__T7__state_9.");`.
            ____GilData_EchoStringVoid("MainClass.Trace(\"Transition action `` for T7__DEEP_HISTORY2__T7__state_6 to T7__DEEP_HISTORY2__T7__state_9.\");");
            
            // Step 3: Enter/move towards transition target `T7__DEEP_HISTORY2__T7__state_9`.
            this.T7__DEEP_HISTORY2__T7__STATE_9_enter();
            
            // Step 4: complete transition. Ends event dispatch. No other behaviors are checked.
            return;
        } // end of behavior for T7__DEEP_HISTORY2__T7__state_6
        
        // No ancestor handles this event.
    }
    
    
    ////////////////////////////////////////////////////////////////////////////////
    // event handlers for state T7__DEEP_HISTORY2__T7__STATE_9
    ////////////////////////////////////////////////////////////////////////////////
    
    private void T7__DEEP_HISTORY2__T7__STATE_9_enter()
    {
        this.stateId = StateId.T7__DEEP_HISTORY2__T7__STATE_9;
        
        // T7__DEEP_HISTORY2__T7__state_9 behavior
        // uml: enter / { trace("Enter T7__DEEP_HISTORY2__T7__state_9."); }
        {
            // Step 1: execute action `trace("Enter T7__DEEP_HISTORY2__T7__state_9.");`
            ____GilData_EchoStringVoid("MainClass.Trace(\"Enter T7__DEEP_HISTORY2__T7__state_9.\");");
        } // end of behavior for T7__DEEP_HISTORY2__T7__state_9
        
        // T7__DEEP_HISTORY2__T7__state_9 behavior
        // uml: enter [trace_guard("State T7__DEEP_HISTORY2__T7__state_9: check behavior `enter / { $gil(this.vars.T7__DEEP_HISTORY2__T7__state_0_history = T7__DEEP_HISTORY2__T7__state_0_HistoryId.T7__DEEP_HISTORY2__T7__STATE_9;) }`.", true)] / { $gil(this.vars.T7__DEEP_HISTORY2__T7__state_0_history = T7__DEEP_HISTORY2__T7__state_0_HistoryId.T7__DEEP_HISTORY2__T7__STATE_9;) }
        if (____GilData_VarArgsToBool(____GilData_EchoStringBool("trace_guard(\"State T7__DEEP_HISTORY2__T7__state_9: check behavior `enter / { $gil(this.vars.T7__DEEP_HISTORY2__T7__state_0_history = T7__DEEP_HISTORY2__T7__state_0_HistoryId.T7__DEEP_HISTORY2__T7__STATE_9;) }`.\", true)")))
        {
            // Step 1: execute action `$gil(this.vars.T7__DEEP_HISTORY2__T7__state_0_history = T7__DEEP_HISTORY2__T7__state_0_HistoryId.T7__DEEP_HISTORY2__T7__STATE_9;)`
            this.vars.T7__DEEP_HISTORY2__T7__state_0_history = T7__DEEP_HISTORY2__T7__state_0_HistoryId.T7__DEEP_HISTORY2__T7__STATE_9;
        } // end of behavior for T7__DEEP_HISTORY2__T7__state_9
    }
    
    private void T7__DEEP_HISTORY2__T7__STATE_9_exit()
    {
        // T7__DEEP_HISTORY2__T7__state_9 behavior
        // uml: exit / { trace("Exit T7__DEEP_HISTORY2__T7__state_9."); }
        {
            // Step 1: execute action `trace("Exit T7__DEEP_HISTORY2__T7__state_9.");`
            ____GilData_EchoStringVoid("MainClass.Trace(\"Exit T7__DEEP_HISTORY2__T7__state_9.\");");
        } // end of behavior for T7__DEEP_HISTORY2__T7__state_9
        
        this.stateId = StateId.T7__DEEP_HISTORY2__T7__STATE_2;
    }
    
    
    ////////////////////////////////////////////////////////////////////////////////
    // event handlers for state T7__DEEP_HISTORY2__T7__STATE_3
    ////////////////////////////////////////////////////////////////////////////////
    
    private void T7__DEEP_HISTORY2__T7__STATE_3_enter()
    {
        this.stateId = StateId.T7__DEEP_HISTORY2__T7__STATE_3;
        
        // T7__DEEP_HISTORY2__T7__state_3 behavior
        // uml: enter / { trace("Enter T7__DEEP_HISTORY2__T7__state_3."); }
        {
            // Step 1: execute action `trace("Enter T7__DEEP_HISTORY2__T7__state_3.");`
            ____GilData_EchoStringVoid("MainClass.Trace(\"Enter T7__DEEP_HISTORY2__T7__state_3.\");");
        } // end of behavior for T7__DEEP_HISTORY2__T7__state_3
    }
    
    private void T7__DEEP_HISTORY2__T7__STATE_3_exit()
    {
        // T7__DEEP_HISTORY2__T7__state_3 behavior
        // uml: exit / { trace("Exit T7__DEEP_HISTORY2__T7__state_3."); }
        {
            // Step 1: execute action `trace("Exit T7__DEEP_HISTORY2__T7__state_3.");`
            ____GilData_EchoStringVoid("MainClass.Trace(\"Exit T7__DEEP_HISTORY2__T7__state_3.\");");
        } // end of behavior for T7__DEEP_HISTORY2__T7__state_3
        
        this.stateId = StateId.T7__DEEP_HISTORY2;
    }
    
    private void T7__DEEP_HISTORY2__T7__STATE_3_evclose()
    {
        // T7__DEEP_HISTORY2__T7__state_3 behavior
        // uml: evClose [trace_guard("State T7__DEEP_HISTORY2__T7__state_3: check behavior `evClose TransitionTo(T7__DEEP_HISTORY2__T7__state_0)`.", true)] / { trace("Transition action `` for T7__DEEP_HISTORY2__T7__state_3 to T7__DEEP_HISTORY2__T7__state_0."); } TransitionTo(T7__DEEP_HISTORY2__T7__state_0)
        if (____GilData_VarArgsToBool(____GilData_EchoStringBool("trace_guard(\"State T7__DEEP_HISTORY2__T7__state_3: check behavior `evClose TransitionTo(T7__DEEP_HISTORY2__T7__state_0)`.\", true)")))
        {
            // Step 1: Exit states until we reach `T7__DEEP_HISTORY2` state (Least Common Ancestor for transition).
            this.T7__DEEP_HISTORY2__T7__STATE_3_exit();
            
            // Step 2: Transition action: `trace("Transition action `` for T7__DEEP_HISTORY2__T7__state_3 to T7__DEEP_HISTORY2__T7__state_0.");`.
            ____GilData_EchoStringVoid("MainClass.Trace(\"Transition action `` for T7__DEEP_HISTORY2__T7__state_3 to T7__DEEP_HISTORY2__T7__state_0.\");");
            
            // Step 3: Enter/move towards transition target `T7__DEEP_HISTORY2__T7__state_0`.
            this.T7__DEEP_HISTORY2__T7__STATE_0_enter();
            
            // Finish transition by calling pseudo state transition function.
            this.T7__DEEP_HISTORY2__T7__state_0_InitialState_transition();
            return; // event processing immediately stops when a transition finishes. No other behaviors for this state are checked.
        } // end of behavior for T7__DEEP_HISTORY2__T7__state_3
        
        // No ancestor handles this event.
    }
    
    
    ////////////////////////////////////////////////////////////////////////////////
    // event handlers for state T7__DEEP_HISTORY3
    ////////////////////////////////////////////////////////////////////////////////
    
    private void T7__DEEP_HISTORY3_enter()
    {
        this.stateId = StateId.T7__DEEP_HISTORY3;
        
        // T7__DEEP_HISTORY3 behavior
        // uml: enter / { trace("Enter T7__DEEP_HISTORY3."); }
        {
            // Step 1: execute action `trace("Enter T7__DEEP_HISTORY3.");`
            ____GilData_EchoStringVoid("MainClass.Trace(\"Enter T7__DEEP_HISTORY3.\");");
        } // end of behavior for T7__DEEP_HISTORY3
    }
    
    private void T7__DEEP_HISTORY3_exit()
    {
        // T7__DEEP_HISTORY3 behavior
        // uml: exit / { trace("Exit T7__DEEP_HISTORY3."); }
        {
            // Step 1: execute action `trace("Exit T7__DEEP_HISTORY3.");`
            ____GilData_EchoStringVoid("MainClass.Trace(\"Exit T7__DEEP_HISTORY3.\");");
        } // end of behavior for T7__DEEP_HISTORY3
        
        this.stateId = StateId.TEST7;
    }
    
    
    ////////////////////////////////////////////////////////////////////////////////
    // event handlers for state T7__DEEP_HISTORY3__T7__STATE_0
    ////////////////////////////////////////////////////////////////////////////////
    
    private void T7__DEEP_HISTORY3__T7__STATE_0_enter()
    {
        this.stateId = StateId.T7__DEEP_HISTORY3__T7__STATE_0;
        
        // T7__DEEP_HISTORY3__T7__state_0 behavior
        // uml: enter / { trace("Enter T7__DEEP_HISTORY3__T7__state_0."); }
        {
            // Step 1: execute action `trace("Enter T7__DEEP_HISTORY3__T7__state_0.");`
            ____GilData_EchoStringVoid("MainClass.Trace(\"Enter T7__DEEP_HISTORY3__T7__state_0.\");");
        } // end of behavior for T7__DEEP_HISTORY3__T7__state_0
    }
    
    private void T7__DEEP_HISTORY3__T7__STATE_0_exit()
    {
        // T7__DEEP_HISTORY3__T7__state_0 behavior
        // uml: exit / { trace("Exit T7__DEEP_HISTORY3__T7__state_0."); }
        {
            // Step 1: execute action `trace("Exit T7__DEEP_HISTORY3__T7__state_0.");`
            ____GilData_EchoStringVoid("MainClass.Trace(\"Exit T7__DEEP_HISTORY3__T7__state_0.\");");
        } // end of behavior for T7__DEEP_HISTORY3__T7__state_0
        
        this.stateId = StateId.T7__DEEP_HISTORY3;
    }
    
    private void T7__DEEP_HISTORY3__T7__STATE_0_evopen()
    {
        // T7__DEEP_HISTORY3__T7__state_0 behavior
        // uml: evOpen [trace_guard("State T7__DEEP_HISTORY3__T7__state_0: check behavior `evOpen TransitionTo(T7__DEEP_HISTORY3__T7__state_3)`.", true)] / { trace("Transition action `` for T7__DEEP_HISTORY3__T7__state_0 to T7__DEEP_HISTORY3__T7__state_3."); } TransitionTo(T7__DEEP_HISTORY3__T7__state_3)
        if (____GilData_VarArgsToBool(____GilData_EchoStringBool("trace_guard(\"State T7__DEEP_HISTORY3__T7__state_0: check behavior `evOpen TransitionTo(T7__DEEP_HISTORY3__T7__state_3)`.\", true)")))
        {
            // Step 1: Exit states until we reach `T7__DEEP_HISTORY3` state (Least Common Ancestor for transition).
            this.ExitUpToStateHandler(StateId.T7__DEEP_HISTORY3);
            
            // Step 2: Transition action: `trace("Transition action `` for T7__DEEP_HISTORY3__T7__state_0 to T7__DEEP_HISTORY3__T7__state_3.");`.
            ____GilData_EchoStringVoid("MainClass.Trace(\"Transition action `` for T7__DEEP_HISTORY3__T7__state_0 to T7__DEEP_HISTORY3__T7__state_3.\");");
            
            // Step 3: Enter/move towards transition target `T7__DEEP_HISTORY3__T7__state_3`.
            this.T7__DEEP_HISTORY3__T7__STATE_3_enter();
            
            // Step 4: complete transition. Ends event dispatch. No other behaviors are checked.
            return;
        } // end of behavior for T7__DEEP_HISTORY3__T7__state_0
        
        // No ancestor handles this event.
    }
    
    private void T7__DEEP_HISTORY3__T7__state_0_InitialState_transition()
    {
        // T7__DEEP_HISTORY3__T7__state_0.<InitialState> behavior
        // uml: / { trace("Transition action `` for T7__DEEP_HISTORY3__T7__state_0.<InitialState> to T7__DEEP_HISTORY3__T7__state_0.<History>."); } TransitionTo(T7__DEEP_HISTORY3__T7__state_0.<History>)
        {
            // Step 1: Exit states until we reach `T7__DEEP_HISTORY3__T7__state_0` state (Least Common Ancestor for transition). Already at LCA, no exiting required.
            
            // Step 2: Transition action: `trace("Transition action `` for T7__DEEP_HISTORY3__T7__state_0.<InitialState> to T7__DEEP_HISTORY3__T7__state_0.<History>.");`.
            ____GilData_EchoStringVoid("MainClass.Trace(\"Transition action `` for T7__DEEP_HISTORY3__T7__state_0.<InitialState> to T7__DEEP_HISTORY3__T7__state_0.<History>.\");");
            
            // Step 3: Enter/move towards transition target `T7__DEEP_HISTORY3__T7__state_0.<History>`.
            // T7__DEEP_HISTORY3__T7__state_0.<History> is a pseudo state and cannot have an `enter` trigger.
            
            // T7__DEEP_HISTORY3__T7__state_0.<History> behavior
            // uml: [$gil(this.vars.T7__DEEP_HISTORY3__T7__state_0_history == T7__DEEP_HISTORY3__T7__state_0_HistoryId.T7__DEEP_HISTORY3__T7__STATE_2)] / { trace("Transition action `` for T7__DEEP_HISTORY3__T7__state_0.<History> to T7__DEEP_HISTORY3__T7__state_2."); } TransitionTo(T7__DEEP_HISTORY3__T7__state_2)
            if (____GilData_VarArgsToBool(this.vars.T7__DEEP_HISTORY3__T7__state_0_history == T7__DEEP_HISTORY3__T7__state_0_HistoryId.T7__DEEP_HISTORY3__T7__STATE_2))
            {
                // Step 1: Exit states until we reach `T7__DEEP_HISTORY3__T7__state_0` state (Least Common Ancestor for transition). Already at LCA, no exiting required.
                
                // Step 2: Transition action: `trace("Transition action `` for T7__DEEP_HISTORY3__T7__state_0.<History> to T7__DEEP_HISTORY3__T7__state_2.");`.
                ____GilData_EchoStringVoid("MainClass.Trace(\"Transition action `` for T7__DEEP_HISTORY3__T7__state_0.<History> to T7__DEEP_HISTORY3__T7__state_2.\");");
                
                // Step 3: Enter/move towards transition target `T7__DEEP_HISTORY3__T7__state_2`.
                this.T7__DEEP_HISTORY3__T7__STATE_2_enter();
                
                // Finish transition by calling pseudo state transition function.
                this.T7__DEEP_HISTORY3__T7__state_2_InitialState_transition();
                return; // event processing immediately stops when a transition finishes. No other behaviors for this state are checked.
            } // end of behavior for T7__DEEP_HISTORY3__T7__state_0.<History>
            
            // T7__DEEP_HISTORY3__T7__state_0.<History> behavior
            // uml: else / { trace("Transition action `` for T7__DEEP_HISTORY3__T7__state_0.<History> to T7__DEEP_HISTORY3__T7__state_1."); } TransitionTo(T7__DEEP_HISTORY3__T7__state_1)
            {
                // Step 1: Exit states until we reach `T7__DEEP_HISTORY3__T7__state_0` state (Least Common Ancestor for transition). Already at LCA, no exiting required.
                
                // Step 2: Transition action: `trace("Transition action `` for T7__DEEP_HISTORY3__T7__state_0.<History> to T7__DEEP_HISTORY3__T7__state_1.");`.
                ____GilData_EchoStringVoid("MainClass.Trace(\"Transition action `` for T7__DEEP_HISTORY3__T7__state_0.<History> to T7__DEEP_HISTORY3__T7__state_1.\");");
                
                // Step 3: Enter/move towards transition target `T7__DEEP_HISTORY3__T7__state_1`.
                this.T7__DEEP_HISTORY3__T7__STATE_1_enter();
                
                // Step 4: complete transition. Ends event dispatch. No other behaviors are checked.
                return;
            } // end of behavior for T7__DEEP_HISTORY3__T7__state_0.<History>
        } // end of behavior for T7__DEEP_HISTORY3__T7__state_0.<InitialState>
    }
    
    
    ////////////////////////////////////////////////////////////////////////////////
    // event handlers for state T7__DEEP_HISTORY3__T7__STATE_1
    ////////////////////////////////////////////////////////////////////////////////
    
    private void T7__DEEP_HISTORY3__T7__STATE_1_enter()
    {
        this.stateId = StateId.T7__DEEP_HISTORY3__T7__STATE_1;
        
        // T7__DEEP_HISTORY3__T7__state_1 behavior
        // uml: enter / { trace("Enter T7__DEEP_HISTORY3__T7__state_1."); }
        {
            // Step 1: execute action `trace("Enter T7__DEEP_HISTORY3__T7__state_1.");`
            ____GilData_EchoStringVoid("MainClass.Trace(\"Enter T7__DEEP_HISTORY3__T7__state_1.\");");
        } // end of behavior for T7__DEEP_HISTORY3__T7__state_1
        
        // T7__DEEP_HISTORY3__T7__state_1 behavior
        // uml: enter [trace_guard("State T7__DEEP_HISTORY3__T7__state_1: check behavior `enter / { $gil(this.vars.T7__DEEP_HISTORY3__T7__state_0_history = T7__DEEP_HISTORY3__T7__state_0_HistoryId.T7__DEEP_HISTORY3__T7__STATE_1;) }`.", true)] / { $gil(this.vars.T7__DEEP_HISTORY3__T7__state_0_history = T7__DEEP_HISTORY3__T7__state_0_HistoryId.T7__DEEP_HISTORY3__T7__STATE_1;) }
        if (____GilData_VarArgsToBool(____GilData_EchoStringBool("trace_guard(\"State T7__DEEP_HISTORY3__T7__state_1: check behavior `enter / { $gil(this.vars.T7__DEEP_HISTORY3__T7__state_0_history = T7__DEEP_HISTORY3__T7__state_0_HistoryId.T7__DEEP_HISTORY3__T7__STATE_1;) }`.\", true)")))
        {
            // Step 1: execute action `$gil(this.vars.T7__DEEP_HISTORY3__T7__state_0_history = T7__DEEP_HISTORY3__T7__state_0_HistoryId.T7__DEEP_HISTORY3__T7__STATE_1;)`
            this.vars.T7__DEEP_HISTORY3__T7__state_0_history = T7__DEEP_HISTORY3__T7__state_0_HistoryId.T7__DEEP_HISTORY3__T7__STATE_1;
        } // end of behavior for T7__DEEP_HISTORY3__T7__state_1
    }
    
    private void T7__DEEP_HISTORY3__T7__STATE_1_exit()
    {
        // T7__DEEP_HISTORY3__T7__state_1 behavior
        // uml: exit / { trace("Exit T7__DEEP_HISTORY3__T7__state_1."); }
        {
            // Step 1: execute action `trace("Exit T7__DEEP_HISTORY3__T7__state_1.");`
            ____GilData_EchoStringVoid("MainClass.Trace(\"Exit T7__DEEP_HISTORY3__T7__state_1.\");");
        } // end of behavior for T7__DEEP_HISTORY3__T7__state_1
        
        this.stateId = StateId.T7__DEEP_HISTORY3__T7__STATE_0;
    }
    
    private void T7__DEEP_HISTORY3__T7__STATE_1_evstep()
    {
        // T7__DEEP_HISTORY3__T7__state_1 behavior
        // uml: evStep [trace_guard("State T7__DEEP_HISTORY3__T7__state_1: check behavior `evStep TransitionTo(T7__DEEP_HISTORY3__T7__state_2)`.", true)] / { trace("Transition action `` for T7__DEEP_HISTORY3__T7__state_1 to T7__DEEP_HISTORY3__T7__state_2."); } TransitionTo(T7__DEEP_HISTORY3__T7__state_2)
        if (____GilData_VarArgsToBool(____GilData_EchoStringBool("trace_guard(\"State T7__DEEP_HISTORY3__T7__state_1: check behavior `evStep TransitionTo(T7__DEEP_HISTORY3__T7__state_2)`.\", true)")))
        {
            // Step 1: Exit states until we reach `T7__DEEP_HISTORY3__T7__state_0` state (Least Common Ancestor for transition).
            this.T7__DEEP_HISTORY3__T7__STATE_1_exit();
            
            // Step 2: Transition action: `trace("Transition action `` for T7__DEEP_HISTORY3__T7__state_1 to T7__DEEP_HISTORY3__T7__state_2.");`.
            ____GilData_EchoStringVoid("MainClass.Trace(\"Transition action `` for T7__DEEP_HISTORY3__T7__state_1 to T7__DEEP_HISTORY3__T7__state_2.\");");
            
            // Step 3: Enter/move towards transition target `T7__DEEP_HISTORY3__T7__state_2`.
            this.T7__DEEP_HISTORY3__T7__STATE_2_enter();
            
            // Finish transition by calling pseudo state transition function.
            this.T7__DEEP_HISTORY3__T7__state_2_InitialState_transition();
            return; // event processing immediately stops when a transition finishes. No other behaviors for this state are checked.
        } // end of behavior for T7__DEEP_HISTORY3__T7__state_1
        
        // No ancestor handles this event.
    }
    
    
    ////////////////////////////////////////////////////////////////////////////////
    // event handlers for state T7__DEEP_HISTORY3__T7__STATE_2
    ////////////////////////////////////////////////////////////////////////////////
    
    private void T7__DEEP_HISTORY3__T7__STATE_2_enter()
    {
        this.stateId = StateId.T7__DEEP_HISTORY3__T7__STATE_2;
        
        // T7__DEEP_HISTORY3__T7__state_2 behavior
        // uml: enter / { trace("Enter T7__DEEP_HISTORY3__T7__state_2."); }
        {
            // Step 1: execute action `trace("Enter T7__DEEP_HISTORY3__T7__state_2.");`
            ____GilData_EchoStringVoid("MainClass.Trace(\"Enter T7__DEEP_HISTORY3__T7__state_2.\");");
        } // end of behavior for T7__DEEP_HISTORY3__T7__state_2
        
        // T7__DEEP_HISTORY3__T7__state_2 behavior
        // uml: enter [trace_guard("State T7__DEEP_HISTORY3__T7__state_2: check behavior `enter / { $gil(this.vars.T7__DEEP_HISTORY3__T7__state_0_history = T7__DEEP_HISTORY3__T7__state_0_HistoryId.T7__DEEP_HISTORY3__T7__STATE_2;) }`.", true)] / { $gil(this.vars.T7__DEEP_HISTORY3__T7__state_0_history = T7__DEEP_HISTORY3__T7__state_0_HistoryId.T7__DEEP_HISTORY3__T7__STATE_2;) }
        if (____GilData_VarArgsToBool(____GilData_EchoStringBool("trace_guard(\"State T7__DEEP_HISTORY3__T7__state_2: check behavior `enter / { $gil(this.vars.T7__DEEP_HISTORY3__T7__state_0_history = T7__DEEP_HISTORY3__T7__state_0_HistoryId.T7__DEEP_HISTORY3__T7__STATE_2;) }`.\", true)")))
        {
            // Step 1: execute action `$gil(this.vars.T7__DEEP_HISTORY3__T7__state_0_history = T7__DEEP_HISTORY3__T7__state_0_HistoryId.T7__DEEP_HISTORY3__T7__STATE_2;)`
            this.vars.T7__DEEP_HISTORY3__T7__state_0_history = T7__DEEP_HISTORY3__T7__state_0_HistoryId.T7__DEEP_HISTORY3__T7__STATE_2;
        } // end of behavior for T7__DEEP_HISTORY3__T7__state_2
    }
    
    private void T7__DEEP_HISTORY3__T7__STATE_2_exit()
    {
        // T7__DEEP_HISTORY3__T7__state_2 behavior
        // uml: exit / { trace("Exit T7__DEEP_HISTORY3__T7__state_2."); }
        {
            // Step 1: execute action `trace("Exit T7__DEEP_HISTORY3__T7__state_2.");`
            ____GilData_EchoStringVoid("MainClass.Trace(\"Exit T7__DEEP_HISTORY3__T7__state_2.\");");
        } // end of behavior for T7__DEEP_HISTORY3__T7__state_2
        
        this.stateId = StateId.T7__DEEP_HISTORY3__T7__STATE_0;
    }
    
    private void T7__DEEP_HISTORY3__T7__STATE_2_evback()
    {
        // T7__DEEP_HISTORY3__T7__state_2 behavior
        // uml: evBack [trace_guard("State T7__DEEP_HISTORY3__T7__state_2: check behavior `evBack TransitionTo(T7__DEEP_HISTORY3__T7__state_1)`.", true)] / { trace("Transition action `` for T7__DEEP_HISTORY3__T7__state_2 to T7__DEEP_HISTORY3__T7__state_1."); } TransitionTo(T7__DEEP_HISTORY3__T7__state_1)
        if (____GilData_VarArgsToBool(____GilData_EchoStringBool("trace_guard(\"State T7__DEEP_HISTORY3__T7__state_2: check behavior `evBack TransitionTo(T7__DEEP_HISTORY3__T7__state_1)`.\", true)")))
        {
            // Step 1: Exit states until we reach `T7__DEEP_HISTORY3__T7__state_0` state (Least Common Ancestor for transition).
            this.ExitUpToStateHandler(StateId.T7__DEEP_HISTORY3__T7__STATE_0);
            
            // Step 2: Transition action: `trace("Transition action `` for T7__DEEP_HISTORY3__T7__state_2 to T7__DEEP_HISTORY3__T7__state_1.");`.
            ____GilData_EchoStringVoid("MainClass.Trace(\"Transition action `` for T7__DEEP_HISTORY3__T7__state_2 to T7__DEEP_HISTORY3__T7__state_1.\");");
            
            // Step 3: Enter/move towards transition target `T7__DEEP_HISTORY3__T7__state_1`.
            this.T7__DEEP_HISTORY3__T7__STATE_1_enter();
            
            // Step 4: complete transition. Ends event dispatch. No other behaviors are checked.
            return;
        } // end of behavior for T7__DEEP_HISTORY3__T7__state_2
        
        // No ancestor handles this event.
    }
    
    private void T7__DEEP_HISTORY3__T7__state_2_InitialState_transition()
    {
        // T7__DEEP_HISTORY3__T7__state_2.<InitialState> behavior
        // uml: / { trace("Transition action `` for T7__DEEP_HISTORY3__T7__state_2.<InitialState> to T7__DEEP_HISTORY3__T7__state_6."); } TransitionTo(T7__DEEP_HISTORY3__T7__state_6)
        {
            // Step 1: Exit states until we reach `T7__DEEP_HISTORY3__T7__state_2` state (Least Common Ancestor for transition). Already at LCA, no exiting required.
            
            // Step 2: Transition action: `trace("Transition action `` for T7__DEEP_HISTORY3__T7__state_2.<InitialState> to T7__DEEP_HISTORY3__T7__state_6.");`.
            ____GilData_EchoStringVoid("MainClass.Trace(\"Transition action `` for T7__DEEP_HISTORY3__T7__state_2.<InitialState> to T7__DEEP_HISTORY3__T7__state_6.\");");
            
            // Step 3: Enter/move towards transition target `T7__DEEP_HISTORY3__T7__state_6`.
            this.T7__DEEP_HISTORY3__T7__STATE_6_enter();
            
            // Step 4: complete transition. Ends event dispatch. No other behaviors are checked.
            return;
        } // end of behavior for T7__DEEP_HISTORY3__T7__state_2.<InitialState>
    }
    
    
    ////////////////////////////////////////////////////////////////////////////////
    // event handlers for state T7__DEEP_HISTORY3__T7__STATE_6
    ////////////////////////////////////////////////////////////////////////////////
    
    private void T7__DEEP_HISTORY3__T7__STATE_6_enter()
    {
        this.stateId = StateId.T7__DEEP_HISTORY3__T7__STATE_6;
        
        // T7__DEEP_HISTORY3__T7__state_6 behavior
        // uml: enter / { trace("Enter T7__DEEP_HISTORY3__T7__state_6."); }
        {
            // Step 1: execute action `trace("Enter T7__DEEP_HISTORY3__T7__state_6.");`
            ____GilData_EchoStringVoid("MainClass.Trace(\"Enter T7__DEEP_HISTORY3__T7__state_6.\");");
        } // end of behavior for T7__DEEP_HISTORY3__T7__state_6
    }
    
    private void T7__DEEP_HISTORY3__T7__STATE_6_exit()
    {
        // T7__DEEP_HISTORY3__T7__state_6 behavior
        // uml: exit / { trace("Exit T7__DEEP_HISTORY3__T7__state_6."); }
        {
            // Step 1: execute action `trace("Exit T7__DEEP_HISTORY3__T7__state_6.");`
            ____GilData_EchoStringVoid("MainClass.Trace(\"Exit T7__DEEP_HISTORY3__T7__state_6.\");");
        } // end of behavior for T7__DEEP_HISTORY3__T7__state_6
        
        this.stateId = StateId.T7__DEEP_HISTORY3__T7__STATE_2;
    }
    
    private void T7__DEEP_HISTORY3__T7__STATE_6_evstep()
    {
        // T7__DEEP_HISTORY3__T7__state_6 behavior
        // uml: evStep [trace_guard("State T7__DEEP_HISTORY3__T7__state_6: check behavior `evStep TransitionTo(T7__DEEP_HISTORY3__T7__state_9)`.", true)] / { trace("Transition action `` for T7__DEEP_HISTORY3__T7__state_6 to T7__DEEP_HISTORY3__T7__state_9."); } TransitionTo(T7__DEEP_HISTORY3__T7__state_9)
        if (____GilData_VarArgsToBool(____GilData_EchoStringBool("trace_guard(\"State T7__DEEP_HISTORY3__T7__state_6: check behavior `evStep TransitionTo(T7__DEEP_HISTORY3__T7__state_9)`.\", true)")))
        {
            // Step 1: Exit states until we reach `T7__DEEP_HISTORY3__T7__state_2` state (Least Common Ancestor for transition).
            this.T7__DEEP_HISTORY3__T7__STATE_6_exit();
            
            // Step 2: Transition action: `trace("Transition action `` for T7__DEEP_HISTORY3__T7__state_6 to T7__DEEP_HISTORY3__T7__state_9.");`.
            ____GilData_EchoStringVoid("MainClass.Trace(\"Transition action `` for T7__DEEP_HISTORY3__T7__state_6 to T7__DEEP_HISTORY3__T7__state_9.\");");
            
            // Step 3: Enter/move towards transition target `T7__DEEP_HISTORY3__T7__state_9`.
            this.T7__DEEP_HISTORY3__T7__STATE_9_enter();
            
            // Step 4: complete transition. Ends event dispatch. No other behaviors are checked.
            return;
        } // end of behavior for T7__DEEP_HISTORY3__T7__state_6
        
        // No ancestor handles this event.
    }
    
    
    ////////////////////////////////////////////////////////////////////////////////
    // event handlers for state T7__DEEP_HISTORY3__T7__STATE_9
    ////////////////////////////////////////////////////////////////////////////////
    
    private void T7__DEEP_HISTORY3__T7__STATE_9_enter()
    {
        this.stateId = StateId.T7__DEEP_HISTORY3__T7__STATE_9;
        
        // T7__DEEP_HISTORY3__T7__state_9 behavior
        // uml: enter / { trace("Enter T7__DEEP_HISTORY3__T7__state_9."); }
        {
            // Step 1: execute action `trace("Enter T7__DEEP_HISTORY3__T7__state_9.");`
            ____GilData_EchoStringVoid("MainClass.Trace(\"Enter T7__DEEP_HISTORY3__T7__state_9.\");");
        } // end of behavior for T7__DEEP_HISTORY3__T7__state_9
    }
    
    private void T7__DEEP_HISTORY3__T7__STATE_9_exit()
    {
        // T7__DEEP_HISTORY3__T7__state_9 behavior
        // uml: exit / { trace("Exit T7__DEEP_HISTORY3__T7__state_9."); }
        {
            // Step 1: execute action `trace("Exit T7__DEEP_HISTORY3__T7__state_9.");`
            ____GilData_EchoStringVoid("MainClass.Trace(\"Exit T7__DEEP_HISTORY3__T7__state_9.\");");
        } // end of behavior for T7__DEEP_HISTORY3__T7__state_9
        
        this.stateId = StateId.T7__DEEP_HISTORY3__T7__STATE_2;
    }
    
    
    ////////////////////////////////////////////////////////////////////////////////
    // event handlers for state T7__DEEP_HISTORY3__T7__STATE_3
    ////////////////////////////////////////////////////////////////////////////////
    
    private void T7__DEEP_HISTORY3__T7__STATE_3_enter()
    {
        this.stateId = StateId.T7__DEEP_HISTORY3__T7__STATE_3;
        
        // T7__DEEP_HISTORY3__T7__state_3 behavior
        // uml: enter / { trace("Enter T7__DEEP_HISTORY3__T7__state_3."); }
        {
            // Step 1: execute action `trace("Enter T7__DEEP_HISTORY3__T7__state_3.");`
            ____GilData_EchoStringVoid("MainClass.Trace(\"Enter T7__DEEP_HISTORY3__T7__state_3.\");");
        } // end of behavior for T7__DEEP_HISTORY3__T7__state_3
    }
    
    private void T7__DEEP_HISTORY3__T7__STATE_3_exit()
    {
        // T7__DEEP_HISTORY3__T7__state_3 behavior
        // uml: exit / { trace("Exit T7__DEEP_HISTORY3__T7__state_3."); }
        {
            // Step 1: execute action `trace("Exit T7__DEEP_HISTORY3__T7__state_3.");`
            ____GilData_EchoStringVoid("MainClass.Trace(\"Exit T7__DEEP_HISTORY3__T7__state_3.\");");
        } // end of behavior for T7__DEEP_HISTORY3__T7__state_3
        
        this.stateId = StateId.T7__DEEP_HISTORY3;
    }
    
    private void T7__DEEP_HISTORY3__T7__STATE_3_evclose()
    {
        // T7__DEEP_HISTORY3__T7__state_3 behavior
        // uml: evClose [trace_guard("State T7__DEEP_HISTORY3__T7__state_3: check behavior `evClose TransitionTo(T7__DEEP_HISTORY3__T7__state_0)`.", true)] / { trace("Transition action `` for T7__DEEP_HISTORY3__T7__state_3 to T7__DEEP_HISTORY3__T7__state_0."); } TransitionTo(T7__DEEP_HISTORY3__T7__state_0)
        if (____GilData_VarArgsToBool(____GilData_EchoStringBool("trace_guard(\"State T7__DEEP_HISTORY3__T7__state_3: check behavior `evClose TransitionTo(T7__DEEP_HISTORY3__T7__state_0)`.\", true)")))
        {
            // Step 1: Exit states until we reach `T7__DEEP_HISTORY3` state (Least Common Ancestor for transition).
            this.T7__DEEP_HISTORY3__T7__STATE_3_exit();
            
            // Step 2: Transition action: `trace("Transition action `` for T7__DEEP_HISTORY3__T7__state_3 to T7__DEEP_HISTORY3__T7__state_0.");`.
            ____GilData_EchoStringVoid("MainClass.Trace(\"Transition action `` for T7__DEEP_HISTORY3__T7__state_3 to T7__DEEP_HISTORY3__T7__state_0.\");");
            
            // Step 3: Enter/move towards transition target `T7__DEEP_HISTORY3__T7__state_0`.
            this.T7__DEEP_HISTORY3__T7__STATE_0_enter();
            
            // Finish transition by calling pseudo state transition function.
            this.T7__DEEP_HISTORY3__T7__state_0_InitialState_transition();
            return; // event processing immediately stops when a transition finishes. No other behaviors for this state are checked.
        } // end of behavior for T7__DEEP_HISTORY3__T7__state_3
        
        // No ancestor handles this event.
    }
    
    
    ////////////////////////////////////////////////////////////////////////////////
    // event handlers for state T7__HISTORY1
    ////////////////////////////////////////////////////////////////////////////////
    
    private void T7__HISTORY1_enter()
    {
        this.stateId = StateId.T7__HISTORY1;
        
        // T7__HISTORY1 behavior
        // uml: enter / { trace("Enter T7__HISTORY1."); }
        {
            // Step 1: execute action `trace("Enter T7__HISTORY1.");`
            ____GilData_EchoStringVoid("MainClass.Trace(\"Enter T7__HISTORY1.\");");
        } // end of behavior for T7__HISTORY1
    }
    
    private void T7__HISTORY1_exit()
    {
        // T7__HISTORY1 behavior
        // uml: exit / { trace("Exit T7__HISTORY1."); }
        {
            // Step 1: execute action `trace("Exit T7__HISTORY1.");`
            ____GilData_EchoStringVoid("MainClass.Trace(\"Exit T7__HISTORY1.\");");
        } // end of behavior for T7__HISTORY1
        
        this.stateId = StateId.TEST7;
    }
    
    
    ////////////////////////////////////////////////////////////////////////////////
    // event handlers for state T7__H1__OFF
    ////////////////////////////////////////////////////////////////////////////////
    
    private void T7__H1__OFF_enter()
    {
        this.stateId = StateId.T7__H1__OFF;
        
        // T7__H1__OFF behavior
        // uml: enter / { trace("Enter T7__H1__OFF."); }
        {
            // Step 1: execute action `trace("Enter T7__H1__OFF.");`
            ____GilData_EchoStringVoid("MainClass.Trace(\"Enter T7__H1__OFF.\");");
        } // end of behavior for T7__H1__OFF
    }
    
    private void T7__H1__OFF_exit()
    {
        // T7__H1__OFF behavior
        // uml: exit / { trace("Exit T7__H1__OFF."); }
        {
            // Step 1: execute action `trace("Exit T7__H1__OFF.");`
            ____GilData_EchoStringVoid("MainClass.Trace(\"Exit T7__H1__OFF.\");");
        } // end of behavior for T7__H1__OFF
        
        this.stateId = StateId.T7__HISTORY1;
    }
    
    private void T7__H1__OFF_ev3()
    {
        // T7__H1__OFF behavior
        // uml: EV3 [trace_guard("State T7__H1__OFF: check behavior `EV3 TransitionTo(T7__H1__OFF3)`.", true)] / { trace("Transition action `` for T7__H1__OFF to T7__H1__OFF3."); } TransitionTo(T7__H1__OFF3)
        if (____GilData_VarArgsToBool(____GilData_EchoStringBool("trace_guard(\"State T7__H1__OFF: check behavior `EV3 TransitionTo(T7__H1__OFF3)`.\", true)")))
        {
            // Step 1: Exit states until we reach `T7__H1__OFF` state (Least Common Ancestor for transition).
            this.ExitUpToStateHandler(StateId.T7__H1__OFF);
            
            // Step 2: Transition action: `trace("Transition action `` for T7__H1__OFF to T7__H1__OFF3.");`.
            ____GilData_EchoStringVoid("MainClass.Trace(\"Transition action `` for T7__H1__OFF to T7__H1__OFF3.\");");
            
            // Step 3: Enter/move towards transition target `T7__H1__OFF3`.
            this.T7__H1__OFF3_enter();
            
            // Step 4: complete transition. Ends event dispatch. No other behaviors are checked.
            return;
        } // end of behavior for T7__H1__OFF
        
        // No ancestor handles this event.
    }
    
    private void T7__H1__OFF_ev4()
    {
        // T7__H1__OFF behavior
        // uml: EV4 [trace_guard("State T7__H1__OFF: check behavior `EV4 TransitionTo(T7__H1__OFF)`.", true)] / { trace("Transition action `` for T7__H1__OFF to T7__H1__OFF."); } TransitionTo(T7__H1__OFF)
        if (____GilData_VarArgsToBool(____GilData_EchoStringBool("trace_guard(\"State T7__H1__OFF: check behavior `EV4 TransitionTo(T7__H1__OFF)`.\", true)")))
        {
            // Step 1: Exit states until we reach `T7__HISTORY1` state (Least Common Ancestor for transition).
            this.ExitUpToStateHandler(StateId.T7__HISTORY1);
            
            // Step 2: Transition action: `trace("Transition action `` for T7__H1__OFF to T7__H1__OFF.");`.
            ____GilData_EchoStringVoid("MainClass.Trace(\"Transition action `` for T7__H1__OFF to T7__H1__OFF.\");");
            
            // Step 3: Enter/move towards transition target `T7__H1__OFF`.
            this.T7__H1__OFF_enter();
            
            // Finish transition by calling pseudo state transition function.
            this.T7__H1__OFF_InitialState_transition();
            return; // event processing immediately stops when a transition finishes. No other behaviors for this state are checked.
        } // end of behavior for T7__H1__OFF
        
        // No ancestor handles this event.
    }
    
    private void T7__H1__OFF_ev7()
    {
        // T7__H1__OFF behavior
        // uml: EV7 [trace_guard("State T7__H1__OFF: check behavior `EV7 TransitionTo(T7__H1__ON)`.", true)] / { trace("Transition action `` for T7__H1__OFF to T7__H1__ON."); } TransitionTo(T7__H1__ON)
        if (____GilData_VarArgsToBool(____GilData_EchoStringBool("trace_guard(\"State T7__H1__OFF: check behavior `EV7 TransitionTo(T7__H1__ON)`.\", true)")))
        {
            // Step 1: Exit states until we reach `T7__HISTORY1` state (Least Common Ancestor for transition).
            this.ExitUpToStateHandler(StateId.T7__HISTORY1);
            
            // Step 2: Transition action: `trace("Transition action `` for T7__H1__OFF to T7__H1__ON.");`.
            ____GilData_EchoStringVoid("MainClass.Trace(\"Transition action `` for T7__H1__OFF to T7__H1__ON.\");");
            
            // Step 3: Enter/move towards transition target `T7__H1__ON`.
            this.T7__H1__ON_enter();
            
            // Finish transition by calling pseudo state transition function.
            this.T7__H1__ON_InitialState_transition();
            return; // event processing immediately stops when a transition finishes. No other behaviors for this state are checked.
        } // end of behavior for T7__H1__OFF
        
        // No ancestor handles this event.
    }
    
    private void T7__H1__OFF_InitialState_transition()
    {
        // T7__H1__OFF.<InitialState> behavior
        // uml: / { trace("Transition action `` for T7__H1__OFF.<InitialState> to T7__H1__OFF.<History>."); } TransitionTo(T7__H1__OFF.<History>)
        {
            // Step 1: Exit states until we reach `T7__H1__OFF` state (Least Common Ancestor for transition). Already at LCA, no exiting required.
            
            // Step 2: Transition action: `trace("Transition action `` for T7__H1__OFF.<InitialState> to T7__H1__OFF.<History>.");`.
            ____GilData_EchoStringVoid("MainClass.Trace(\"Transition action `` for T7__H1__OFF.<InitialState> to T7__H1__OFF.<History>.\");");
            
            // Step 3: Enter/move towards transition target `T7__H1__OFF.<History>`.
            // T7__H1__OFF.<History> is a pseudo state and cannot have an `enter` trigger.
            
            // T7__H1__OFF.<History> behavior
            // uml: [$gil(this.vars.T7__H1__OFF_history == T7__H1__OFF_HistoryId.T7__H1__OFF2)] / { trace("Transition action `` for T7__H1__OFF.<History> to T7__H1__OFF2."); } TransitionTo(T7__H1__OFF2)
            if (____GilData_VarArgsToBool(this.vars.T7__H1__OFF_history == T7__H1__OFF_HistoryId.T7__H1__OFF2))
            {
                // Step 1: Exit states until we reach `T7__H1__OFF` state (Least Common Ancestor for transition). Already at LCA, no exiting required.
                
                // Step 2: Transition action: `trace("Transition action `` for T7__H1__OFF.<History> to T7__H1__OFF2.");`.
                ____GilData_EchoStringVoid("MainClass.Trace(\"Transition action `` for T7__H1__OFF.<History> to T7__H1__OFF2.\");");
                
                // Step 3: Enter/move towards transition target `T7__H1__OFF2`.
                this.T7__H1__OFF2_enter();
                
                // Step 4: complete transition. Ends event dispatch. No other behaviors are checked.
                return;
            } // end of behavior for T7__H1__OFF.<History>
            
            // T7__H1__OFF.<History> behavior
            // uml: [$gil(this.vars.T7__H1__OFF_history == T7__H1__OFF_HistoryId.T7__H1__OFF3)] / { trace("Transition action `` for T7__H1__OFF.<History> to T7__H1__OFF3."); } TransitionTo(T7__H1__OFF3)
            if (____GilData_VarArgsToBool(this.vars.T7__H1__OFF_history == T7__H1__OFF_HistoryId.T7__H1__OFF3))
            {
                // Step 1: Exit states until we reach `T7__H1__OFF` state (Least Common Ancestor for transition). Already at LCA, no exiting required.
                
                // Step 2: Transition action: `trace("Transition action `` for T7__H1__OFF.<History> to T7__H1__OFF3.");`.
                ____GilData_EchoStringVoid("MainClass.Trace(\"Transition action `` for T7__H1__OFF.<History> to T7__H1__OFF3.\");");
                
                // Step 3: Enter/move towards transition target `T7__H1__OFF3`.
                this.T7__H1__OFF3_enter();
                
                // Step 4: complete transition. Ends event dispatch. No other behaviors are checked.
                return;
            } // end of behavior for T7__H1__OFF.<History>
            
            // T7__H1__OFF.<History> behavior
            // uml: else / { trace("Transition action `` for T7__H1__OFF.<History> to T7__H1__OFF1."); } TransitionTo(T7__H1__OFF1)
            {
                // Step 1: Exit states until we reach `T7__H1__OFF` state (Least Common Ancestor for transition). Already at LCA, no exiting required.
                
                // Step 2: Transition action: `trace("Transition action `` for T7__H1__OFF.<History> to T7__H1__OFF1.");`.
                ____GilData_EchoStringVoid("MainClass.Trace(\"Transition action `` for T7__H1__OFF.<History> to T7__H1__OFF1.\");");
                
                // Step 3: Enter/move towards transition target `T7__H1__OFF1`.
                this.T7__H1__OFF1_enter();
                
                // Step 4: complete transition. Ends event dispatch. No other behaviors are checked.
                return;
            } // end of behavior for T7__H1__OFF.<History>
        } // end of behavior for T7__H1__OFF.<InitialState>
    }
    
    
    ////////////////////////////////////////////////////////////////////////////////
    // event handlers for state T7__H1__OFF1
    ////////////////////////////////////////////////////////////////////////////////
    
    private void T7__H1__OFF1_enter()
    {
        this.stateId = StateId.T7__H1__OFF1;
        
        // T7__H1__OFF1 behavior
        // uml: enter / { trace("Enter T7__H1__OFF1."); }
        {
            // Step 1: execute action `trace("Enter T7__H1__OFF1.");`
            ____GilData_EchoStringVoid("MainClass.Trace(\"Enter T7__H1__OFF1.\");");
        } // end of behavior for T7__H1__OFF1
        
        // T7__H1__OFF1 behavior
        // uml: enter [trace_guard("State T7__H1__OFF1: check behavior `enter / { $gil(this.vars.T7__H1__OFF_history = T7__H1__OFF_HistoryId.T7__H1__OFF1;) }`.", true)] / { $gil(this.vars.T7__H1__OFF_history = T7__H1__OFF_HistoryId.T7__H1__OFF1;) }
        if (____GilData_VarArgsToBool(____GilData_EchoStringBool("trace_guard(\"State T7__H1__OFF1: check behavior `enter / { $gil(this.vars.T7__H1__OFF_history = T7__H1__OFF_HistoryId.T7__H1__OFF1;) }`.\", true)")))
        {
            // Step 1: execute action `$gil(this.vars.T7__H1__OFF_history = T7__H1__OFF_HistoryId.T7__H1__OFF1;)`
            this.vars.T7__H1__OFF_history = T7__H1__OFF_HistoryId.T7__H1__OFF1;
        } // end of behavior for T7__H1__OFF1
    }
    
    private void T7__H1__OFF1_exit()
    {
        // T7__H1__OFF1 behavior
        // uml: exit / { trace("Exit T7__H1__OFF1."); }
        {
            // Step 1: execute action `trace("Exit T7__H1__OFF1.");`
            ____GilData_EchoStringVoid("MainClass.Trace(\"Exit T7__H1__OFF1.\");");
        } // end of behavior for T7__H1__OFF1
        
        this.stateId = StateId.T7__H1__OFF;
    }
    
    private void T7__H1__OFF1_ev1()
    {
        // T7__H1__OFF1 behavior
        // uml: EV1 [trace_guard("State T7__H1__OFF1: check behavior `EV1 TransitionTo(T7__H1__OFF2)`.", true)] / { trace("Transition action `` for T7__H1__OFF1 to T7__H1__OFF2."); } TransitionTo(T7__H1__OFF2)
        if (____GilData_VarArgsToBool(____GilData_EchoStringBool("trace_guard(\"State T7__H1__OFF1: check behavior `EV1 TransitionTo(T7__H1__OFF2)`.\", true)")))
        {
            // Step 1: Exit states until we reach `T7__H1__OFF` state (Least Common Ancestor for transition).
            this.T7__H1__OFF1_exit();
            
            // Step 2: Transition action: `trace("Transition action `` for T7__H1__OFF1 to T7__H1__OFF2.");`.
            ____GilData_EchoStringVoid("MainClass.Trace(\"Transition action `` for T7__H1__OFF1 to T7__H1__OFF2.\");");
            
            // Step 3: Enter/move towards transition target `T7__H1__OFF2`.
            this.T7__H1__OFF2_enter();
            
            // Step 4: complete transition. Ends event dispatch. No other behaviors are checked.
            return;
        } // end of behavior for T7__H1__OFF1
        
        // No ancestor handles this event.
    }
    
    
    ////////////////////////////////////////////////////////////////////////////////
    // event handlers for state T7__H1__OFF2
    ////////////////////////////////////////////////////////////////////////////////
    
    private void T7__H1__OFF2_enter()
    {
        this.stateId = StateId.T7__H1__OFF2;
        
        // T7__H1__OFF2 behavior
        // uml: enter / { trace("Enter T7__H1__OFF2."); }
        {
            // Step 1: execute action `trace("Enter T7__H1__OFF2.");`
            ____GilData_EchoStringVoid("MainClass.Trace(\"Enter T7__H1__OFF2.\");");
        } // end of behavior for T7__H1__OFF2
        
        // T7__H1__OFF2 behavior
        // uml: enter [trace_guard("State T7__H1__OFF2: check behavior `enter / { $gil(this.vars.T7__H1__OFF_history = T7__H1__OFF_HistoryId.T7__H1__OFF2;) }`.", true)] / { $gil(this.vars.T7__H1__OFF_history = T7__H1__OFF_HistoryId.T7__H1__OFF2;) }
        if (____GilData_VarArgsToBool(____GilData_EchoStringBool("trace_guard(\"State T7__H1__OFF2: check behavior `enter / { $gil(this.vars.T7__H1__OFF_history = T7__H1__OFF_HistoryId.T7__H1__OFF2;) }`.\", true)")))
        {
            // Step 1: execute action `$gil(this.vars.T7__H1__OFF_history = T7__H1__OFF_HistoryId.T7__H1__OFF2;)`
            this.vars.T7__H1__OFF_history = T7__H1__OFF_HistoryId.T7__H1__OFF2;
        } // end of behavior for T7__H1__OFF2
    }
    
    private void T7__H1__OFF2_exit()
    {
        // T7__H1__OFF2 behavior
        // uml: exit / { trace("Exit T7__H1__OFF2."); }
        {
            // Step 1: execute action `trace("Exit T7__H1__OFF2.");`
            ____GilData_EchoStringVoid("MainClass.Trace(\"Exit T7__H1__OFF2.\");");
        } // end of behavior for T7__H1__OFF2
        
        this.stateId = StateId.T7__H1__OFF;
    }
    
    private void T7__H1__OFF2_ev1()
    {
        // T7__H1__OFF2 behavior
        // uml: EV1 [trace_guard("State T7__H1__OFF2: check behavior `EV1 TransitionTo(T7__H1__OFF3)`.", true)] / { trace("Transition action `` for T7__H1__OFF2 to T7__H1__OFF3."); } TransitionTo(T7__H1__OFF3)
        if (____GilData_VarArgsToBool(____GilData_EchoStringBool("trace_guard(\"State T7__H1__OFF2: check behavior `EV1 TransitionTo(T7__H1__OFF3)`.\", true)")))
        {
            // Step 1: Exit states until we reach `T7__H1__OFF` state (Least Common Ancestor for transition).
            this.T7__H1__OFF2_exit();
            
            // Step 2: Transition action: `trace("Transition action `` for T7__H1__OFF2 to T7__H1__OFF3.");`.
            ____GilData_EchoStringVoid("MainClass.Trace(\"Transition action `` for T7__H1__OFF2 to T7__H1__OFF3.\");");
            
            // Step 3: Enter/move towards transition target `T7__H1__OFF3`.
            this.T7__H1__OFF3_enter();
            
            // Step 4: complete transition. Ends event dispatch. No other behaviors are checked.
            return;
        } // end of behavior for T7__H1__OFF2
        
        // No ancestor handles this event.
    }
    
    
    ////////////////////////////////////////////////////////////////////////////////
    // event handlers for state T7__H1__OFF3
    ////////////////////////////////////////////////////////////////////////////////
    
    private void T7__H1__OFF3_enter()
    {
        this.stateId = StateId.T7__H1__OFF3;
        
        // T7__H1__OFF3 behavior
        // uml: enter / { trace("Enter T7__H1__OFF3."); }
        {
            // Step 1: execute action `trace("Enter T7__H1__OFF3.");`
            ____GilData_EchoStringVoid("MainClass.Trace(\"Enter T7__H1__OFF3.\");");
        } // end of behavior for T7__H1__OFF3
        
        // T7__H1__OFF3 behavior
        // uml: enter [trace_guard("State T7__H1__OFF3: check behavior `enter / { $gil(this.vars.T7__H1__OFF_history = T7__H1__OFF_HistoryId.T7__H1__OFF3;) }`.", true)] / { $gil(this.vars.T7__H1__OFF_history = T7__H1__OFF_HistoryId.T7__H1__OFF3;) }
        if (____GilData_VarArgsToBool(____GilData_EchoStringBool("trace_guard(\"State T7__H1__OFF3: check behavior `enter / { $gil(this.vars.T7__H1__OFF_history = T7__H1__OFF_HistoryId.T7__H1__OFF3;) }`.\", true)")))
        {
            // Step 1: execute action `$gil(this.vars.T7__H1__OFF_history = T7__H1__OFF_HistoryId.T7__H1__OFF3;)`
            this.vars.T7__H1__OFF_history = T7__H1__OFF_HistoryId.T7__H1__OFF3;
        } // end of behavior for T7__H1__OFF3
    }
    
    private void T7__H1__OFF3_exit()
    {
        // T7__H1__OFF3 behavior
        // uml: exit / { trace("Exit T7__H1__OFF3."); }
        {
            // Step 1: execute action `trace("Exit T7__H1__OFF3.");`
            ____GilData_EchoStringVoid("MainClass.Trace(\"Exit T7__H1__OFF3.\");");
        } // end of behavior for T7__H1__OFF3
        
        this.stateId = StateId.T7__H1__OFF;
    }
    
    
    ////////////////////////////////////////////////////////////////////////////////
    // event handlers for state T7__H1__ON
    ////////////////////////////////////////////////////////////////////////////////
    
    private void T7__H1__ON_enter()
    {
        this.stateId = StateId.T7__H1__ON;
        
        // T7__H1__ON behavior
        // uml: enter / { trace("Enter T7__H1__ON."); }
        {
            // Step 1: execute action `trace("Enter T7__H1__ON.");`
            ____GilData_EchoStringVoid("MainClass.Trace(\"Enter T7__H1__ON.\");");
        } // end of behavior for T7__H1__ON
    }
    
    private void T7__H1__ON_exit()
    {
        // T7__H1__ON behavior
        // uml: exit / { trace("Exit T7__H1__ON."); }
        {
            // Step 1: execute action `trace("Exit T7__H1__ON.");`
            ____GilData_EchoStringVoid("MainClass.Trace(\"Exit T7__H1__ON.\");");
        } // end of behavior for T7__H1__ON
        
        this.stateId = StateId.T7__HISTORY1;
    }
    
    private void T7__H1__ON_ev6()
    {
        // T7__H1__ON behavior
        // uml: EV6 [trace_guard("State T7__H1__ON: check behavior `EV6 TransitionTo(T7__H1__OFF)`.", true)] / { trace("Transition action `` for T7__H1__ON to T7__H1__OFF."); } TransitionTo(T7__H1__OFF)
        if (____GilData_VarArgsToBool(____GilData_EchoStringBool("trace_guard(\"State T7__H1__ON: check behavior `EV6 TransitionTo(T7__H1__OFF)`.\", true)")))
        {
            // Step 1: Exit states until we reach `T7__HISTORY1` state (Least Common Ancestor for transition).
            this.ExitUpToStateHandler(StateId.T7__HISTORY1);
            
            // Step 2: Transition action: `trace("Transition action `` for T7__H1__ON to T7__H1__OFF.");`.
            ____GilData_EchoStringVoid("MainClass.Trace(\"Transition action `` for T7__H1__ON to T7__H1__OFF.\");");
            
            // Step 3: Enter/move towards transition target `T7__H1__OFF`.
            this.T7__H1__OFF_enter();
            
            // Finish transition by calling pseudo state transition function.
            this.T7__H1__OFF_InitialState_transition();
            return; // event processing immediately stops when a transition finishes. No other behaviors for this state are checked.
        } // end of behavior for T7__H1__ON
        
        // No ancestor handles this event.
    }
    
    private void T7__H1__ON_InitialState_transition()
    {
        // T7__H1__ON.<InitialState> behavior
        // uml: / { trace("Transition action `` for T7__H1__ON.<InitialState> to T7__H1__ON.<History>."); } TransitionTo(T7__H1__ON.<History>)
        {
            // Step 1: Exit states until we reach `T7__H1__ON` state (Least Common Ancestor for transition). Already at LCA, no exiting required.
            
            // Step 2: Transition action: `trace("Transition action `` for T7__H1__ON.<InitialState> to T7__H1__ON.<History>.");`.
            ____GilData_EchoStringVoid("MainClass.Trace(\"Transition action `` for T7__H1__ON.<InitialState> to T7__H1__ON.<History>.\");");
            
            // Step 3: Enter/move towards transition target `T7__H1__ON.<History>`.
            // T7__H1__ON.<History> is a pseudo state and cannot have an `enter` trigger.
            
            // T7__H1__ON.<History> behavior
            // uml: [$gil(this.vars.T7__H1__ON_history == T7__H1__ON_HistoryId.T7__H1__ON2)] / { trace("Transition action `` for T7__H1__ON.<History> to T7__H1__ON2."); } TransitionTo(T7__H1__ON2)
            if (____GilData_VarArgsToBool(this.vars.T7__H1__ON_history == T7__H1__ON_HistoryId.T7__H1__ON2))
            {
                // Step 1: Exit states until we reach `T7__H1__ON` state (Least Common Ancestor for transition). Already at LCA, no exiting required.
                
                // Step 2: Transition action: `trace("Transition action `` for T7__H1__ON.<History> to T7__H1__ON2.");`.
                ____GilData_EchoStringVoid("MainClass.Trace(\"Transition action `` for T7__H1__ON.<History> to T7__H1__ON2.\");");
                
                // Step 3: Enter/move towards transition target `T7__H1__ON2`.
                this.T7__H1__ON2_enter();
                
                // Step 4: complete transition. Ends event dispatch. No other behaviors are checked.
                return;
            } // end of behavior for T7__H1__ON.<History>
            
            // T7__H1__ON.<History> behavior
            // uml: [$gil(this.vars.T7__H1__ON_history == T7__H1__ON_HistoryId.T7__H1__ON3)] / { trace("Transition action `` for T7__H1__ON.<History> to T7__H1__ON3."); } TransitionTo(T7__H1__ON3)
            if (____GilData_VarArgsToBool(this.vars.T7__H1__ON_history == T7__H1__ON_HistoryId.T7__H1__ON3))
            {
                // Step 1: Exit states until we reach `T7__H1__ON` state (Least Common Ancestor for transition). Already at LCA, no exiting required.
                
                // Step 2: Transition action: `trace("Transition action `` for T7__H1__ON.<History> to T7__H1__ON3.");`.
                ____GilData_EchoStringVoid("MainClass.Trace(\"Transition action `` for T7__H1__ON.<History> to T7__H1__ON3.\");");
                
                // Step 3: Enter/move towards transition target `T7__H1__ON3`.
                this.T7__H1__ON3_enter();
                
                // Step 4: complete transition. Ends event dispatch. No other behaviors are checked.
                return;
            } // end of behavior for T7__H1__ON.<History>
            
            // T7__H1__ON.<History> behavior
            // uml: else / { trace("Transition action `` for T7__H1__ON.<History> to T7__H1__ON1."); } TransitionTo(T7__H1__ON1)
            {
                // Step 1: Exit states until we reach `T7__H1__ON` state (Least Common Ancestor for transition). Already at LCA, no exiting required.
                
                // Step 2: Transition action: `trace("Transition action `` for T7__H1__ON.<History> to T7__H1__ON1.");`.
                ____GilData_EchoStringVoid("MainClass.Trace(\"Transition action `` for T7__H1__ON.<History> to T7__H1__ON1.\");");
                
                // Step 3: Enter/move towards transition target `T7__H1__ON1`.
                this.T7__H1__ON1_enter();
                
                // Step 4: complete transition. Ends event dispatch. No other behaviors are checked.
                return;
            } // end of behavior for T7__H1__ON.<History>
        } // end of behavior for T7__H1__ON.<InitialState>
    }
    
    
    ////////////////////////////////////////////////////////////////////////////////
    // event handlers for state T7__H1__ON1
    ////////////////////////////////////////////////////////////////////////////////
    
    private void T7__H1__ON1_enter()
    {
        this.stateId = StateId.T7__H1__ON1;
        
        // T7__H1__ON1 behavior
        // uml: enter / { trace("Enter T7__H1__ON1."); }
        {
            // Step 1: execute action `trace("Enter T7__H1__ON1.");`
            ____GilData_EchoStringVoid("MainClass.Trace(\"Enter T7__H1__ON1.\");");
        } // end of behavior for T7__H1__ON1
        
        // T7__H1__ON1 behavior
        // uml: enter [trace_guard("State T7__H1__ON1: check behavior `enter / { $gil(this.vars.T7__H1__ON_history = T7__H1__ON_HistoryId.T7__H1__ON1;) }`.", true)] / { $gil(this.vars.T7__H1__ON_history = T7__H1__ON_HistoryId.T7__H1__ON1;) }
        if (____GilData_VarArgsToBool(____GilData_EchoStringBool("trace_guard(\"State T7__H1__ON1: check behavior `enter / { $gil(this.vars.T7__H1__ON_history = T7__H1__ON_HistoryId.T7__H1__ON1;) }`.\", true)")))
        {
            // Step 1: execute action `$gil(this.vars.T7__H1__ON_history = T7__H1__ON_HistoryId.T7__H1__ON1;)`
            this.vars.T7__H1__ON_history = T7__H1__ON_HistoryId.T7__H1__ON1;
        } // end of behavior for T7__H1__ON1
    }
    
    private void T7__H1__ON1_exit()
    {
        // T7__H1__ON1 behavior
        // uml: exit / { trace("Exit T7__H1__ON1."); }
        {
            // Step 1: execute action `trace("Exit T7__H1__ON1.");`
            ____GilData_EchoStringVoid("MainClass.Trace(\"Exit T7__H1__ON1.\");");
        } // end of behavior for T7__H1__ON1
        
        this.stateId = StateId.T7__H1__ON;
    }
    
    private void T7__H1__ON1_ev1()
    {
        // T7__H1__ON1 behavior
        // uml: EV1 [trace_guard("State T7__H1__ON1: check behavior `EV1 TransitionTo(T7__H1__ON2)`.", true)] / { trace("Transition action `` for T7__H1__ON1 to T7__H1__ON2."); } TransitionTo(T7__H1__ON2)
        if (____GilData_VarArgsToBool(____GilData_EchoStringBool("trace_guard(\"State T7__H1__ON1: check behavior `EV1 TransitionTo(T7__H1__ON2)`.\", true)")))
        {
            // Step 1: Exit states until we reach `T7__H1__ON` state (Least Common Ancestor for transition).
            this.T7__H1__ON1_exit();
            
            // Step 2: Transition action: `trace("Transition action `` for T7__H1__ON1 to T7__H1__ON2.");`.
            ____GilData_EchoStringVoid("MainClass.Trace(\"Transition action `` for T7__H1__ON1 to T7__H1__ON2.\");");
            
            // Step 3: Enter/move towards transition target `T7__H1__ON2`.
            this.T7__H1__ON2_enter();
            
            // Step 4: complete transition. Ends event dispatch. No other behaviors are checked.
            return;
        } // end of behavior for T7__H1__ON1
        
        // No ancestor handles this event.
    }
    
    
    ////////////////////////////////////////////////////////////////////////////////
    // event handlers for state T7__H1__ON2
    ////////////////////////////////////////////////////////////////////////////////
    
    private void T7__H1__ON2_enter()
    {
        this.stateId = StateId.T7__H1__ON2;
        
        // T7__H1__ON2 behavior
        // uml: enter / { trace("Enter T7__H1__ON2."); }
        {
            // Step 1: execute action `trace("Enter T7__H1__ON2.");`
            ____GilData_EchoStringVoid("MainClass.Trace(\"Enter T7__H1__ON2.\");");
        } // end of behavior for T7__H1__ON2
        
        // T7__H1__ON2 behavior
        // uml: enter [trace_guard("State T7__H1__ON2: check behavior `enter / { $gil(this.vars.T7__H1__ON_history = T7__H1__ON_HistoryId.T7__H1__ON2;) }`.", true)] / { $gil(this.vars.T7__H1__ON_history = T7__H1__ON_HistoryId.T7__H1__ON2;) }
        if (____GilData_VarArgsToBool(____GilData_EchoStringBool("trace_guard(\"State T7__H1__ON2: check behavior `enter / { $gil(this.vars.T7__H1__ON_history = T7__H1__ON_HistoryId.T7__H1__ON2;) }`.\", true)")))
        {
            // Step 1: execute action `$gil(this.vars.T7__H1__ON_history = T7__H1__ON_HistoryId.T7__H1__ON2;)`
            this.vars.T7__H1__ON_history = T7__H1__ON_HistoryId.T7__H1__ON2;
        } // end of behavior for T7__H1__ON2
    }
    
    private void T7__H1__ON2_exit()
    {
        // T7__H1__ON2 behavior
        // uml: exit / { trace("Exit T7__H1__ON2."); }
        {
            // Step 1: execute action `trace("Exit T7__H1__ON2.");`
            ____GilData_EchoStringVoid("MainClass.Trace(\"Exit T7__H1__ON2.\");");
        } // end of behavior for T7__H1__ON2
        
        this.stateId = StateId.T7__H1__ON;
    }
    
    private void T7__H1__ON2_ev1()
    {
        // T7__H1__ON2 behavior
        // uml: EV1 [trace_guard("State T7__H1__ON2: check behavior `EV1 TransitionTo(T7__H1__ON3)`.", true)] / { trace("Transition action `` for T7__H1__ON2 to T7__H1__ON3."); } TransitionTo(T7__H1__ON3)
        if (____GilData_VarArgsToBool(____GilData_EchoStringBool("trace_guard(\"State T7__H1__ON2: check behavior `EV1 TransitionTo(T7__H1__ON3)`.\", true)")))
        {
            // Step 1: Exit states until we reach `T7__H1__ON` state (Least Common Ancestor for transition).
            this.T7__H1__ON2_exit();
            
            // Step 2: Transition action: `trace("Transition action `` for T7__H1__ON2 to T7__H1__ON3.");`.
            ____GilData_EchoStringVoid("MainClass.Trace(\"Transition action `` for T7__H1__ON2 to T7__H1__ON3.\");");
            
            // Step 3: Enter/move towards transition target `T7__H1__ON3`.
            this.T7__H1__ON3_enter();
            
            // Step 4: complete transition. Ends event dispatch. No other behaviors are checked.
            return;
        } // end of behavior for T7__H1__ON2
        
        // No ancestor handles this event.
    }
    
    
    ////////////////////////////////////////////////////////////////////////////////
    // event handlers for state T7__H1__ON3
    ////////////////////////////////////////////////////////////////////////////////
    
    private void T7__H1__ON3_enter()
    {
        this.stateId = StateId.T7__H1__ON3;
        
        // T7__H1__ON3 behavior
        // uml: enter / { trace("Enter T7__H1__ON3."); }
        {
            // Step 1: execute action `trace("Enter T7__H1__ON3.");`
            ____GilData_EchoStringVoid("MainClass.Trace(\"Enter T7__H1__ON3.\");");
        } // end of behavior for T7__H1__ON3
        
        // T7__H1__ON3 behavior
        // uml: enter [trace_guard("State T7__H1__ON3: check behavior `enter / { $gil(this.vars.T7__H1__ON_history = T7__H1__ON_HistoryId.T7__H1__ON3;) }`.", true)] / { $gil(this.vars.T7__H1__ON_history = T7__H1__ON_HistoryId.T7__H1__ON3;) }
        if (____GilData_VarArgsToBool(____GilData_EchoStringBool("trace_guard(\"State T7__H1__ON3: check behavior `enter / { $gil(this.vars.T7__H1__ON_history = T7__H1__ON_HistoryId.T7__H1__ON3;) }`.\", true)")))
        {
            // Step 1: execute action `$gil(this.vars.T7__H1__ON_history = T7__H1__ON_HistoryId.T7__H1__ON3;)`
            this.vars.T7__H1__ON_history = T7__H1__ON_HistoryId.T7__H1__ON3;
        } // end of behavior for T7__H1__ON3
    }
    
    private void T7__H1__ON3_exit()
    {
        // T7__H1__ON3 behavior
        // uml: exit / { trace("Exit T7__H1__ON3."); }
        {
            // Step 1: execute action `trace("Exit T7__H1__ON3.");`
            ____GilData_EchoStringVoid("MainClass.Trace(\"Exit T7__H1__ON3.\");");
        } // end of behavior for T7__H1__ON3
        
        this.stateId = StateId.T7__H1__ON;
    }
    
    private void T7__H1__ON3_ev1()
    {
        // T7__H1__ON3 behavior
        // uml: EV1 [trace_guard("State T7__H1__ON3: check behavior `EV1 TransitionTo(T7__H1__ON1)`.", true)] / { trace("Transition action `` for T7__H1__ON3 to T7__H1__ON1."); } TransitionTo(T7__H1__ON1)
        if (____GilData_VarArgsToBool(____GilData_EchoStringBool("trace_guard(\"State T7__H1__ON3: check behavior `EV1 TransitionTo(T7__H1__ON1)`.\", true)")))
        {
            // Step 1: Exit states until we reach `T7__H1__ON` state (Least Common Ancestor for transition).
            this.T7__H1__ON3_exit();
            
            // Step 2: Transition action: `trace("Transition action `` for T7__H1__ON3 to T7__H1__ON1.");`.
            ____GilData_EchoStringVoid("MainClass.Trace(\"Transition action `` for T7__H1__ON3 to T7__H1__ON1.\");");
            
            // Step 3: Enter/move towards transition target `T7__H1__ON1`.
            this.T7__H1__ON1_enter();
            
            // Step 4: complete transition. Ends event dispatch. No other behaviors are checked.
            return;
        } // end of behavior for T7__H1__ON3
        
        // No ancestor handles this event.
    }
    
    
    ////////////////////////////////////////////////////////////////////////////////
    // event handlers for state T7__INITIAL1
    ////////////////////////////////////////////////////////////////////////////////
    
    private void T7__INITIAL1_enter()
    {
        this.stateId = StateId.T7__INITIAL1;
        
        // T7__INITIAL1 behavior
        // uml: enter / { trace("Enter T7__INITIAL1."); }
        {
            // Step 1: execute action `trace("Enter T7__INITIAL1.");`
            ____GilData_EchoStringVoid("MainClass.Trace(\"Enter T7__INITIAL1.\");");
        } // end of behavior for T7__INITIAL1
    }
    
    private void T7__INITIAL1_exit()
    {
        // T7__INITIAL1 behavior
        // uml: exit / { trace("Exit T7__INITIAL1."); }
        {
            // Step 1: execute action `trace("Exit T7__INITIAL1.");`
            ____GilData_EchoStringVoid("MainClass.Trace(\"Exit T7__INITIAL1.\");");
        } // end of behavior for T7__INITIAL1
        
        this.stateId = StateId.TEST7;
    }
    
    
    ////////////////////////////////////////////////////////////////////////////////
    // event handlers for state T7__INITIAL1__PARENT
    ////////////////////////////////////////////////////////////////////////////////
    
    private void T7__INITIAL1__PARENT_enter()
    {
        this.stateId = StateId.T7__INITIAL1__PARENT;
        
        // T7__INITIAL1__PARENT behavior
        // uml: enter / { trace("Enter T7__INITIAL1__PARENT."); }
        {
            // Step 1: execute action `trace("Enter T7__INITIAL1__PARENT.");`
            ____GilData_EchoStringVoid("MainClass.Trace(\"Enter T7__INITIAL1__PARENT.\");");
        } // end of behavior for T7__INITIAL1__PARENT
    }
    
    private void T7__INITIAL1__PARENT_exit()
    {
        // T7__INITIAL1__PARENT behavior
        // uml: exit / { trace("Exit T7__INITIAL1__PARENT."); }
        {
            // Step 1: execute action `trace("Exit T7__INITIAL1__PARENT.");`
            ____GilData_EchoStringVoid("MainClass.Trace(\"Exit T7__INITIAL1__PARENT.\");");
        } // end of behavior for T7__INITIAL1__PARENT
        
        this.stateId = StateId.T7__INITIAL1;
    }
    
    private void T7__INITIAL1__PARENT_ev5()
    {
        // T7__INITIAL1__PARENT behavior
        // uml: EV5 [trace_guard("State T7__INITIAL1__PARENT: check behavior `EV5 / { count++; }`.", true)] / { count++; }
        if (____GilData_VarArgsToBool(____GilData_EchoStringBool("trace_guard(\"State T7__INITIAL1__PARENT: check behavior `EV5 / { count++; }`.\", true)")))
        {
            // Step 1: execute action `count++;`
            ____GilData_EchoStringVoid("this.vars.count++;");
        } // end of behavior for T7__INITIAL1__PARENT
        
        // No ancestor handles this event.
    }
    
    private void T7__INITIAL1__PARENT_InitialState_transition()
    {
        // T7__INITIAL1__PARENT.<InitialState> behavior
        // uml: / { trace("Transition action `` for T7__INITIAL1__PARENT.<InitialState> to T7__INITIAL1__S1."); } TransitionTo(T7__INITIAL1__S1)
        {
            // Step 1: Exit states until we reach `T7__INITIAL1__PARENT` state (Least Common Ancestor for transition). Already at LCA, no exiting required.
            
            // Step 2: Transition action: `trace("Transition action `` for T7__INITIAL1__PARENT.<InitialState> to T7__INITIAL1__S1.");`.
            ____GilData_EchoStringVoid("MainClass.Trace(\"Transition action `` for T7__INITIAL1__PARENT.<InitialState> to T7__INITIAL1__S1.\");");
            
            // Step 3: Enter/move towards transition target `T7__INITIAL1__S1`.
            this.T7__INITIAL1__S1_enter();
            
            // Step 4: complete transition. Ends event dispatch. No other behaviors are checked.
            return;
        } // end of behavior for T7__INITIAL1__PARENT.<InitialState>
    }
    
    
    ////////////////////////////////////////////////////////////////////////////////
    // event handlers for state T7__INITIAL1__G
    ////////////////////////////////////////////////////////////////////////////////
    
    private void T7__INITIAL1__G_enter()
    {
        this.stateId = StateId.T7__INITIAL1__G;
        
        // T7__INITIAL1__G behavior
        // uml: enter / { trace("Enter T7__INITIAL1__G."); }
        {
            // Step 1: execute action `trace("Enter T7__INITIAL1__G.");`
            ____GilData_EchoStringVoid("MainClass.Trace(\"Enter T7__INITIAL1__G.\");");
        } // end of behavior for T7__INITIAL1__G
    }
    
    private void T7__INITIAL1__G_exit()
    {
        // T7__INITIAL1__G behavior
        // uml: exit / { trace("Exit T7__INITIAL1__G."); }
        {
            // Step 1: execute action `trace("Exit T7__INITIAL1__G.");`
            ____GilData_EchoStringVoid("MainClass.Trace(\"Exit T7__INITIAL1__G.\");");
        } // end of behavior for T7__INITIAL1__G
        
        this.stateId = StateId.T7__INITIAL1__PARENT;
    }
    
    private void T7__INITIAL1__G_ev2()
    {
        // T7__INITIAL1__G behavior
        // uml: EV2 [trace_guard("State T7__INITIAL1__G: check behavior `EV2 TransitionTo(T7__INITIAL1__PARENT.<InitialState>)`.", true)] / { trace("Transition action `` for T7__INITIAL1__G to T7__INITIAL1__PARENT.<InitialState>."); } TransitionTo(T7__INITIAL1__PARENT.<InitialState>)
        if (____GilData_VarArgsToBool(____GilData_EchoStringBool("trace_guard(\"State T7__INITIAL1__G: check behavior `EV2 TransitionTo(T7__INITIAL1__PARENT.<InitialState>)`.\", true)")))
        {
            // Step 1: Exit states until we reach `T7__INITIAL1__PARENT` state (Least Common Ancestor for transition).
            this.ExitUpToStateHandler(StateId.T7__INITIAL1__PARENT);
            
            // Step 2: Transition action: `trace("Transition action `` for T7__INITIAL1__G to T7__INITIAL1__PARENT.<InitialState>.");`.
            ____GilData_EchoStringVoid("MainClass.Trace(\"Transition action `` for T7__INITIAL1__G to T7__INITIAL1__PARENT.<InitialState>.\");");
            
            // Step 3: Enter/move towards transition target `T7__INITIAL1__PARENT.<InitialState>`.
            // T7__INITIAL1__PARENT.<InitialState> is a pseudo state and cannot have an `enter` trigger.
            
            // Finish transition by calling pseudo state transition function.
            this.T7__INITIAL1__PARENT_InitialState_transition();
            return; // event processing immediately stops when a transition finishes. No other behaviors for this state are checked.
        } // end of behavior for T7__INITIAL1__G
        
        // No ancestor handles this event.
    }
    
    private void T7__INITIAL1__G_InitialState_transition()
    {
        // T7__INITIAL1__G.<InitialState> behavior
        // uml: [count == 1] / { trace("Transition action `` for T7__INITIAL1__G.<InitialState> to T7__INITIAL1__G_S1."); } TransitionTo(T7__INITIAL1__G_S1)
        if (____GilData_VarArgsToBool(____GilData_EchoStringBool("this.vars.count == 1")))
        {
            // Step 1: Exit states until we reach `T7__INITIAL1__G` state (Least Common Ancestor for transition). Already at LCA, no exiting required.
            
            // Step 2: Transition action: `trace("Transition action `` for T7__INITIAL1__G.<InitialState> to T7__INITIAL1__G_S1.");`.
            ____GilData_EchoStringVoid("MainClass.Trace(\"Transition action `` for T7__INITIAL1__G.<InitialState> to T7__INITIAL1__G_S1.\");");
            
            // Step 3: Enter/move towards transition target `T7__INITIAL1__G_S1`.
            this.T7__INITIAL1__G_S1_enter();
            
            // Step 4: complete transition. Ends event dispatch. No other behaviors are checked.
            return;
        } // end of behavior for T7__INITIAL1__G.<InitialState>
        
        // T7__INITIAL1__G.<InitialState> behavior
        // uml: [count == 2] / { trace("Transition action `` for T7__INITIAL1__G.<InitialState> to T7__INITIAL1__G_S2."); } TransitionTo(T7__INITIAL1__G_S2)
        if (____GilData_VarArgsToBool(____GilData_EchoStringBool("this.vars.count == 2")))
        {
            // Step 1: Exit states until we reach `T7__INITIAL1__G` state (Least Common Ancestor for transition). Already at LCA, no exiting required.
            
            // Step 2: Transition action: `trace("Transition action `` for T7__INITIAL1__G.<InitialState> to T7__INITIAL1__G_S2.");`.
            ____GilData_EchoStringVoid("MainClass.Trace(\"Transition action `` for T7__INITIAL1__G.<InitialState> to T7__INITIAL1__G_S2.\");");
            
            // Step 3: Enter/move towards transition target `T7__INITIAL1__G_S2`.
            this.T7__INITIAL1__G_S2_enter();
            
            // Step 4: complete transition. Ends event dispatch. No other behaviors are checked.
            return;
        } // end of behavior for T7__INITIAL1__G.<InitialState>
        
        // T7__INITIAL1__G.<InitialState> behavior
        // uml: else / { trace("Transition action `` for T7__INITIAL1__G.<InitialState> to T7__INITIAL1__G_S3."); } TransitionTo(T7__INITIAL1__G_S3)
        {
            // Step 1: Exit states until we reach `T7__INITIAL1__G` state (Least Common Ancestor for transition). Already at LCA, no exiting required.
            
            // Step 2: Transition action: `trace("Transition action `` for T7__INITIAL1__G.<InitialState> to T7__INITIAL1__G_S3.");`.
            ____GilData_EchoStringVoid("MainClass.Trace(\"Transition action `` for T7__INITIAL1__G.<InitialState> to T7__INITIAL1__G_S3.\");");
            
            // Step 3: Enter/move towards transition target `T7__INITIAL1__G_S3`.
            this.T7__INITIAL1__G_S3_enter();
            
            // Step 4: complete transition. Ends event dispatch. No other behaviors are checked.
            return;
        } // end of behavior for T7__INITIAL1__G.<InitialState>
    }
    
    
    ////////////////////////////////////////////////////////////////////////////////
    // event handlers for state T7__INITIAL1__G_S1
    ////////////////////////////////////////////////////////////////////////////////
    
    private void T7__INITIAL1__G_S1_enter()
    {
        this.stateId = StateId.T7__INITIAL1__G_S1;
        
        // T7__INITIAL1__G_S1 behavior
        // uml: enter / { trace("Enter T7__INITIAL1__G_S1."); }
        {
            // Step 1: execute action `trace("Enter T7__INITIAL1__G_S1.");`
            ____GilData_EchoStringVoid("MainClass.Trace(\"Enter T7__INITIAL1__G_S1.\");");
        } // end of behavior for T7__INITIAL1__G_S1
    }
    
    private void T7__INITIAL1__G_S1_exit()
    {
        // T7__INITIAL1__G_S1 behavior
        // uml: exit / { trace("Exit T7__INITIAL1__G_S1."); }
        {
            // Step 1: execute action `trace("Exit T7__INITIAL1__G_S1.");`
            ____GilData_EchoStringVoid("MainClass.Trace(\"Exit T7__INITIAL1__G_S1.\");");
        } // end of behavior for T7__INITIAL1__G_S1
        
        this.stateId = StateId.T7__INITIAL1__G;
    }
    
    
    ////////////////////////////////////////////////////////////////////////////////
    // event handlers for state T7__INITIAL1__G_S2
    ////////////////////////////////////////////////////////////////////////////////
    
    private void T7__INITIAL1__G_S2_enter()
    {
        this.stateId = StateId.T7__INITIAL1__G_S2;
        
        // T7__INITIAL1__G_S2 behavior
        // uml: enter / { trace("Enter T7__INITIAL1__G_S2."); }
        {
            // Step 1: execute action `trace("Enter T7__INITIAL1__G_S2.");`
            ____GilData_EchoStringVoid("MainClass.Trace(\"Enter T7__INITIAL1__G_S2.\");");
        } // end of behavior for T7__INITIAL1__G_S2
    }
    
    private void T7__INITIAL1__G_S2_exit()
    {
        // T7__INITIAL1__G_S2 behavior
        // uml: exit / { trace("Exit T7__INITIAL1__G_S2."); }
        {
            // Step 1: execute action `trace("Exit T7__INITIAL1__G_S2.");`
            ____GilData_EchoStringVoid("MainClass.Trace(\"Exit T7__INITIAL1__G_S2.\");");
        } // end of behavior for T7__INITIAL1__G_S2
        
        this.stateId = StateId.T7__INITIAL1__G;
    }
    
    
    ////////////////////////////////////////////////////////////////////////////////
    // event handlers for state T7__INITIAL1__G_S3
    ////////////////////////////////////////////////////////////////////////////////
    
    private void T7__INITIAL1__G_S3_enter()
    {
        this.stateId = StateId.T7__INITIAL1__G_S3;
        
        // T7__INITIAL1__G_S3 behavior
        // uml: enter / { trace("Enter T7__INITIAL1__G_S3."); }
        {
            // Step 1: execute action `trace("Enter T7__INITIAL1__G_S3.");`
            ____GilData_EchoStringVoid("MainClass.Trace(\"Enter T7__INITIAL1__G_S3.\");");
        } // end of behavior for T7__INITIAL1__G_S3
    }
    
    private void T7__INITIAL1__G_S3_exit()
    {
        // T7__INITIAL1__G_S3 behavior
        // uml: exit / { trace("Exit T7__INITIAL1__G_S3."); }
        {
            // Step 1: execute action `trace("Exit T7__INITIAL1__G_S3.");`
            ____GilData_EchoStringVoid("MainClass.Trace(\"Exit T7__INITIAL1__G_S3.\");");
        } // end of behavior for T7__INITIAL1__G_S3
        
        this.stateId = StateId.T7__INITIAL1__G;
    }
    
    
    ////////////////////////////////////////////////////////////////////////////////
    // event handlers for state T7__INITIAL1__S1
    ////////////////////////////////////////////////////////////////////////////////
    
    private void T7__INITIAL1__S1_enter()
    {
        this.stateId = StateId.T7__INITIAL1__S1;
        
        // T7__INITIAL1__S1 behavior
        // uml: enter / { trace("Enter T7__INITIAL1__S1."); }
        {
            // Step 1: execute action `trace("Enter T7__INITIAL1__S1.");`
            ____GilData_EchoStringVoid("MainClass.Trace(\"Enter T7__INITIAL1__S1.\");");
        } // end of behavior for T7__INITIAL1__S1
    }
    
    private void T7__INITIAL1__S1_exit()
    {
        // T7__INITIAL1__S1 behavior
        // uml: exit / { trace("Exit T7__INITIAL1__S1."); }
        {
            // Step 1: execute action `trace("Exit T7__INITIAL1__S1.");`
            ____GilData_EchoStringVoid("MainClass.Trace(\"Exit T7__INITIAL1__S1.\");");
        } // end of behavior for T7__INITIAL1__S1
        
        this.stateId = StateId.T7__INITIAL1__PARENT;
    }
    
    private void T7__INITIAL1__S1_ev1()
    {
        // T7__INITIAL1__S1 behavior
        // uml: EV1 [trace_guard("State T7__INITIAL1__S1: check behavior `EV1 TransitionTo(T7__INITIAL1__G)`.", true)] / { trace("Transition action `` for T7__INITIAL1__S1 to T7__INITIAL1__G."); } TransitionTo(T7__INITIAL1__G)
        if (____GilData_VarArgsToBool(____GilData_EchoStringBool("trace_guard(\"State T7__INITIAL1__S1: check behavior `EV1 TransitionTo(T7__INITIAL1__G)`.\", true)")))
        {
            // Step 1: Exit states until we reach `T7__INITIAL1__PARENT` state (Least Common Ancestor for transition).
            this.T7__INITIAL1__S1_exit();
            
            // Step 2: Transition action: `trace("Transition action `` for T7__INITIAL1__S1 to T7__INITIAL1__G.");`.
            ____GilData_EchoStringVoid("MainClass.Trace(\"Transition action `` for T7__INITIAL1__S1 to T7__INITIAL1__G.\");");
            
            // Step 3: Enter/move towards transition target `T7__INITIAL1__G`.
            this.T7__INITIAL1__G_enter();
            
            // Finish transition by calling pseudo state transition function.
            this.T7__INITIAL1__G_InitialState_transition();
            return; // event processing immediately stops when a transition finishes. No other behaviors for this state are checked.
        } // end of behavior for T7__INITIAL1__S1
        
        // No ancestor handles this event.
    }
    
    private void T7__INITIAL1__S1_ev3()
    {
        // T7__INITIAL1__S1 behavior
        // uml: EV3 [trace_guard("State T7__INITIAL1__S1: check behavior `EV3 TransitionTo(T7__INITIAL1__G.<InitialState>)`.", true)] / { trace("Transition action `` for T7__INITIAL1__S1 to T7__INITIAL1__G.<InitialState>."); } TransitionTo(T7__INITIAL1__G.<InitialState>)
        if (____GilData_VarArgsToBool(____GilData_EchoStringBool("trace_guard(\"State T7__INITIAL1__S1: check behavior `EV3 TransitionTo(T7__INITIAL1__G.<InitialState>)`.\", true)")))
        {
            // Step 1: Exit states until we reach `T7__INITIAL1__PARENT` state (Least Common Ancestor for transition).
            this.T7__INITIAL1__S1_exit();
            
            // Step 2: Transition action: `trace("Transition action `` for T7__INITIAL1__S1 to T7__INITIAL1__G.<InitialState>.");`.
            ____GilData_EchoStringVoid("MainClass.Trace(\"Transition action `` for T7__INITIAL1__S1 to T7__INITIAL1__G.<InitialState>.\");");
            
            // Step 3: Enter/move towards transition target `T7__INITIAL1__G.<InitialState>`.
            this.T7__INITIAL1__G_enter();
            // T7__INITIAL1__G.<InitialState> is a pseudo state and cannot have an `enter` trigger.
            
            // Finish transition by calling pseudo state transition function.
            this.T7__INITIAL1__G_InitialState_transition();
            return; // event processing immediately stops when a transition finishes. No other behaviors for this state are checked.
        } // end of behavior for T7__INITIAL1__S1
        
        // No ancestor handles this event.
    }
    
    
    ////////////////////////////////////////////////////////////////////////////////
    // event handlers for state TEST7_DECIDE
    ////////////////////////////////////////////////////////////////////////////////
    
    private void TEST7_DECIDE_enter()
    {
        this.stateId = StateId.TEST7_DECIDE;
        
        // TEST7_DECIDE behavior
        // uml: enter / { trace("Enter TEST7_DECIDE."); }
        {
            // Step 1: execute action `trace("Enter TEST7_DECIDE.");`
            ____GilData_EchoStringVoid("MainClass.Trace(\"Enter TEST7_DECIDE.\");");
        } // end of behavior for TEST7_DECIDE
    }
    
    private void TEST7_DECIDE_exit()
    {
        // TEST7_DECIDE behavior
        // uml: exit / { trace("Exit TEST7_DECIDE."); }
        {
            // Step 1: execute action `trace("Exit TEST7_DECIDE.");`
            ____GilData_EchoStringVoid("MainClass.Trace(\"Exit TEST7_DECIDE.\");");
        } // end of behavior for TEST7_DECIDE
        
        // TEST7_DECIDE behavior
        // uml: exit [trace_guard("State TEST7_DECIDE: check behavior `exit / { clear_dispatch_output(); }`.", true)] / { clear_dispatch_output(); }
        if (____GilData_VarArgsToBool(____GilData_EchoStringBool("trace_guard(\"State TEST7_DECIDE: check behavior `exit / { clear_dispatch_output(); }`.\", true)")))
        {
            // Step 1: execute action `clear_dispatch_output();`
            ____GilData_EchoStringVoid("MainClass.Trace(\"CLEAR_OUTPUT_BEFORE_THIS_AND_FOR_THIS_EVENT_DISPATCH\");");
        } // end of behavior for TEST7_DECIDE
        
        this.stateId = StateId.TEST7_INITIAL_OR_HISTORY;
    }
    
    private void TEST7_DECIDE_ev1()
    {
        // TEST7_DECIDE behavior
        // uml: EV1 [trace_guard("State TEST7_DECIDE: check behavior `EV1 TransitionTo(T7__INITIAL1)`.", true)] / { trace("Transition action `` for TEST7_DECIDE to T7__INITIAL1."); } TransitionTo(T7__INITIAL1)
        if (____GilData_VarArgsToBool(____GilData_EchoStringBool("trace_guard(\"State TEST7_DECIDE: check behavior `EV1 TransitionTo(T7__INITIAL1)`.\", true)")))
        {
            // Step 1: Exit states until we reach `TEST7_INITIAL_OR_HISTORY` state (Least Common Ancestor for transition).
            this.TEST7_DECIDE_exit();
            
            // Step 2: Transition action: `trace("Transition action `` for TEST7_DECIDE to T7__INITIAL1.");`.
            ____GilData_EchoStringVoid("MainClass.Trace(\"Transition action `` for TEST7_DECIDE to T7__INITIAL1.\");");
            
            // Step 3: Enter/move towards transition target `T7__INITIAL1`.
            this.TEST7_enter();
            this.T7__INITIAL1_enter();
            
            // T7__INITIAL1.<InitialState> behavior
            // uml: / { trace("Transition action `` for T7__INITIAL1.<InitialState> to T7__INITIAL1__PARENT."); } TransitionTo(T7__INITIAL1__PARENT)
            {
                // Step 1: Exit states until we reach `T7__INITIAL1` state (Least Common Ancestor for transition). Already at LCA, no exiting required.
                
                // Step 2: Transition action: `trace("Transition action `` for T7__INITIAL1.<InitialState> to T7__INITIAL1__PARENT.");`.
                ____GilData_EchoStringVoid("MainClass.Trace(\"Transition action `` for T7__INITIAL1.<InitialState> to T7__INITIAL1__PARENT.\");");
                
                // Step 3: Enter/move towards transition target `T7__INITIAL1__PARENT`.
                this.T7__INITIAL1__PARENT_enter();
                
                // Finish transition by calling pseudo state transition function.
                this.T7__INITIAL1__PARENT_InitialState_transition();
                return; // event processing immediately stops when a transition finishes. No other behaviors for this state are checked.
            } // end of behavior for T7__INITIAL1.<InitialState>
        } // end of behavior for TEST7_DECIDE
        
        // No ancestor handles this event.
    }
    
    private void TEST7_DECIDE_ev2()
    {
        // TEST7_DECIDE behavior
        // uml: EV2 [trace_guard("State TEST7_DECIDE: check behavior `EV2 TransitionTo(T7__HISTORY1)`.", true)] / { trace("Transition action `` for TEST7_DECIDE to T7__HISTORY1."); } TransitionTo(T7__HISTORY1)
        if (____GilData_VarArgsToBool(____GilData_EchoStringBool("trace_guard(\"State TEST7_DECIDE: check behavior `EV2 TransitionTo(T7__HISTORY1)`.\", true)")))
        {
            // Step 1: Exit states until we reach `TEST7_INITIAL_OR_HISTORY` state (Least Common Ancestor for transition).
            this.TEST7_DECIDE_exit();
            
            // Step 2: Transition action: `trace("Transition action `` for TEST7_DECIDE to T7__HISTORY1.");`.
            ____GilData_EchoStringVoid("MainClass.Trace(\"Transition action `` for TEST7_DECIDE to T7__HISTORY1.\");");
            
            // Step 3: Enter/move towards transition target `T7__HISTORY1`.
            this.TEST7_enter();
            this.T7__HISTORY1_enter();
            
            // T7__HISTORY1.<InitialState> behavior
            // uml: / { trace("Transition action `` for T7__HISTORY1.<InitialState> to T7__H1__ON."); } TransitionTo(T7__H1__ON)
            {
                // Step 1: Exit states until we reach `T7__HISTORY1` state (Least Common Ancestor for transition). Already at LCA, no exiting required.
                
                // Step 2: Transition action: `trace("Transition action `` for T7__HISTORY1.<InitialState> to T7__H1__ON.");`.
                ____GilData_EchoStringVoid("MainClass.Trace(\"Transition action `` for T7__HISTORY1.<InitialState> to T7__H1__ON.\");");
                
                // Step 3: Enter/move towards transition target `T7__H1__ON`.
                this.T7__H1__ON_enter();
                
                // Finish transition by calling pseudo state transition function.
                this.T7__H1__ON_InitialState_transition();
                return; // event processing immediately stops when a transition finishes. No other behaviors for this state are checked.
            } // end of behavior for T7__HISTORY1.<InitialState>
        } // end of behavior for TEST7_DECIDE
        
        // No ancestor handles this event.
    }
    
    private void TEST7_DECIDE_ev3()
    {
        // TEST7_DECIDE behavior
        // uml: EV3 [trace_guard("State TEST7_DECIDE: check behavior `EV3 TransitionTo(T7__DEEP_HISTORY1)`.", true)] / { trace("Transition action `` for TEST7_DECIDE to T7__DEEP_HISTORY1."); } TransitionTo(T7__DEEP_HISTORY1)
        if (____GilData_VarArgsToBool(____GilData_EchoStringBool("trace_guard(\"State TEST7_DECIDE: check behavior `EV3 TransitionTo(T7__DEEP_HISTORY1)`.\", true)")))
        {
            // Step 1: Exit states until we reach `TEST7_INITIAL_OR_HISTORY` state (Least Common Ancestor for transition).
            this.TEST7_DECIDE_exit();
            
            // Step 2: Transition action: `trace("Transition action `` for TEST7_DECIDE to T7__DEEP_HISTORY1.");`.
            ____GilData_EchoStringVoid("MainClass.Trace(\"Transition action `` for TEST7_DECIDE to T7__DEEP_HISTORY1.\");");
            
            // Step 3: Enter/move towards transition target `T7__DEEP_HISTORY1`.
            this.TEST7_enter();
            this.T7__DEEP_HISTORY1_enter();
            
            // T7__DEEP_HISTORY1.<InitialState> behavior
            // uml: / { trace("Transition action `` for T7__DEEP_HISTORY1.<InitialState> to T7__DH1__BUILD."); } TransitionTo(T7__DH1__BUILD)
            {
                // Step 1: Exit states until we reach `T7__DEEP_HISTORY1` state (Least Common Ancestor for transition). Already at LCA, no exiting required.
                
                // Step 2: Transition action: `trace("Transition action `` for T7__DEEP_HISTORY1.<InitialState> to T7__DH1__BUILD.");`.
                ____GilData_EchoStringVoid("MainClass.Trace(\"Transition action `` for T7__DEEP_HISTORY1.<InitialState> to T7__DH1__BUILD.\");");
                
                // Step 3: Enter/move towards transition target `T7__DH1__BUILD`.
                this.T7__DH1__SANTAS_WORKSHOP_enter();
                this.T7__DH1__BUILD_enter();
                
                // Finish transition by calling pseudo state transition function.
                this.T7__DH1__BUILD_InitialState_transition();
                return; // event processing immediately stops when a transition finishes. No other behaviors for this state are checked.
            } // end of behavior for T7__DEEP_HISTORY1.<InitialState>
        } // end of behavior for TEST7_DECIDE
        
        // No ancestor handles this event.
    }
    
    private void TEST7_DECIDE_ev4()
    {
        // TEST7_DECIDE behavior
        // uml: EV4 [trace_guard("State TEST7_DECIDE: check behavior `EV4 TransitionTo(T7__DEEP_HISTORY2)`.", true)] / { trace("Transition action `` for TEST7_DECIDE to T7__DEEP_HISTORY2."); } TransitionTo(T7__DEEP_HISTORY2)
        if (____GilData_VarArgsToBool(____GilData_EchoStringBool("trace_guard(\"State TEST7_DECIDE: check behavior `EV4 TransitionTo(T7__DEEP_HISTORY2)`.\", true)")))
        {
            // Step 1: Exit states until we reach `TEST7_INITIAL_OR_HISTORY` state (Least Common Ancestor for transition).
            this.TEST7_DECIDE_exit();
            
            // Step 2: Transition action: `trace("Transition action `` for TEST7_DECIDE to T7__DEEP_HISTORY2.");`.
            ____GilData_EchoStringVoid("MainClass.Trace(\"Transition action `` for TEST7_DECIDE to T7__DEEP_HISTORY2.\");");
            
            // Step 3: Enter/move towards transition target `T7__DEEP_HISTORY2`.
            this.TEST7_enter();
            this.T7__DEEP_HISTORY2_enter();
            
            // T7__DEEP_HISTORY2.<InitialState> behavior
            // uml: / { trace("Transition action `` for T7__DEEP_HISTORY2.<InitialState> to T7__DEEP_HISTORY2__T7__state_0."); } TransitionTo(T7__DEEP_HISTORY2__T7__state_0)
            {
                // Step 1: Exit states until we reach `T7__DEEP_HISTORY2` state (Least Common Ancestor for transition). Already at LCA, no exiting required.
                
                // Step 2: Transition action: `trace("Transition action `` for T7__DEEP_HISTORY2.<InitialState> to T7__DEEP_HISTORY2__T7__state_0.");`.
                ____GilData_EchoStringVoid("MainClass.Trace(\"Transition action `` for T7__DEEP_HISTORY2.<InitialState> to T7__DEEP_HISTORY2__T7__state_0.\");");
                
                // Step 3: Enter/move towards transition target `T7__DEEP_HISTORY2__T7__state_0`.
                this.T7__DEEP_HISTORY2__T7__STATE_0_enter();
                
                // Finish transition by calling pseudo state transition function.
                this.T7__DEEP_HISTORY2__T7__state_0_InitialState_transition();
                return; // event processing immediately stops when a transition finishes. No other behaviors for this state are checked.
            } // end of behavior for T7__DEEP_HISTORY2.<InitialState>
        } // end of behavior for TEST7_DECIDE
        
        // No ancestor handles this event.
    }
    
    private void TEST7_DECIDE_ev5()
    {
        // TEST7_DECIDE behavior
        // uml: EV5 [trace_guard("State TEST7_DECIDE: check behavior `EV5 TransitionTo(T7__DEEP_HISTORY3)`.", true)] / { trace("Transition action `` for TEST7_DECIDE to T7__DEEP_HISTORY3."); } TransitionTo(T7__DEEP_HISTORY3)
        if (____GilData_VarArgsToBool(____GilData_EchoStringBool("trace_guard(\"State TEST7_DECIDE: check behavior `EV5 TransitionTo(T7__DEEP_HISTORY3)`.\", true)")))
        {
            // Step 1: Exit states until we reach `TEST7_INITIAL_OR_HISTORY` state (Least Common Ancestor for transition).
            this.TEST7_DECIDE_exit();
            
            // Step 2: Transition action: `trace("Transition action `` for TEST7_DECIDE to T7__DEEP_HISTORY3.");`.
            ____GilData_EchoStringVoid("MainClass.Trace(\"Transition action `` for TEST7_DECIDE to T7__DEEP_HISTORY3.\");");
            
            // Step 3: Enter/move towards transition target `T7__DEEP_HISTORY3`.
            this.TEST7_enter();
            this.T7__DEEP_HISTORY3_enter();
            
            // T7__DEEP_HISTORY3.<InitialState> behavior
            // uml: / { trace("Transition action `` for T7__DEEP_HISTORY3.<InitialState> to T7__DEEP_HISTORY3__T7__state_0."); } TransitionTo(T7__DEEP_HISTORY3__T7__state_0)
            {
                // Step 1: Exit states until we reach `T7__DEEP_HISTORY3` state (Least Common Ancestor for transition). Already at LCA, no exiting required.
                
                // Step 2: Transition action: `trace("Transition action `` for T7__DEEP_HISTORY3.<InitialState> to T7__DEEP_HISTORY3__T7__state_0.");`.
                ____GilData_EchoStringVoid("MainClass.Trace(\"Transition action `` for T7__DEEP_HISTORY3.<InitialState> to T7__DEEP_HISTORY3__T7__state_0.\");");
                
                // Step 3: Enter/move towards transition target `T7__DEEP_HISTORY3__T7__state_0`.
                this.T7__DEEP_HISTORY3__T7__STATE_0_enter();
                
                // Finish transition by calling pseudo state transition function.
                this.T7__DEEP_HISTORY3__T7__state_0_InitialState_transition();
                return; // event processing immediately stops when a transition finishes. No other behaviors for this state are checked.
            } // end of behavior for T7__DEEP_HISTORY3.<InitialState>
        } // end of behavior for TEST7_DECIDE
        
        // No ancestor handles this event.
    }
    
    
    ////////////////////////////////////////////////////////////////////////////////
    // event handlers for state TEST8_ENTRY_CHOICE
    ////////////////////////////////////////////////////////////////////////////////
    
    private void TEST8_ENTRY_CHOICE_enter()
    {
        this.stateId = StateId.TEST8_ENTRY_CHOICE;
        
        // TEST8_ENTRY_CHOICE behavior
        // uml: enter / { trace("Enter TEST8_ENTRY_CHOICE."); }
        {
            // Step 1: execute action `trace("Enter TEST8_ENTRY_CHOICE.");`
            ____GilData_EchoStringVoid("MainClass.Trace(\"Enter TEST8_ENTRY_CHOICE.\");");
        } // end of behavior for TEST8_ENTRY_CHOICE
    }
    
    private void TEST8_ENTRY_CHOICE_exit()
    {
        // TEST8_ENTRY_CHOICE behavior
        // uml: exit / { trace("Exit TEST8_ENTRY_CHOICE."); }
        {
            // Step 1: execute action `trace("Exit TEST8_ENTRY_CHOICE.");`
            ____GilData_EchoStringVoid("MainClass.Trace(\"Exit TEST8_ENTRY_CHOICE.\");");
        } // end of behavior for TEST8_ENTRY_CHOICE
        
        this.stateId = StateId.ROOT;
    }
    
    
    ////////////////////////////////////////////////////////////////////////////////
    // event handlers for state TEST8_ROOT
    ////////////////////////////////////////////////////////////////////////////////
    
    private void TEST8_ROOT_enter()
    {
        this.stateId = StateId.TEST8_ROOT;
        
        // TEST8_ROOT behavior
        // uml: enter / { trace("Enter TEST8_ROOT."); }
        {
            // Step 1: execute action `trace("Enter TEST8_ROOT.");`
            ____GilData_EchoStringVoid("MainClass.Trace(\"Enter TEST8_ROOT.\");");
        } // end of behavior for TEST8_ROOT
        
        // TEST8_ROOT behavior
        // uml: enter [trace_guard("State TEST8_ROOT: check behavior `enter / { clear_dispatch_output(); }`.", true)] / { clear_dispatch_output(); }
        if (____GilData_VarArgsToBool(____GilData_EchoStringBool("trace_guard(\"State TEST8_ROOT: check behavior `enter / { clear_dispatch_output(); }`.\", true)")))
        {
            // Step 1: execute action `clear_dispatch_output();`
            ____GilData_EchoStringVoid("MainClass.Trace(\"CLEAR_OUTPUT_BEFORE_THIS_AND_FOR_THIS_EVENT_DISPATCH\");");
        } // end of behavior for TEST8_ROOT
    }
    
    private void TEST8_ROOT_exit()
    {
        // TEST8_ROOT behavior
        // uml: exit / { trace("Exit TEST8_ROOT."); }
        {
            // Step 1: execute action `trace("Exit TEST8_ROOT.");`
            ____GilData_EchoStringVoid("MainClass.Trace(\"Exit TEST8_ROOT.\");");
        } // end of behavior for TEST8_ROOT
        
        this.stateId = StateId.TEST8_ENTRY_CHOICE;
    }
    
    private void TEST8_ROOT_ev3()
    {
        // TEST8_ROOT behavior
        // uml: EV3 [trace_guard("State TEST8_ROOT: check behavior `EV3`.", true)]
        if (____GilData_VarArgsToBool(____GilData_EchoStringBool("trace_guard(\"State TEST8_ROOT: check behavior `EV3`.\", true)")))
        {
            // Step 1: execute action ``
        } // end of behavior for TEST8_ROOT
        
        // No ancestor handles this event.
    }
    
    private void TEST8_ROOT_ev5()
    {
        // TEST8_ROOT behavior
        // uml: EV5 [trace_guard("State TEST8_ROOT: check behavior `EV5 / { count++; }`.", true)] / { count++; }
        if (____GilData_VarArgsToBool(____GilData_EchoStringBool("trace_guard(\"State TEST8_ROOT: check behavior `EV5 / { count++; }`.\", true)")))
        {
            // Step 1: execute action `count++;`
            ____GilData_EchoStringVoid("this.vars.count++;");
        } // end of behavior for TEST8_ROOT
        
        // No ancestor handles this event.
    }
    
    private void TEST8_ROOT_EntryPoint_1__transition()
    {
        // TEST8_ROOT.<EntryPoint>(1) behavior
        // uml: / { trace("Transition action `` for TEST8_ROOT.<EntryPoint>(1) to TEST8_S1."); } TransitionTo(TEST8_S1)
        {
            // Step 1: Exit states until we reach `TEST8_ROOT` state (Least Common Ancestor for transition). Already at LCA, no exiting required.
            
            // Step 2: Transition action: `trace("Transition action `` for TEST8_ROOT.<EntryPoint>(1) to TEST8_S1.");`.
            ____GilData_EchoStringVoid("MainClass.Trace(\"Transition action `` for TEST8_ROOT.<EntryPoint>(1) to TEST8_S1.\");");
            
            // Step 3: Enter/move towards transition target `TEST8_S1`.
            this.TEST8_S1_enter();
            
            // Step 4: complete transition. Ends event dispatch. No other behaviors are checked.
            return;
        } // end of behavior for TEST8_ROOT.<EntryPoint>(1)
    }
    
    
    ////////////////////////////////////////////////////////////////////////////////
    // event handlers for state TEST8_G
    ////////////////////////////////////////////////////////////////////////////////
    
    private void TEST8_G_enter()
    {
        this.stateId = StateId.TEST8_G;
        
        // TEST8_G behavior
        // uml: enter / { trace("Enter TEST8_G."); }
        {
            // Step 1: execute action `trace("Enter TEST8_G.");`
            ____GilData_EchoStringVoid("MainClass.Trace(\"Enter TEST8_G.\");");
        } // end of behavior for TEST8_G
    }
    
    private void TEST8_G_exit()
    {
        // TEST8_G behavior
        // uml: exit / { trace("Exit TEST8_G."); }
        {
            // Step 1: execute action `trace("Exit TEST8_G.");`
            ____GilData_EchoStringVoid("MainClass.Trace(\"Exit TEST8_G.\");");
        } // end of behavior for TEST8_G
        
        this.stateId = StateId.TEST8_ROOT;
    }
    
    private void TEST8_G_ev2()
    {
        // TEST8_G behavior
        // uml: EV2 [trace_guard("State TEST8_G: check behavior `EV2 TransitionTo(TEST8_ROOT.<EntryPoint>(1))`.", true)] / { trace("Transition action `` for TEST8_G to TEST8_ROOT.<EntryPoint>(1)."); } TransitionTo(TEST8_ROOT.<EntryPoint>(1))
        if (____GilData_VarArgsToBool(____GilData_EchoStringBool("trace_guard(\"State TEST8_G: check behavior `EV2 TransitionTo(TEST8_ROOT.<EntryPoint>(1))`.\", true)")))
        {
            // Step 1: Exit states until we reach `TEST8_ROOT` state (Least Common Ancestor for transition).
            this.ExitUpToStateHandler(StateId.TEST8_ROOT);
            
            // Step 2: Transition action: `trace("Transition action `` for TEST8_G to TEST8_ROOT.<EntryPoint>(1).");`.
            ____GilData_EchoStringVoid("MainClass.Trace(\"Transition action `` for TEST8_G to TEST8_ROOT.<EntryPoint>(1).\");");
            
            // Step 3: Enter/move towards transition target `TEST8_ROOT.<EntryPoint>(1)`.
            // TEST8_ROOT.<EntryPoint>(1) is a pseudo state and cannot have an `enter` trigger.
            
            // Finish transition by calling pseudo state transition function.
            this.TEST8_ROOT_EntryPoint_1__transition();
            return; // event processing immediately stops when a transition finishes. No other behaviors for this state are checked.
        } // end of behavior for TEST8_G
        
        // No ancestor handles this event.
    }
    
    private void TEST8_G_EntryPoint_1__transition()
    {
        // TEST8_G.<EntryPoint>(1) behavior
        // uml: [count == 1] / { trace("Transition action `` for TEST8_G.<EntryPoint>(1) to TEST8_G_S1."); } TransitionTo(TEST8_G_S1)
        if (____GilData_VarArgsToBool(____GilData_EchoStringBool("this.vars.count == 1")))
        {
            // Step 1: Exit states until we reach `TEST8_G` state (Least Common Ancestor for transition). Already at LCA, no exiting required.
            
            // Step 2: Transition action: `trace("Transition action `` for TEST8_G.<EntryPoint>(1) to TEST8_G_S1.");`.
            ____GilData_EchoStringVoid("MainClass.Trace(\"Transition action `` for TEST8_G.<EntryPoint>(1) to TEST8_G_S1.\");");
            
            // Step 3: Enter/move towards transition target `TEST8_G_S1`.
            this.TEST8_G_S1_enter();
            
            // Step 4: complete transition. Ends event dispatch. No other behaviors are checked.
            return;
        } // end of behavior for TEST8_G.<EntryPoint>(1)
        
        // TEST8_G.<EntryPoint>(1) behavior
        // uml: [count == 2] / { trace("Transition action `` for TEST8_G.<EntryPoint>(1) to TEST8_G_S2."); } TransitionTo(TEST8_G_S2)
        if (____GilData_VarArgsToBool(____GilData_EchoStringBool("this.vars.count == 2")))
        {
            // Step 1: Exit states until we reach `TEST8_G` state (Least Common Ancestor for transition). Already at LCA, no exiting required.
            
            // Step 2: Transition action: `trace("Transition action `` for TEST8_G.<EntryPoint>(1) to TEST8_G_S2.");`.
            ____GilData_EchoStringVoid("MainClass.Trace(\"Transition action `` for TEST8_G.<EntryPoint>(1) to TEST8_G_S2.\");");
            
            // Step 3: Enter/move towards transition target `TEST8_G_S2`.
            this.TEST8_G_S2_enter();
            
            // Step 4: complete transition. Ends event dispatch. No other behaviors are checked.
            return;
        } // end of behavior for TEST8_G.<EntryPoint>(1)
        
        // TEST8_G.<EntryPoint>(1) behavior
        // uml: else / { trace("Transition action `` for TEST8_G.<EntryPoint>(1) to TEST8_G_S3."); } TransitionTo(TEST8_G_S3)
        {
            // Step 1: Exit states until we reach `TEST8_G` state (Least Common Ancestor for transition). Already at LCA, no exiting required.
            
            // Step 2: Transition action: `trace("Transition action `` for TEST8_G.<EntryPoint>(1) to TEST8_G_S3.");`.
            ____GilData_EchoStringVoid("MainClass.Trace(\"Transition action `` for TEST8_G.<EntryPoint>(1) to TEST8_G_S3.\");");
            
            // Step 3: Enter/move towards transition target `TEST8_G_S3`.
            this.TEST8_G_S3_enter();
            
            // Step 4: complete transition. Ends event dispatch. No other behaviors are checked.
            return;
        } // end of behavior for TEST8_G.<EntryPoint>(1)
    }
    
    private void TEST8_G_EntryPoint_3__transition()
    {
        // TEST8_G.<EntryPoint>(3) behavior
        // uml: / { trace("Transition action `count += 0;` for TEST8_G.<EntryPoint>(3) to TEST8_G.<EntryPoint>(1).");\ncount += 0; } TransitionTo(TEST8_G.<EntryPoint>(1))
        {
            // Step 1: Exit states until we reach `TEST8_G` state (Least Common Ancestor for transition). Already at LCA, no exiting required.
            
            // Step 2: Transition action: `trace("Transition action `count += 0;` for TEST8_G.<EntryPoint>(3) to TEST8_G.<EntryPoint>(1).");\ncount += 0;`.
            ____GilData_EchoStringVoid("MainClass.Trace(\"Transition action `count += 0;` for TEST8_G.<EntryPoint>(3) to TEST8_G.<EntryPoint>(1).\");");
            ____GilData_EchoStringVoid("this.vars.count += 0;");
            
            // Step 3: Enter/move towards transition target `TEST8_G.<EntryPoint>(1)`.
            // TEST8_G.<EntryPoint>(1) is a pseudo state and cannot have an `enter` trigger.
            
            // Finish transition by calling pseudo state transition function.
            this.TEST8_G_EntryPoint_1__transition();
            return; // event processing immediately stops when a transition finishes. No other behaviors for this state are checked.
        } // end of behavior for TEST8_G.<EntryPoint>(3)
    }
    
    
    ////////////////////////////////////////////////////////////////////////////////
    // event handlers for state TEST8_G_S1
    ////////////////////////////////////////////////////////////////////////////////
    
    private void TEST8_G_S1_enter()
    {
        this.stateId = StateId.TEST8_G_S1;
        
        // TEST8_G_S1 behavior
        // uml: enter / { trace("Enter TEST8_G_S1."); }
        {
            // Step 1: execute action `trace("Enter TEST8_G_S1.");`
            ____GilData_EchoStringVoid("MainClass.Trace(\"Enter TEST8_G_S1.\");");
        } // end of behavior for TEST8_G_S1
    }
    
    private void TEST8_G_S1_exit()
    {
        // TEST8_G_S1 behavior
        // uml: exit / { trace("Exit TEST8_G_S1."); }
        {
            // Step 1: execute action `trace("Exit TEST8_G_S1.");`
            ____GilData_EchoStringVoid("MainClass.Trace(\"Exit TEST8_G_S1.\");");
        } // end of behavior for TEST8_G_S1
        
        this.stateId = StateId.TEST8_G;
    }
    
    
    ////////////////////////////////////////////////////////////////////////////////
    // event handlers for state TEST8_G_S2
    ////////////////////////////////////////////////////////////////////////////////
    
    private void TEST8_G_S2_enter()
    {
        this.stateId = StateId.TEST8_G_S2;
        
        // TEST8_G_S2 behavior
        // uml: enter / { trace("Enter TEST8_G_S2."); }
        {
            // Step 1: execute action `trace("Enter TEST8_G_S2.");`
            ____GilData_EchoStringVoid("MainClass.Trace(\"Enter TEST8_G_S2.\");");
        } // end of behavior for TEST8_G_S2
    }
    
    private void TEST8_G_S2_exit()
    {
        // TEST8_G_S2 behavior
        // uml: exit / { trace("Exit TEST8_G_S2."); }
        {
            // Step 1: execute action `trace("Exit TEST8_G_S2.");`
            ____GilData_EchoStringVoid("MainClass.Trace(\"Exit TEST8_G_S2.\");");
        } // end of behavior for TEST8_G_S2
        
        this.stateId = StateId.TEST8_G;
    }
    
    
    ////////////////////////////////////////////////////////////////////////////////
    // event handlers for state TEST8_G_S3
    ////////////////////////////////////////////////////////////////////////////////
    
    private void TEST8_G_S3_enter()
    {
        this.stateId = StateId.TEST8_G_S3;
        
        // TEST8_G_S3 behavior
        // uml: enter / { trace("Enter TEST8_G_S3."); }
        {
            // Step 1: execute action `trace("Enter TEST8_G_S3.");`
            ____GilData_EchoStringVoid("MainClass.Trace(\"Enter TEST8_G_S3.\");");
        } // end of behavior for TEST8_G_S3
    }
    
    private void TEST8_G_S3_exit()
    {
        // TEST8_G_S3 behavior
        // uml: exit / { trace("Exit TEST8_G_S3."); }
        {
            // Step 1: execute action `trace("Exit TEST8_G_S3.");`
            ____GilData_EchoStringVoid("MainClass.Trace(\"Exit TEST8_G_S3.\");");
        } // end of behavior for TEST8_G_S3
        
        this.stateId = StateId.TEST8_G;
    }
    
    
    ////////////////////////////////////////////////////////////////////////////////
    // event handlers for state TEST8_S1
    ////////////////////////////////////////////////////////////////////////////////
    
    private void TEST8_S1_enter()
    {
        this.stateId = StateId.TEST8_S1;
        
        // TEST8_S1 behavior
        // uml: enter / { trace("Enter TEST8_S1."); }
        {
            // Step 1: execute action `trace("Enter TEST8_S1.");`
            ____GilData_EchoStringVoid("MainClass.Trace(\"Enter TEST8_S1.\");");
        } // end of behavior for TEST8_S1
    }
    
    private void TEST8_S1_exit()
    {
        // TEST8_S1 behavior
        // uml: exit / { trace("Exit TEST8_S1."); }
        {
            // Step 1: execute action `trace("Exit TEST8_S1.");`
            ____GilData_EchoStringVoid("MainClass.Trace(\"Exit TEST8_S1.\");");
        } // end of behavior for TEST8_S1
        
        this.stateId = StateId.TEST8_ROOT;
    }
    
    private void TEST8_S1_ev1()
    {
        // TEST8_S1 behavior
        // uml: 1. EV1 [trace_guard("State TEST8_S1: check behavior `1. EV1 TransitionTo(TEST8_G.<EntryPoint>(1))`.", true)] / { trace("Transition action `` for TEST8_S1 to TEST8_G.<EntryPoint>(1)."); } TransitionTo(TEST8_G.<EntryPoint>(1))
        if (____GilData_VarArgsToBool(____GilData_EchoStringBool("trace_guard(\"State TEST8_S1: check behavior `1. EV1 TransitionTo(TEST8_G.<EntryPoint>(1))`.\", true)")))
        {
            // Step 1: Exit states until we reach `TEST8_ROOT` state (Least Common Ancestor for transition).
            this.TEST8_S1_exit();
            
            // Step 2: Transition action: `trace("Transition action `` for TEST8_S1 to TEST8_G.<EntryPoint>(1).");`.
            ____GilData_EchoStringVoid("MainClass.Trace(\"Transition action `` for TEST8_S1 to TEST8_G.<EntryPoint>(1).\");");
            
            // Step 3: Enter/move towards transition target `TEST8_G.<EntryPoint>(1)`.
            this.TEST8_G_enter();
            // TEST8_G.<EntryPoint>(1) is a pseudo state and cannot have an `enter` trigger.
            
            // Finish transition by calling pseudo state transition function.
            this.TEST8_G_EntryPoint_1__transition();
            return; // event processing immediately stops when a transition finishes. No other behaviors for this state are checked.
        } // end of behavior for TEST8_S1
        
        // TEST8_S1 behavior
        // uml: 2. EV1 [trace_guard("State TEST8_S1: check behavior `2. EV1 / { count++; /* shouldn't run */ }`.", true)] / { count++; /* shouldn't run */ }
        if (____GilData_VarArgsToBool(____GilData_EchoStringBool("trace_guard(\"State TEST8_S1: check behavior `2. EV1 / { count++; /* shouldn't run */ }`.\", true)")))
        {
            // Step 1: execute action `count++; /* shouldn't run */`
            ____GilData_EchoStringVoid("this.vars.count++; /* shouldn't run */");
        } // end of behavior for TEST8_S1
        
        // No ancestor handles this event.
    }
    
    private void TEST8_S1_ev3()
    {
        bool consume_event = false;
        
        // TEST8_S1 behavior
        // uml: EV3 [trace_guard("State TEST8_S1: check behavior `EV3 TransitionTo(TEST8_G.<EntryPoint>(3))`.", true)] / { trace("Transition action `` for TEST8_S1 to TEST8_G.<EntryPoint>(3)."); } TransitionTo(TEST8_G.<EntryPoint>(3))
        if (____GilData_VarArgsToBool(____GilData_EchoStringBool("trace_guard(\"State TEST8_S1: check behavior `EV3 TransitionTo(TEST8_G.<EntryPoint>(3))`.\", true)")))
        {
            // Step 1: Exit states until we reach `TEST8_ROOT` state (Least Common Ancestor for transition).
            this.TEST8_S1_exit();
            
            // Step 2: Transition action: `trace("Transition action `` for TEST8_S1 to TEST8_G.<EntryPoint>(3).");`.
            ____GilData_EchoStringVoid("MainClass.Trace(\"Transition action `` for TEST8_S1 to TEST8_G.<EntryPoint>(3).\");");
            
            // Step 3: Enter/move towards transition target `TEST8_G.<EntryPoint>(3)`.
            this.TEST8_G_enter();
            // TEST8_G.<EntryPoint>(3) is a pseudo state and cannot have an `enter` trigger.
            
            // Finish transition by calling pseudo state transition function.
            this.TEST8_G_EntryPoint_3__transition();
            return; // event processing immediately stops when a transition finishes. No other behaviors for this state are checked.
        } // end of behavior for TEST8_S1
        
        // Check if event has been consumed before calling ancestor handler.
        if (!consume_event)
        {
            this.TEST8_ROOT_ev3();
        }
    }
    
    private void TEST8_S1_ev6()
    {
        // TEST8_S1 behavior
        // uml: EV6 [trace_guard("State TEST8_S1: check behavior `EV6 TransitionTo(TEST8_G.<EntryPoint>(3))`.", true)] / { trace("Transition action `` for TEST8_S1 to TEST8_G.<EntryPoint>(3)."); } TransitionTo(TEST8_G.<EntryPoint>(3))
        if (____GilData_VarArgsToBool(____GilData_EchoStringBool("trace_guard(\"State TEST8_S1: check behavior `EV6 TransitionTo(TEST8_G.<EntryPoint>(3))`.\", true)")))
        {
            // Step 1: Exit states until we reach `TEST8_ROOT` state (Least Common Ancestor for transition).
            this.TEST8_S1_exit();
            
            // Step 2: Transition action: `trace("Transition action `` for TEST8_S1 to TEST8_G.<EntryPoint>(3).");`.
            ____GilData_EchoStringVoid("MainClass.Trace(\"Transition action `` for TEST8_S1 to TEST8_G.<EntryPoint>(3).\");");
            
            // Step 3: Enter/move towards transition target `TEST8_G.<EntryPoint>(3)`.
            this.TEST8_G_enter();
            // TEST8_G.<EntryPoint>(3) is a pseudo state and cannot have an `enter` trigger.
            
            // Finish transition by calling pseudo state transition function.
            this.TEST8_G_EntryPoint_3__transition();
            return; // event processing immediately stops when a transition finishes. No other behaviors for this state are checked.
        } // end of behavior for TEST8_S1
        
        // No ancestor handles this event.
    }
    
    
    ////////////////////////////////////////////////////////////////////////////////
    // event handlers for state TEST9_EXIT_CHOICE
    ////////////////////////////////////////////////////////////////////////////////
    
    private void TEST9_EXIT_CHOICE_enter()
    {
        this.stateId = StateId.TEST9_EXIT_CHOICE;
        
        // TEST9_EXIT_CHOICE behavior
        // uml: enter / { trace("Enter TEST9_EXIT_CHOICE."); }
        {
            // Step 1: execute action `trace("Enter TEST9_EXIT_CHOICE.");`
            ____GilData_EchoStringVoid("MainClass.Trace(\"Enter TEST9_EXIT_CHOICE.\");");
        } // end of behavior for TEST9_EXIT_CHOICE
    }
    
    private void TEST9_EXIT_CHOICE_exit()
    {
        // TEST9_EXIT_CHOICE behavior
        // uml: exit / { trace("Exit TEST9_EXIT_CHOICE."); }
        {
            // Step 1: execute action `trace("Exit TEST9_EXIT_CHOICE.");`
            ____GilData_EchoStringVoid("MainClass.Trace(\"Exit TEST9_EXIT_CHOICE.\");");
        } // end of behavior for TEST9_EXIT_CHOICE
        
        this.stateId = StateId.ROOT;
    }
    
    
    ////////////////////////////////////////////////////////////////////////////////
    // event handlers for state TEST9_DECIDE
    ////////////////////////////////////////////////////////////////////////////////
    
    private void TEST9_DECIDE_enter()
    {
        this.stateId = StateId.TEST9_DECIDE;
        
        // TEST9_DECIDE behavior
        // uml: enter / { trace("Enter TEST9_DECIDE."); }
        {
            // Step 1: execute action `trace("Enter TEST9_DECIDE.");`
            ____GilData_EchoStringVoid("MainClass.Trace(\"Enter TEST9_DECIDE.\");");
        } // end of behavior for TEST9_DECIDE
    }
    
    private void TEST9_DECIDE_exit()
    {
        // TEST9_DECIDE behavior
        // uml: exit / { trace("Exit TEST9_DECIDE."); }
        {
            // Step 1: execute action `trace("Exit TEST9_DECIDE.");`
            ____GilData_EchoStringVoid("MainClass.Trace(\"Exit TEST9_DECIDE.\");");
        } // end of behavior for TEST9_DECIDE
        
        this.stateId = StateId.TEST9_EXIT_CHOICE;
    }
    
    private void TEST9_DECIDE_ev1()
    {
        // TEST9_DECIDE behavior
        // uml: EV1 [trace_guard("State TEST9_DECIDE: check behavior `EV1 TransitionTo(TEST9_ROOT)`.", true)] / { trace("Transition action `` for TEST9_DECIDE to TEST9_ROOT."); } TransitionTo(TEST9_ROOT)
        if (____GilData_VarArgsToBool(____GilData_EchoStringBool("trace_guard(\"State TEST9_DECIDE: check behavior `EV1 TransitionTo(TEST9_ROOT)`.\", true)")))
        {
            // Step 1: Exit states until we reach `TEST9_EXIT_CHOICE` state (Least Common Ancestor for transition).
            this.TEST9_DECIDE_exit();
            
            // Step 2: Transition action: `trace("Transition action `` for TEST9_DECIDE to TEST9_ROOT.");`.
            ____GilData_EchoStringVoid("MainClass.Trace(\"Transition action `` for TEST9_DECIDE to TEST9_ROOT.\");");
            
            // Step 3: Enter/move towards transition target `TEST9_ROOT`.
            this.TEST9_ROOT_enter();
            
            // TEST9_ROOT.<InitialState> behavior
            // uml: / { trace("Transition action `` for TEST9_ROOT.<InitialState> to TEST9_S1."); } TransitionTo(TEST9_S1)
            {
                // Step 1: Exit states until we reach `TEST9_ROOT` state (Least Common Ancestor for transition). Already at LCA, no exiting required.
                
                // Step 2: Transition action: `trace("Transition action `` for TEST9_ROOT.<InitialState> to TEST9_S1.");`.
                ____GilData_EchoStringVoid("MainClass.Trace(\"Transition action `` for TEST9_ROOT.<InitialState> to TEST9_S1.\");");
                
                // Step 3: Enter/move towards transition target `TEST9_S1`.
                this.TEST9_S1_enter();
                
                // TEST9_S1.<InitialState> behavior
                // uml: / { trace("Transition action `` for TEST9_S1.<InitialState> to TEST9_S1_1."); } TransitionTo(TEST9_S1_1)
                {
                    // Step 1: Exit states until we reach `TEST9_S1` state (Least Common Ancestor for transition). Already at LCA, no exiting required.
                    
                    // Step 2: Transition action: `trace("Transition action `` for TEST9_S1.<InitialState> to TEST9_S1_1.");`.
                    ____GilData_EchoStringVoid("MainClass.Trace(\"Transition action `` for TEST9_S1.<InitialState> to TEST9_S1_1.\");");
                    
                    // Step 3: Enter/move towards transition target `TEST9_S1_1`.
                    this.TEST9_S1_1_enter();
                    
                    // Step 4: complete transition. Ends event dispatch. No other behaviors are checked.
                    return;
                } // end of behavior for TEST9_S1.<InitialState>
            } // end of behavior for TEST9_ROOT.<InitialState>
        } // end of behavior for TEST9_DECIDE
        
        // No ancestor handles this event.
    }
    
    private void TEST9_DECIDE_ev2()
    {
        // TEST9_DECIDE behavior
        // uml: EV2 [trace_guard("State TEST9_DECIDE: check behavior `EV2 TransitionTo(TEST9A_ROOT)`.", true)] / { trace("Transition action `` for TEST9_DECIDE to TEST9A_ROOT."); } TransitionTo(TEST9A_ROOT)
        if (____GilData_VarArgsToBool(____GilData_EchoStringBool("trace_guard(\"State TEST9_DECIDE: check behavior `EV2 TransitionTo(TEST9A_ROOT)`.\", true)")))
        {
            // Step 1: Exit states until we reach `TEST9_EXIT_CHOICE` state (Least Common Ancestor for transition).
            this.TEST9_DECIDE_exit();
            
            // Step 2: Transition action: `trace("Transition action `` for TEST9_DECIDE to TEST9A_ROOT.");`.
            ____GilData_EchoStringVoid("MainClass.Trace(\"Transition action `` for TEST9_DECIDE to TEST9A_ROOT.\");");
            
            // Step 3: Enter/move towards transition target `TEST9A_ROOT`.
            this.TEST9A_ROOT_enter();
            
            // TEST9A_ROOT.<InitialState> behavior
            // uml: / { trace("Transition action `count = 0;` for TEST9A_ROOT.<InitialState> to TEST9A_S1.");\ncount = 0; } TransitionTo(TEST9A_S1)
            {
                // Step 1: Exit states until we reach `TEST9A_ROOT` state (Least Common Ancestor for transition). Already at LCA, no exiting required.
                
                // Step 2: Transition action: `trace("Transition action `count = 0;` for TEST9A_ROOT.<InitialState> to TEST9A_S1.");\ncount = 0;`.
                ____GilData_EchoStringVoid("MainClass.Trace(\"Transition action `count = 0;` for TEST9A_ROOT.<InitialState> to TEST9A_S1.\");");
                ____GilData_EchoStringVoid("this.vars.count = 0;");
                
                // Step 3: Enter/move towards transition target `TEST9A_S1`.
                this.TEST9A_S1_enter();
                
                // Finish transition by calling pseudo state transition function.
                this.TEST9A_S1_InitialState_transition();
                return; // event processing immediately stops when a transition finishes. No other behaviors for this state are checked.
            } // end of behavior for TEST9A_ROOT.<InitialState>
        } // end of behavior for TEST9_DECIDE
        
        // No ancestor handles this event.
    }
    
    private void TEST9_DECIDE_ev3()
    {
        // TEST9_DECIDE behavior
        // uml: EV3 [trace_guard("State TEST9_DECIDE: check behavior `EV3 TransitionTo(TEST9B_ROOT)`.", true)] / { trace("Transition action `` for TEST9_DECIDE to TEST9B_ROOT."); } TransitionTo(TEST9B_ROOT)
        if (____GilData_VarArgsToBool(____GilData_EchoStringBool("trace_guard(\"State TEST9_DECIDE: check behavior `EV3 TransitionTo(TEST9B_ROOT)`.\", true)")))
        {
            // Step 1: Exit states until we reach `TEST9_EXIT_CHOICE` state (Least Common Ancestor for transition).
            this.TEST9_DECIDE_exit();
            
            // Step 2: Transition action: `trace("Transition action `` for TEST9_DECIDE to TEST9B_ROOT.");`.
            ____GilData_EchoStringVoid("MainClass.Trace(\"Transition action `` for TEST9_DECIDE to TEST9B_ROOT.\");");
            
            // Step 3: Enter/move towards transition target `TEST9B_ROOT`.
            this.TEST9B_ROOT_enter();
            
            // Step 4: complete transition. Ends event dispatch. No other behaviors are checked.
            return;
        } // end of behavior for TEST9_DECIDE
        
        // No ancestor handles this event.
    }
    
    
    ////////////////////////////////////////////////////////////////////////////////
    // event handlers for state TEST9_ROOT
    ////////////////////////////////////////////////////////////////////////////////
    
    private void TEST9_ROOT_enter()
    {
        this.stateId = StateId.TEST9_ROOT;
        
        // TEST9_ROOT behavior
        // uml: enter / { trace("Enter TEST9_ROOT."); }
        {
            // Step 1: execute action `trace("Enter TEST9_ROOT.");`
            ____GilData_EchoStringVoid("MainClass.Trace(\"Enter TEST9_ROOT.\");");
        } // end of behavior for TEST9_ROOT
    }
    
    private void TEST9_ROOT_exit()
    {
        // TEST9_ROOT behavior
        // uml: exit / { trace("Exit TEST9_ROOT."); }
        {
            // Step 1: execute action `trace("Exit TEST9_ROOT.");`
            ____GilData_EchoStringVoid("MainClass.Trace(\"Exit TEST9_ROOT.\");");
        } // end of behavior for TEST9_ROOT
        
        this.stateId = StateId.TEST9_EXIT_CHOICE;
    }
    
    private void TEST9_ROOT_ev5()
    {
        // TEST9_ROOT behavior
        // uml: EV5 [trace_guard("State TEST9_ROOT: check behavior `EV5 / { count++; }`.", true)] / { count++; }
        if (____GilData_VarArgsToBool(____GilData_EchoStringBool("trace_guard(\"State TEST9_ROOT: check behavior `EV5 / { count++; }`.\", true)")))
        {
            // Step 1: execute action `count++;`
            ____GilData_EchoStringVoid("this.vars.count++;");
        } // end of behavior for TEST9_ROOT
        
        // No ancestor handles this event.
    }
    
    
    ////////////////////////////////////////////////////////////////////////////////
    // event handlers for state TEST9_G_S1
    ////////////////////////////////////////////////////////////////////////////////
    
    private void TEST9_G_S1_enter()
    {
        this.stateId = StateId.TEST9_G_S1;
        
        // TEST9_G_S1 behavior
        // uml: enter / { trace("Enter TEST9_G_S1."); }
        {
            // Step 1: execute action `trace("Enter TEST9_G_S1.");`
            ____GilData_EchoStringVoid("MainClass.Trace(\"Enter TEST9_G_S1.\");");
        } // end of behavior for TEST9_G_S1
    }
    
    private void TEST9_G_S1_exit()
    {
        // TEST9_G_S1 behavior
        // uml: exit / { trace("Exit TEST9_G_S1."); }
        {
            // Step 1: execute action `trace("Exit TEST9_G_S1.");`
            ____GilData_EchoStringVoid("MainClass.Trace(\"Exit TEST9_G_S1.\");");
        } // end of behavior for TEST9_G_S1
        
        this.stateId = StateId.TEST9_ROOT;
    }
    
    
    ////////////////////////////////////////////////////////////////////////////////
    // event handlers for state TEST9_G_S2
    ////////////////////////////////////////////////////////////////////////////////
    
    private void TEST9_G_S2_enter()
    {
        this.stateId = StateId.TEST9_G_S2;
        
        // TEST9_G_S2 behavior
        // uml: enter / { trace("Enter TEST9_G_S2."); }
        {
            // Step 1: execute action `trace("Enter TEST9_G_S2.");`
            ____GilData_EchoStringVoid("MainClass.Trace(\"Enter TEST9_G_S2.\");");
        } // end of behavior for TEST9_G_S2
    }
    
    private void TEST9_G_S2_exit()
    {
        // TEST9_G_S2 behavior
        // uml: exit / { trace("Exit TEST9_G_S2."); }
        {
            // Step 1: execute action `trace("Exit TEST9_G_S2.");`
            ____GilData_EchoStringVoid("MainClass.Trace(\"Exit TEST9_G_S2.\");");
        } // end of behavior for TEST9_G_S2
        
        this.stateId = StateId.TEST9_ROOT;
    }
    
    
    ////////////////////////////////////////////////////////////////////////////////
    // event handlers for state TEST9_G_S3
    ////////////////////////////////////////////////////////////////////////////////
    
    private void TEST9_G_S3_enter()
    {
        this.stateId = StateId.TEST9_G_S3;
        
        // TEST9_G_S3 behavior
        // uml: enter / { trace("Enter TEST9_G_S3."); }
        {
            // Step 1: execute action `trace("Enter TEST9_G_S3.");`
            ____GilData_EchoStringVoid("MainClass.Trace(\"Enter TEST9_G_S3.\");");
        } // end of behavior for TEST9_G_S3
    }
    
    private void TEST9_G_S3_exit()
    {
        // TEST9_G_S3 behavior
        // uml: exit / { trace("Exit TEST9_G_S3."); }
        {
            // Step 1: execute action `trace("Exit TEST9_G_S3.");`
            ____GilData_EchoStringVoid("MainClass.Trace(\"Exit TEST9_G_S3.\");");
        } // end of behavior for TEST9_G_S3
        
        this.stateId = StateId.TEST9_ROOT;
    }
    
    
    ////////////////////////////////////////////////////////////////////////////////
    // event handlers for state TEST9_G_S4
    ////////////////////////////////////////////////////////////////////////////////
    
    private void TEST9_G_S4_enter()
    {
        this.stateId = StateId.TEST9_G_S4;
        
        // TEST9_G_S4 behavior
        // uml: enter / { trace("Enter TEST9_G_S4."); }
        {
            // Step 1: execute action `trace("Enter TEST9_G_S4.");`
            ____GilData_EchoStringVoid("MainClass.Trace(\"Enter TEST9_G_S4.\");");
        } // end of behavior for TEST9_G_S4
    }
    
    private void TEST9_G_S4_exit()
    {
        // TEST9_G_S4 behavior
        // uml: exit / { trace("Exit TEST9_G_S4."); }
        {
            // Step 1: execute action `trace("Exit TEST9_G_S4.");`
            ____GilData_EchoStringVoid("MainClass.Trace(\"Exit TEST9_G_S4.\");");
        } // end of behavior for TEST9_G_S4
        
        this.stateId = StateId.TEST9_ROOT;
    }
    
    
    ////////////////////////////////////////////////////////////////////////////////
    // event handlers for state TEST9_S1
    ////////////////////////////////////////////////////////////////////////////////
    
    private void TEST9_S1_enter()
    {
        this.stateId = StateId.TEST9_S1;
        
        // TEST9_S1 behavior
        // uml: enter / { trace("Enter TEST9_S1."); }
        {
            // Step 1: execute action `trace("Enter TEST9_S1.");`
            ____GilData_EchoStringVoid("MainClass.Trace(\"Enter TEST9_S1.\");");
        } // end of behavior for TEST9_S1
    }
    
    private void TEST9_S1_exit()
    {
        // TEST9_S1 behavior
        // uml: exit / { trace("Exit TEST9_S1."); }
        {
            // Step 1: execute action `trace("Exit TEST9_S1.");`
            ____GilData_EchoStringVoid("MainClass.Trace(\"Exit TEST9_S1.\");");
        } // end of behavior for TEST9_S1
        
        this.stateId = StateId.TEST9_ROOT;
    }
    
    
    ////////////////////////////////////////////////////////////////////////////////
    // event handlers for state TEST9_S1_1
    ////////////////////////////////////////////////////////////////////////////////
    
    private void TEST9_S1_1_enter()
    {
        this.stateId = StateId.TEST9_S1_1;
        
        // TEST9_S1_1 behavior
        // uml: enter / { trace("Enter TEST9_S1_1."); }
        {
            // Step 1: execute action `trace("Enter TEST9_S1_1.");`
            ____GilData_EchoStringVoid("MainClass.Trace(\"Enter TEST9_S1_1.\");");
        } // end of behavior for TEST9_S1_1
        
        // TEST9_S1_1 behavior
        // uml: enter [trace_guard("State TEST9_S1_1: check behavior `enter / { clear_output(); }`.", true)] / { clear_output(); }
        if (____GilData_VarArgsToBool(____GilData_EchoStringBool("trace_guard(\"State TEST9_S1_1: check behavior `enter / { clear_output(); }`.\", true)")))
        {
            // Step 1: execute action `clear_output();`
            ____GilData_EchoStringVoid("MainClass.Trace(\"IGNORE_OUTPUT_BEFORE_THIS\");");
        } // end of behavior for TEST9_S1_1
    }
    
    private void TEST9_S1_1_exit()
    {
        // TEST9_S1_1 behavior
        // uml: exit / { trace("Exit TEST9_S1_1."); }
        {
            // Step 1: execute action `trace("Exit TEST9_S1_1.");`
            ____GilData_EchoStringVoid("MainClass.Trace(\"Exit TEST9_S1_1.\");");
        } // end of behavior for TEST9_S1_1
        
        this.stateId = StateId.TEST9_S1;
    }
    
    private void TEST9_S1_1_ev1()
    {
        // TEST9_S1_1 behavior
        // uml: EV1 [trace_guard("State TEST9_S1_1: check behavior `EV1 TransitionTo(TEST9_S1.<ExitPoint>(1))`.", true)] / { trace("Transition action `` for TEST9_S1_1 to TEST9_S1.<ExitPoint>(1)."); } TransitionTo(TEST9_S1.<ExitPoint>(1))
        if (____GilData_VarArgsToBool(____GilData_EchoStringBool("trace_guard(\"State TEST9_S1_1: check behavior `EV1 TransitionTo(TEST9_S1.<ExitPoint>(1))`.\", true)")))
        {
            // Step 1: Exit states until we reach `TEST9_S1` state (Least Common Ancestor for transition).
            this.TEST9_S1_1_exit();
            
            // Step 2: Transition action: `trace("Transition action `` for TEST9_S1_1 to TEST9_S1.<ExitPoint>(1).");`.
            ____GilData_EchoStringVoid("MainClass.Trace(\"Transition action `` for TEST9_S1_1 to TEST9_S1.<ExitPoint>(1).\");");
            
            // Step 3: Enter/move towards transition target `TEST9_S1.<ExitPoint>(1)`.
            // TEST9_S1.<ExitPoint>(1) is a pseudo state and cannot have an `enter` trigger.
            
            // TEST9_S1.<ExitPoint>(1) behavior
            // uml: [count == 4] / { trace("Transition action `` for TEST9_S1.<ExitPoint>(1) to TEST9_G_S4."); } TransitionTo(TEST9_G_S4)
            if (____GilData_VarArgsToBool(____GilData_EchoStringBool("this.vars.count == 4")))
            {
                // Step 1: Exit states until we reach `TEST9_ROOT` state (Least Common Ancestor for transition).
                this.TEST9_S1_exit();
                
                // Step 2: Transition action: `trace("Transition action `` for TEST9_S1.<ExitPoint>(1) to TEST9_G_S4.");`.
                ____GilData_EchoStringVoid("MainClass.Trace(\"Transition action `` for TEST9_S1.<ExitPoint>(1) to TEST9_G_S4.\");");
                
                // Step 3: Enter/move towards transition target `TEST9_G_S4`.
                this.TEST9_G_S4_enter();
                
                // Step 4: complete transition. Ends event dispatch. No other behaviors are checked.
                return;
            } // end of behavior for TEST9_S1.<ExitPoint>(1)
            
            // TEST9_S1.<ExitPoint>(1) behavior
            // uml: [count == 1] / { trace("Transition action `` for TEST9_S1.<ExitPoint>(1) to TEST9_G_S1."); } TransitionTo(TEST9_G_S1)
            if (____GilData_VarArgsToBool(____GilData_EchoStringBool("this.vars.count == 1")))
            {
                // Step 1: Exit states until we reach `TEST9_ROOT` state (Least Common Ancestor for transition).
                this.TEST9_S1_exit();
                
                // Step 2: Transition action: `trace("Transition action `` for TEST9_S1.<ExitPoint>(1) to TEST9_G_S1.");`.
                ____GilData_EchoStringVoid("MainClass.Trace(\"Transition action `` for TEST9_S1.<ExitPoint>(1) to TEST9_G_S1.\");");
                
                // Step 3: Enter/move towards transition target `TEST9_G_S1`.
                this.TEST9_G_S1_enter();
                
                // Step 4: complete transition. Ends event dispatch. No other behaviors are checked.
                return;
            } // end of behavior for TEST9_S1.<ExitPoint>(1)
            
            // TEST9_S1.<ExitPoint>(1) behavior
            // uml: [count == 2] / { trace("Transition action `` for TEST9_S1.<ExitPoint>(1) to TEST9_G_S2."); } TransitionTo(TEST9_G_S2)
            if (____GilData_VarArgsToBool(____GilData_EchoStringBool("this.vars.count == 2")))
            {
                // Step 1: Exit states until we reach `TEST9_ROOT` state (Least Common Ancestor for transition).
                this.TEST9_S1_exit();
                
                // Step 2: Transition action: `trace("Transition action `` for TEST9_S1.<ExitPoint>(1) to TEST9_G_S2.");`.
                ____GilData_EchoStringVoid("MainClass.Trace(\"Transition action `` for TEST9_S1.<ExitPoint>(1) to TEST9_G_S2.\");");
                
                // Step 3: Enter/move towards transition target `TEST9_G_S2`.
                this.TEST9_G_S2_enter();
                
                // Step 4: complete transition. Ends event dispatch. No other behaviors are checked.
                return;
            } // end of behavior for TEST9_S1.<ExitPoint>(1)
            
            // TEST9_S1.<ExitPoint>(1) behavior
            // uml: else / { trace("Transition action `` for TEST9_S1.<ExitPoint>(1) to TEST9_G_S3."); } TransitionTo(TEST9_G_S3)
            {
                // Step 1: Exit states until we reach `TEST9_ROOT` state (Least Common Ancestor for transition).
                this.TEST9_S1_exit();
                
                // Step 2: Transition action: `trace("Transition action `` for TEST9_S1.<ExitPoint>(1) to TEST9_G_S3.");`.
                ____GilData_EchoStringVoid("MainClass.Trace(\"Transition action `` for TEST9_S1.<ExitPoint>(1) to TEST9_G_S3.\");");
                
                // Step 3: Enter/move towards transition target `TEST9_G_S3`.
                this.TEST9_G_S3_enter();
                
                // Step 4: complete transition. Ends event dispatch. No other behaviors are checked.
                return;
            } // end of behavior for TEST9_S1.<ExitPoint>(1)
        } // end of behavior for TEST9_S1_1
        
        // No ancestor handles this event.
    }
    
    
    ////////////////////////////////////////////////////////////////////////////////
    // event handlers for state TEST9A_ROOT
    ////////////////////////////////////////////////////////////////////////////////
    
    private void TEST9A_ROOT_enter()
    {
        this.stateId = StateId.TEST9A_ROOT;
        
        // TEST9A_ROOT behavior
        // uml: enter / { trace("Enter TEST9A_ROOT."); }
        {
            // Step 1: execute action `trace("Enter TEST9A_ROOT.");`
            ____GilData_EchoStringVoid("MainClass.Trace(\"Enter TEST9A_ROOT.\");");
        } // end of behavior for TEST9A_ROOT
    }
    
    private void TEST9A_ROOT_exit()
    {
        // TEST9A_ROOT behavior
        // uml: exit / { trace("Exit TEST9A_ROOT."); }
        {
            // Step 1: execute action `trace("Exit TEST9A_ROOT.");`
            ____GilData_EchoStringVoid("MainClass.Trace(\"Exit TEST9A_ROOT.\");");
        } // end of behavior for TEST9A_ROOT
        
        this.stateId = StateId.TEST9_EXIT_CHOICE;
    }
    
    
    ////////////////////////////////////////////////////////////////////////////////
    // event handlers for state TEST9A_S1
    ////////////////////////////////////////////////////////////////////////////////
    
    private void TEST9A_S1_enter()
    {
        this.stateId = StateId.TEST9A_S1;
        
        // TEST9A_S1 behavior
        // uml: enter / { trace("Enter TEST9A_S1."); }
        {
            // Step 1: execute action `trace("Enter TEST9A_S1.");`
            ____GilData_EchoStringVoid("MainClass.Trace(\"Enter TEST9A_S1.\");");
        } // end of behavior for TEST9A_S1
    }
    
    private void TEST9A_S1_exit()
    {
        // TEST9A_S1 behavior
        // uml: exit / { trace("Exit TEST9A_S1."); }
        {
            // Step 1: execute action `trace("Exit TEST9A_S1.");`
            ____GilData_EchoStringVoid("MainClass.Trace(\"Exit TEST9A_S1.\");");
        } // end of behavior for TEST9A_S1
        
        this.stateId = StateId.TEST9A_ROOT;
    }
    
    private void TEST9A_S1_InitialState_transition()
    {
        // TEST9A_S1.<InitialState> behavior
        // uml: / { trace("Transition action `` for TEST9A_S1.<InitialState> to TEST9A_S1_1."); } TransitionTo(TEST9A_S1_1)
        {
            // Step 1: Exit states until we reach `TEST9A_S1` state (Least Common Ancestor for transition). Already at LCA, no exiting required.
            
            // Step 2: Transition action: `trace("Transition action `` for TEST9A_S1.<InitialState> to TEST9A_S1_1.");`.
            ____GilData_EchoStringVoid("MainClass.Trace(\"Transition action `` for TEST9A_S1.<InitialState> to TEST9A_S1_1.\");");
            
            // Step 3: Enter/move towards transition target `TEST9A_S1_1`.
            this.TEST9A_S1_1_enter();
            
            // Step 4: complete transition. Ends event dispatch. No other behaviors are checked.
            return;
        } // end of behavior for TEST9A_S1.<InitialState>
    }
    
    
    ////////////////////////////////////////////////////////////////////////////////
    // event handlers for state TEST9A_S1_1
    ////////////////////////////////////////////////////////////////////////////////
    
    private void TEST9A_S1_1_enter()
    {
        this.stateId = StateId.TEST9A_S1_1;
        
        // TEST9A_S1_1 behavior
        // uml: enter / { trace("Enter TEST9A_S1_1."); }
        {
            // Step 1: execute action `trace("Enter TEST9A_S1_1.");`
            ____GilData_EchoStringVoid("MainClass.Trace(\"Enter TEST9A_S1_1.\");");
        } // end of behavior for TEST9A_S1_1
        
        // TEST9A_S1_1 behavior
        // uml: enter [trace_guard("State TEST9A_S1_1: check behavior `enter [count == 0] / { clear_output(); }`.", count == 0)] / { clear_output(); }
        if (____GilData_VarArgsToBool(____GilData_EchoStringBool("trace_guard(\"State TEST9A_S1_1: check behavior `enter [count == 0] / { clear_output(); }`.\", this.vars.count == 0)")))
        {
            // Step 1: execute action `clear_output();`
            ____GilData_EchoStringVoid("MainClass.Trace(\"IGNORE_OUTPUT_BEFORE_THIS\");");
        } // end of behavior for TEST9A_S1_1
    }
    
    private void TEST9A_S1_1_exit()
    {
        // TEST9A_S1_1 behavior
        // uml: exit / { trace("Exit TEST9A_S1_1."); }
        {
            // Step 1: execute action `trace("Exit TEST9A_S1_1.");`
            ____GilData_EchoStringVoid("MainClass.Trace(\"Exit TEST9A_S1_1.\");");
        } // end of behavior for TEST9A_S1_1
        
        // TEST9A_S1_1 behavior
        // uml: exit [trace_guard("State TEST9A_S1_1: check behavior `exit / { count = 100; }`.", true)] / { count = 100; }
        if (____GilData_VarArgsToBool(____GilData_EchoStringBool("trace_guard(\"State TEST9A_S1_1: check behavior `exit / { count = 100; }`.\", true)")))
        {
            // Step 1: execute action `count = 100;`
            ____GilData_EchoStringVoid("this.vars.count = 100;");
        } // end of behavior for TEST9A_S1_1
        
        this.stateId = StateId.TEST9A_S1;
    }
    
    private void TEST9A_S1_1_ev1()
    {
        // TEST9A_S1_1 behavior
        // uml: EV1 [trace_guard("State TEST9A_S1_1: check behavior `EV1 TransitionTo(TEST9A_S1.<ExitPoint>(1))`.", true)] / { trace("Transition action `` for TEST9A_S1_1 to TEST9A_S1.<ExitPoint>(1)."); } TransitionTo(TEST9A_S1.<ExitPoint>(1))
        if (____GilData_VarArgsToBool(____GilData_EchoStringBool("trace_guard(\"State TEST9A_S1_1: check behavior `EV1 TransitionTo(TEST9A_S1.<ExitPoint>(1))`.\", true)")))
        {
            // Step 1: Exit states until we reach `TEST9A_S1` state (Least Common Ancestor for transition).
            this.TEST9A_S1_1_exit();
            
            // Step 2: Transition action: `trace("Transition action `` for TEST9A_S1_1 to TEST9A_S1.<ExitPoint>(1).");`.
            ____GilData_EchoStringVoid("MainClass.Trace(\"Transition action `` for TEST9A_S1_1 to TEST9A_S1.<ExitPoint>(1).\");");
            
            // Step 3: Enter/move towards transition target `TEST9A_S1.<ExitPoint>(1)`.
            // TEST9A_S1.<ExitPoint>(1) is a pseudo state and cannot have an `enter` trigger.
            
            // TEST9A_S1.<ExitPoint>(1) behavior
            // uml: [true] / { trace("Transition action `count++;` for TEST9A_S1.<ExitPoint>(1) to TEST9A_S1.");\ncount++; } TransitionTo(TEST9A_S1)
            if (____GilData_VarArgsToBool(____GilData_EchoStringBool("true")))
            {
                // Step 1: Exit states until we reach `TEST9A_S1` state (Least Common Ancestor for transition).
                this.TEST9A_S1_exit();
                
                // Step 2: Transition action: `trace("Transition action `count++;` for TEST9A_S1.<ExitPoint>(1) to TEST9A_S1.");\ncount++;`.
                ____GilData_EchoStringVoid("MainClass.Trace(\"Transition action `count++;` for TEST9A_S1.<ExitPoint>(1) to TEST9A_S1.\");");
                ____GilData_EchoStringVoid("this.vars.count++;");
                
                // Step 3: Enter/move towards transition target `TEST9A_S1`.
                // Already in target. No entering required.
                // Finish transition by calling pseudo state transition function.
                this.TEST9A_S1_InitialState_transition();
                return; // event processing immediately stops when a transition finishes. No other behaviors for this state are checked.
            } // end of behavior for TEST9A_S1.<ExitPoint>(1)
        } // end of behavior for TEST9A_S1_1
        
        // No ancestor handles this event.
    }
    
    
    ////////////////////////////////////////////////////////////////////////////////
    // event handlers for state TEST9B_ROOT
    ////////////////////////////////////////////////////////////////////////////////
    
    private void TEST9B_ROOT_enter()
    {
        this.stateId = StateId.TEST9B_ROOT;
        
        // TEST9B_ROOT behavior
        // uml: enter / { trace("Enter TEST9B_ROOT."); }
        {
            // Step 1: execute action `trace("Enter TEST9B_ROOT.");`
            ____GilData_EchoStringVoid("MainClass.Trace(\"Enter TEST9B_ROOT.\");");
        } // end of behavior for TEST9B_ROOT
        
        // TEST9B_ROOT behavior
        // uml: enter [trace_guard("State TEST9B_ROOT: check behavior `enter / { clear_output(); }`.", true)] / { clear_output(); }
        if (____GilData_VarArgsToBool(____GilData_EchoStringBool("trace_guard(\"State TEST9B_ROOT: check behavior `enter / { clear_output(); }`.\", true)")))
        {
            // Step 1: execute action `clear_output();`
            ____GilData_EchoStringVoid("MainClass.Trace(\"IGNORE_OUTPUT_BEFORE_THIS\");");
        } // end of behavior for TEST9B_ROOT
    }
    
    private void TEST9B_ROOT_exit()
    {
        // TEST9B_ROOT behavior
        // uml: exit / { trace("Exit TEST9B_ROOT."); }
        {
            // Step 1: execute action `trace("Exit TEST9B_ROOT.");`
            ____GilData_EchoStringVoid("MainClass.Trace(\"Exit TEST9B_ROOT.\");");
        } // end of behavior for TEST9B_ROOT
        
        this.stateId = StateId.TEST9_EXIT_CHOICE;
    }
    
    private void TEST9B_ROOT_ev1()
    {
        // TEST9B_ROOT behavior
        // uml: EV1 [trace_guard("State TEST9B_ROOT: check behavior `EV1 TransitionTo(TEST9B_ROOT__A4)`.", true)] / { trace("Transition action `` for TEST9B_ROOT to TEST9B_ROOT__A4."); } TransitionTo(TEST9B_ROOT__A4)
        if (____GilData_VarArgsToBool(____GilData_EchoStringBool("trace_guard(\"State TEST9B_ROOT: check behavior `EV1 TransitionTo(TEST9B_ROOT__A4)`.\", true)")))
        {
            // Step 1: Exit states until we reach `TEST9B_ROOT` state (Least Common Ancestor for transition).
            this.ExitUpToStateHandler(StateId.TEST9B_ROOT);
            
            // Step 2: Transition action: `trace("Transition action `` for TEST9B_ROOT to TEST9B_ROOT__A4.");`.
            ____GilData_EchoStringVoid("MainClass.Trace(\"Transition action `` for TEST9B_ROOT to TEST9B_ROOT__A4.\");");
            
            // Step 3: Enter/move towards transition target `TEST9B_ROOT__A4`.
            this.TEST9B_ROOT__A1_enter();
            this.TEST9B_ROOT__A2_enter();
            this.TEST9B_ROOT__A3_enter();
            this.TEST9B_ROOT__A4_enter();
            
            // Step 4: complete transition. Ends event dispatch. No other behaviors are checked.
            return;
        } // end of behavior for TEST9B_ROOT
        
        // No ancestor handles this event.
    }
    
    
    ////////////////////////////////////////////////////////////////////////////////
    // event handlers for state TEST9B_ROOT__A1
    ////////////////////////////////////////////////////////////////////////////////
    
    private void TEST9B_ROOT__A1_enter()
    {
        this.stateId = StateId.TEST9B_ROOT__A1;
        
        // TEST9B_ROOT__A1 behavior
        // uml: enter / { trace("Enter TEST9B_ROOT__A1."); }
        {
            // Step 1: execute action `trace("Enter TEST9B_ROOT__A1.");`
            ____GilData_EchoStringVoid("MainClass.Trace(\"Enter TEST9B_ROOT__A1.\");");
        } // end of behavior for TEST9B_ROOT__A1
    }
    
    private void TEST9B_ROOT__A1_exit()
    {
        // TEST9B_ROOT__A1 behavior
        // uml: exit / { trace("Exit TEST9B_ROOT__A1."); }
        {
            // Step 1: execute action `trace("Exit TEST9B_ROOT__A1.");`
            ____GilData_EchoStringVoid("MainClass.Trace(\"Exit TEST9B_ROOT__A1.\");");
        } // end of behavior for TEST9B_ROOT__A1
        
        this.stateId = StateId.TEST9B_ROOT;
    }
    
    
    ////////////////////////////////////////////////////////////////////////////////
    // event handlers for state TEST9B_ROOT__A2
    ////////////////////////////////////////////////////////////////////////////////
    
    private void TEST9B_ROOT__A2_enter()
    {
        this.stateId = StateId.TEST9B_ROOT__A2;
        
        // TEST9B_ROOT__A2 behavior
        // uml: enter / { trace("Enter TEST9B_ROOT__A2."); }
        {
            // Step 1: execute action `trace("Enter TEST9B_ROOT__A2.");`
            ____GilData_EchoStringVoid("MainClass.Trace(\"Enter TEST9B_ROOT__A2.\");");
        } // end of behavior for TEST9B_ROOT__A2
    }
    
    private void TEST9B_ROOT__A2_exit()
    {
        // TEST9B_ROOT__A2 behavior
        // uml: exit / { trace("Exit TEST9B_ROOT__A2."); }
        {
            // Step 1: execute action `trace("Exit TEST9B_ROOT__A2.");`
            ____GilData_EchoStringVoid("MainClass.Trace(\"Exit TEST9B_ROOT__A2.\");");
        } // end of behavior for TEST9B_ROOT__A2
        
        this.stateId = StateId.TEST9B_ROOT__A1;
    }
    
    
    ////////////////////////////////////////////////////////////////////////////////
    // event handlers for state TEST9B_ROOT__A3
    ////////////////////////////////////////////////////////////////////////////////
    
    private void TEST9B_ROOT__A3_enter()
    {
        this.stateId = StateId.TEST9B_ROOT__A3;
        
        // TEST9B_ROOT__A3 behavior
        // uml: enter / { trace("Enter TEST9B_ROOT__A3."); }
        {
            // Step 1: execute action `trace("Enter TEST9B_ROOT__A3.");`
            ____GilData_EchoStringVoid("MainClass.Trace(\"Enter TEST9B_ROOT__A3.\");");
        } // end of behavior for TEST9B_ROOT__A3
    }
    
    private void TEST9B_ROOT__A3_exit()
    {
        // TEST9B_ROOT__A3 behavior
        // uml: exit / { trace("Exit TEST9B_ROOT__A3."); }
        {
            // Step 1: execute action `trace("Exit TEST9B_ROOT__A3.");`
            ____GilData_EchoStringVoid("MainClass.Trace(\"Exit TEST9B_ROOT__A3.\");");
        } // end of behavior for TEST9B_ROOT__A3
        
        this.stateId = StateId.TEST9B_ROOT__A2;
    }
    
    
    ////////////////////////////////////////////////////////////////////////////////
    // event handlers for state TEST9B_ROOT__A4
    ////////////////////////////////////////////////////////////////////////////////
    
    private void TEST9B_ROOT__A4_enter()
    {
        this.stateId = StateId.TEST9B_ROOT__A4;
        
        // TEST9B_ROOT__A4 behavior
        // uml: enter / { trace("Enter TEST9B_ROOT__A4."); }
        {
            // Step 1: execute action `trace("Enter TEST9B_ROOT__A4.");`
            ____GilData_EchoStringVoid("MainClass.Trace(\"Enter TEST9B_ROOT__A4.\");");
        } // end of behavior for TEST9B_ROOT__A4
    }
    
    private void TEST9B_ROOT__A4_exit()
    {
        // TEST9B_ROOT__A4 behavior
        // uml: exit / { trace("Exit TEST9B_ROOT__A4."); }
        {
            // Step 1: execute action `trace("Exit TEST9B_ROOT__A4.");`
            ____GilData_EchoStringVoid("MainClass.Trace(\"Exit TEST9B_ROOT__A4.\");");
        } // end of behavior for TEST9B_ROOT__A4
        
        this.stateId = StateId.TEST9B_ROOT__A3;
    }
    
    private void TEST9B_ROOT__A4_ev1()
    {
        bool consume_event = false;
        
        // TEST9B_ROOT__A4 behavior
        // uml: EV1 [trace_guard("State TEST9B_ROOT__A4: check behavior `EV1 TransitionTo(TEST9B_ROOT__A3.<ExitPoint>(1))`.", true)] / { trace("Transition action `` for TEST9B_ROOT__A4 to TEST9B_ROOT__A3.<ExitPoint>(1)."); } TransitionTo(TEST9B_ROOT__A3.<ExitPoint>(1))
        if (____GilData_VarArgsToBool(____GilData_EchoStringBool("trace_guard(\"State TEST9B_ROOT__A4: check behavior `EV1 TransitionTo(TEST9B_ROOT__A3.<ExitPoint>(1))`.\", true)")))
        {
            // Step 1: Exit states until we reach `TEST9B_ROOT__A3` state (Least Common Ancestor for transition).
            this.TEST9B_ROOT__A4_exit();
            
            // Step 2: Transition action: `trace("Transition action `` for TEST9B_ROOT__A4 to TEST9B_ROOT__A3.<ExitPoint>(1).");`.
            ____GilData_EchoStringVoid("MainClass.Trace(\"Transition action `` for TEST9B_ROOT__A4 to TEST9B_ROOT__A3.<ExitPoint>(1).\");");
            
            // Step 3: Enter/move towards transition target `TEST9B_ROOT__A3.<ExitPoint>(1)`.
            // TEST9B_ROOT__A3.<ExitPoint>(1) is a pseudo state and cannot have an `enter` trigger.
            
            // TEST9B_ROOT__A3.<ExitPoint>(1) behavior
            // uml: / { trace("Transition action `` for TEST9B_ROOT__A3.<ExitPoint>(1) to TEST9B_ROOT__B4."); } TransitionTo(TEST9B_ROOT__B4)
            {
                // Step 1: Exit states until we reach `TEST9B_ROOT` state (Least Common Ancestor for transition).
                this.ExitUpToStateHandler(StateId.TEST9B_ROOT);
                
                // Step 2: Transition action: `trace("Transition action `` for TEST9B_ROOT__A3.<ExitPoint>(1) to TEST9B_ROOT__B4.");`.
                ____GilData_EchoStringVoid("MainClass.Trace(\"Transition action `` for TEST9B_ROOT__A3.<ExitPoint>(1) to TEST9B_ROOT__B4.\");");
                
                // Step 3: Enter/move towards transition target `TEST9B_ROOT__B4`.
                this.TEST9B_ROOT__B1_enter();
                this.TEST9B_ROOT__B2_enter();
                this.TEST9B_ROOT__B3_enter();
                this.TEST9B_ROOT__B4_enter();
                
                // Step 4: complete transition. Ends event dispatch. No other behaviors are checked.
                return;
            } // end of behavior for TEST9B_ROOT__A3.<ExitPoint>(1)
        } // end of behavior for TEST9B_ROOT__A4
        
        // Check if event has been consumed before calling ancestor handler.
        if (!consume_event)
        {
            this.TEST9B_ROOT_ev1();
        }
    }
    
    
    ////////////////////////////////////////////////////////////////////////////////
    // event handlers for state TEST9B_ROOT__B1
    ////////////////////////////////////////////////////////////////////////////////
    
    private void TEST9B_ROOT__B1_enter()
    {
        this.stateId = StateId.TEST9B_ROOT__B1;
        
        // TEST9B_ROOT__B1 behavior
        // uml: enter / { trace("Enter TEST9B_ROOT__B1."); }
        {
            // Step 1: execute action `trace("Enter TEST9B_ROOT__B1.");`
            ____GilData_EchoStringVoid("MainClass.Trace(\"Enter TEST9B_ROOT__B1.\");");
        } // end of behavior for TEST9B_ROOT__B1
    }
    
    private void TEST9B_ROOT__B1_exit()
    {
        // TEST9B_ROOT__B1 behavior
        // uml: exit / { trace("Exit TEST9B_ROOT__B1."); }
        {
            // Step 1: execute action `trace("Exit TEST9B_ROOT__B1.");`
            ____GilData_EchoStringVoid("MainClass.Trace(\"Exit TEST9B_ROOT__B1.\");");
        } // end of behavior for TEST9B_ROOT__B1
        
        this.stateId = StateId.TEST9B_ROOT;
    }
    
    
    ////////////////////////////////////////////////////////////////////////////////
    // event handlers for state TEST9B_ROOT__B2
    ////////////////////////////////////////////////////////////////////////////////
    
    private void TEST9B_ROOT__B2_enter()
    {
        this.stateId = StateId.TEST9B_ROOT__B2;
        
        // TEST9B_ROOT__B2 behavior
        // uml: enter / { trace("Enter TEST9B_ROOT__B2."); }
        {
            // Step 1: execute action `trace("Enter TEST9B_ROOT__B2.");`
            ____GilData_EchoStringVoid("MainClass.Trace(\"Enter TEST9B_ROOT__B2.\");");
        } // end of behavior for TEST9B_ROOT__B2
    }
    
    private void TEST9B_ROOT__B2_exit()
    {
        // TEST9B_ROOT__B2 behavior
        // uml: exit / { trace("Exit TEST9B_ROOT__B2."); }
        {
            // Step 1: execute action `trace("Exit TEST9B_ROOT__B2.");`
            ____GilData_EchoStringVoid("MainClass.Trace(\"Exit TEST9B_ROOT__B2.\");");
        } // end of behavior for TEST9B_ROOT__B2
        
        this.stateId = StateId.TEST9B_ROOT__B1;
    }
    
    
    ////////////////////////////////////////////////////////////////////////////////
    // event handlers for state TEST9B_ROOT__B3
    ////////////////////////////////////////////////////////////////////////////////
    
    private void TEST9B_ROOT__B3_enter()
    {
        this.stateId = StateId.TEST9B_ROOT__B3;
        
        // TEST9B_ROOT__B3 behavior
        // uml: enter / { trace("Enter TEST9B_ROOT__B3."); }
        {
            // Step 1: execute action `trace("Enter TEST9B_ROOT__B3.");`
            ____GilData_EchoStringVoid("MainClass.Trace(\"Enter TEST9B_ROOT__B3.\");");
        } // end of behavior for TEST9B_ROOT__B3
    }
    
    private void TEST9B_ROOT__B3_exit()
    {
        // TEST9B_ROOT__B3 behavior
        // uml: exit / { trace("Exit TEST9B_ROOT__B3."); }
        {
            // Step 1: execute action `trace("Exit TEST9B_ROOT__B3.");`
            ____GilData_EchoStringVoid("MainClass.Trace(\"Exit TEST9B_ROOT__B3.\");");
        } // end of behavior for TEST9B_ROOT__B3
        
        this.stateId = StateId.TEST9B_ROOT__B2;
    }
    
    
    ////////////////////////////////////////////////////////////////////////////////
    // event handlers for state TEST9B_ROOT__B4
    ////////////////////////////////////////////////////////////////////////////////
    
    private void TEST9B_ROOT__B4_enter()
    {
        this.stateId = StateId.TEST9B_ROOT__B4;
        
        // TEST9B_ROOT__B4 behavior
        // uml: enter / { trace("Enter TEST9B_ROOT__B4."); }
        {
            // Step 1: execute action `trace("Enter TEST9B_ROOT__B4.");`
            ____GilData_EchoStringVoid("MainClass.Trace(\"Enter TEST9B_ROOT__B4.\");");
        } // end of behavior for TEST9B_ROOT__B4
    }
    
    private void TEST9B_ROOT__B4_exit()
    {
        // TEST9B_ROOT__B4 behavior
        // uml: exit / { trace("Exit TEST9B_ROOT__B4."); }
        {
            // Step 1: execute action `trace("Exit TEST9B_ROOT__B4.");`
            ____GilData_EchoStringVoid("MainClass.Trace(\"Exit TEST9B_ROOT__B4.\");");
        } // end of behavior for TEST9B_ROOT__B4
        
        this.stateId = StateId.TEST9B_ROOT__B3;
    }
    
    
    ////////////////////////////////////////////////////////////////////////////////
    // event handlers for state UNREACHABLE
    ////////////////////////////////////////////////////////////////////////////////
    
    private void UNREACHABLE_enter()
    {
        this.stateId = StateId.UNREACHABLE;
        
        // UNREACHABLE behavior
        // uml: enter / { trace("Enter UNREACHABLE."); }
        {
            // Step 1: execute action `trace("Enter UNREACHABLE.");`
            ____GilData_EchoStringVoid("MainClass.Trace(\"Enter UNREACHABLE.\");");
        } // end of behavior for UNREACHABLE
    }
    
    private void UNREACHABLE_exit()
    {
        // UNREACHABLE behavior
        // uml: exit / { trace("Exit UNREACHABLE."); }
        {
            // Step 1: execute action `trace("Exit UNREACHABLE.");`
            ____GilData_EchoStringVoid("MainClass.Trace(\"Exit UNREACHABLE.\");");
        } // end of behavior for UNREACHABLE
        
        this.stateId = StateId.ROOT;
    }
    
    
    ////////////////////////////////////////////////////////////////////////////////
    // event handlers for state USELESS
    ////////////////////////////////////////////////////////////////////////////////
    
    private void USELESS_enter()
    {
        this.stateId = StateId.USELESS;
        
        // USELESS behavior
        // uml: enter / { trace("Enter USELESS."); }
        {
            // Step 1: execute action `trace("Enter USELESS.");`
            ____GilData_EchoStringVoid("MainClass.Trace(\"Enter USELESS.\");");
        } // end of behavior for USELESS
    }
    
    private void USELESS_exit()
    {
        // USELESS behavior
        // uml: exit / { trace("Exit USELESS."); }
        {
            // Step 1: execute action `trace("Exit USELESS.");`
            ____GilData_EchoStringVoid("MainClass.Trace(\"Exit USELESS.\");");
        } // end of behavior for USELESS
        
        this.stateId = StateId.ROOT;
    }
    
    // Thread safe.
    public static string StateIdToString(StateId id)
    {
        switch (id)
        {
            case StateId.ROOT: return "ROOT";
            case StateId.PREFIXING: return "PREFIXING";
            case StateId.PREFIXING__ORDER_MENU: return "PREFIXING__ORDER_MENU";
            case StateId.PREFIXING__OM__BEVERAGE: return "PREFIXING__OM__BEVERAGE";
            case StateId.PREFIXING__OM__BEV__NONE: return "PREFIXING__OM__BEV__NONE";
            case StateId.PREFIXING__OM__BEV__TEA: return "PREFIXING__OM__BEV__TEA";
            case StateId.PREFIXING__OM__BEV__WATER: return "PREFIXING__OM__BEV__WATER";
            case StateId.PREFIXING__OM__VEG: return "PREFIXING__OM__VEG";
            case StateId.PREFIXING__OM__VEG__NONE: return "PREFIXING__OM__VEG__NONE";
            case StateId.PREFIXING__OM__VEG__POTATO: return "PREFIXING__OM__VEG__POTATO";
            case StateId.PREFIXING__OM__VEG__YAM: return "PREFIXING__OM__VEG__YAM";
            case StateId.PREFIXING__SHOWS_MANUAL_PREFIX: return "PREFIXING__SHOWS_MANUAL_PREFIX";
            case StateId.PREFIXING__SHOWS_MANUAL_PREFIX__ORDER_MENU: return "PREFIXING__SHOWS_MANUAL_PREFIX__ORDER_MENU";
            case StateId.PREFIXING__SHOWS_MANUAL_PREFIX__OM_BEVERAGE: return "PREFIXING__SHOWS_MANUAL_PREFIX__OM_BEVERAGE";
            case StateId.PREFIXING__SHOWS_MANUAL_PREFIX__OM_BEV_NONE: return "PREFIXING__SHOWS_MANUAL_PREFIX__OM_BEV_NONE";
            case StateId.PREFIXING__SHOWS_MANUAL_PREFIX__OM_BEV_TEA: return "PREFIXING__SHOWS_MANUAL_PREFIX__OM_BEV_TEA";
            case StateId.PREFIXING__SHOWS_MANUAL_PREFIX__OM_BEV_WATER: return "PREFIXING__SHOWS_MANUAL_PREFIX__OM_BEV_WATER";
            case StateId.PREFIXING__SHOWS_MANUAL_PREFIX__OM_VEG: return "PREFIXING__SHOWS_MANUAL_PREFIX__OM_VEG";
            case StateId.PREFIXING__SHOWS_MANUAL_PREFIX__OM_VEG_NONE: return "PREFIXING__SHOWS_MANUAL_PREFIX__OM_VEG_NONE";
            case StateId.PREFIXING__SHOWS_MANUAL_PREFIX__OM_VEG_POTATO: return "PREFIXING__SHOWS_MANUAL_PREFIX__OM_VEG_POTATO";
            case StateId.PREFIXING__SHOWS_MANUAL_PREFIX__OM_VEG_YAM: return "PREFIXING__SHOWS_MANUAL_PREFIX__OM_VEG_YAM";
            case StateId.SPEC2SM__DECIDE: return "SPEC2SM__DECIDE";
            case StateId.TEST1_DO_EVENT_TESTING: return "TEST1_DO_EVENT_TESTING";
            case StateId.TEST1_ROOT: return "TEST1_ROOT";
            case StateId.TEST1_S1: return "TEST1_S1";
            case StateId.TEST1_S1_1: return "TEST1_S1_1";
            case StateId.TEST1_S2: return "TEST1_S2";
            case StateId.TEST10_CHOICE_POINT: return "TEST10_CHOICE_POINT";
            case StateId.TEST10_A: return "TEST10_A";
            case StateId.TEST10_A_1: return "TEST10_A_1";
            case StateId.TEST10_ROOT: return "TEST10_ROOT";
            case StateId.TEST10_G: return "TEST10_G";
            case StateId.TEST10_G_S0: return "TEST10_G_S0";
            case StateId.TEST10_G_S1: return "TEST10_G_S1";
            case StateId.TEST10_G_S2: return "TEST10_G_S2";
            case StateId.TEST10_G_S3: return "TEST10_G_S3";
            case StateId.TEST10_S1: return "TEST10_S1";
            case StateId.TEST10_S4: return "TEST10_S4";
            case StateId.TEST2_REGULAR_EVENT_TESTING: return "TEST2_REGULAR_EVENT_TESTING";
            case StateId.TEST2_ROOT: return "TEST2_ROOT";
            case StateId.TEST2_S1: return "TEST2_S1";
            case StateId.TEST2_S1_1: return "TEST2_S1_1";
            case StateId.TEST2_S2: return "TEST2_S2";
            case StateId.TEST3_BEHAVIOR_ORDERING: return "TEST3_BEHAVIOR_ORDERING";
            case StateId.TEST3_ROOT: return "TEST3_ROOT";
            case StateId.TEST3_S1: return "TEST3_S1";
            case StateId.TEST3_S2: return "TEST3_S2";
            case StateId.TEST3_S3: return "TEST3_S3";
            case StateId.TEST4_PARENT_CHILD_TRANSITIONS: return "TEST4_PARENT_CHILD_TRANSITIONS";
            case StateId.TEST4_B_AND_OTHERS: return "TEST4_B_AND_OTHERS";
            case StateId.TEST4B_LOCAL: return "TEST4B_LOCAL";
            case StateId.TEST4B_G: return "TEST4B_G";
            case StateId.TEST4B_G_1: return "TEST4B_G_1";
            case StateId.TEST4C_LOCAL_TO_ALIAS: return "TEST4C_LOCAL_TO_ALIAS";
            case StateId.TEST4C_G: return "TEST4C_G";
            case StateId.TEST4C_G_1: return "TEST4C_G_1";
            case StateId.TEST4D_EXTERNAL: return "TEST4D_EXTERNAL";
            case StateId.TEST4D_G: return "TEST4D_G";
            case StateId.TEST4D_G_1: return "TEST4D_G_1";
            case StateId.TEST4_DECIDE: return "TEST4_DECIDE";
            case StateId.TEST4_ROOT: return "TEST4_ROOT";
            case StateId.TEST4_S1: return "TEST4_S1";
            case StateId.TEST4_S10: return "TEST4_S10";
            case StateId.TEST4_S10_1: return "TEST4_S10_1";
            case StateId.TEST4_S2: return "TEST4_S2";
            case StateId.TEST4_S20: return "TEST4_S20";
            case StateId.TEST4_S20_1: return "TEST4_S20_1";
            case StateId.TEST4_S3: return "TEST4_S3";
            case StateId.TEST5_PARENT_CHILD_TRANSITIONS_ALIAS: return "TEST5_PARENT_CHILD_TRANSITIONS_ALIAS";
            case StateId.TEST5_ROOT: return "TEST5_ROOT";
            case StateId.TEST5_S1: return "TEST5_S1";
            case StateId.TEST5_S2: return "TEST5_S2";
            case StateId.TEST5_S3: return "TEST5_S3";
            case StateId.TEST6_VARS_EXPANSIONS: return "TEST6_VARS_EXPANSIONS";
            case StateId.TEST6_ROOT: return "TEST6_ROOT";
            case StateId.AUTO_VAR_TEST: return "AUTO_VAR_TEST";
            case StateId.AUTO_VAR_TEST__S1: return "AUTO_VAR_TEST__S1";
            case StateId.AUTO_VAR_TEST__S2: return "AUTO_VAR_TEST__S2";
            case StateId.META_EXPANSIONS: return "META_EXPANSIONS";
            case StateId.META_EXPANSIONS__S1: return "META_EXPANSIONS__S1";
            case StateId.META_EXPANSIONS__S2: return "META_EXPANSIONS__S2";
            case StateId.S3: return "S3";
            case StateId.S4: return "S4";
            case StateId.S5: return "S5";
            case StateId.NORMAL: return "NORMAL";
            case StateId.NORMAL__S1: return "NORMAL__S1";
            case StateId.NORMAL__S2: return "NORMAL__S2";
            case StateId.TEST6_VARS_EXPANSIONS__DECIDE: return "TEST6_VARS_EXPANSIONS__DECIDE";
            case StateId.TEST7_INITIAL_OR_HISTORY: return "TEST7_INITIAL_OR_HISTORY";
            case StateId.TEST7: return "TEST7";
            case StateId.T7__DEEP_HISTORY1: return "T7__DEEP_HISTORY1";
            case StateId.T7__DH1__SANTAS_WORKSHOP: return "T7__DH1__SANTAS_WORKSHOP";
            case StateId.T7__DH1__ALIENS_DETECTED: return "T7__DH1__ALIENS_DETECTED";
            case StateId.T7__DH1__GET_BACKUP: return "T7__DH1__GET_BACKUP";
            case StateId.T7__DH1__HERO: return "T7__DH1__HERO";
            case StateId.T7__DH1__CALL_BATMAN: return "T7__DH1__CALL_BATMAN";
            case StateId.T7__DH1__CALL_THOR: return "T7__DH1__CALL_THOR";
            case StateId.T7__DH1__LOCAL_HELP: return "T7__DH1__LOCAL_HELP";
            case StateId.T7__DH1__BUDDY_ELF: return "T7__DH1__BUDDY_ELF";
            case StateId.T7__DH1__POLAR_BEARS: return "T7__DH1__POLAR_BEARS";
            case StateId.T7__DH1__GIVE_COOKIES: return "T7__DH1__GIVE_COOKIES";
            case StateId.T7__DH1__SNOWBALL_FIGHT: return "T7__DH1__SNOWBALL_FIGHT";
            case StateId.T7__DH1__BUILD: return "T7__DH1__BUILD";
            case StateId.T7__DH1__TOOL: return "T7__DH1__TOOL";
            case StateId.T7__DH1__CIRCULAR_SAW: return "T7__DH1__CIRCULAR_SAW";
            case StateId.T7__DH1__IMPACT_DRILL: return "T7__DH1__IMPACT_DRILL";
            case StateId.T7__DH1__TOY: return "T7__DH1__TOY";
            case StateId.T7__DH1__GLOW_WORM: return "T7__DH1__GLOW_WORM";
            case StateId.T7__DH1__RACE_CAR: return "T7__DH1__RACE_CAR";
            case StateId.T7__DH1__ROBOT: return "T7__DH1__ROBOT";
            case StateId.T7__DH1__BATTLEBOT: return "T7__DH1__BATTLEBOT";
            case StateId.T7__DH1__WALL_E: return "T7__DH1__WALL_E";
            case StateId.T7__DH1__TEDDY_BEAR: return "T7__DH1__TEDDY_BEAR";
            case StateId.T7__DEEP_HISTORY2: return "T7__DEEP_HISTORY2";
            case StateId.T7__DEEP_HISTORY2__T7__STATE_0: return "T7__DEEP_HISTORY2__T7__STATE_0";
            case StateId.T7__DEEP_HISTORY2__T7__STATE_1: return "T7__DEEP_HISTORY2__T7__STATE_1";
            case StateId.T7__DEEP_HISTORY2__T7__STATE_2: return "T7__DEEP_HISTORY2__T7__STATE_2";
            case StateId.T7__DEEP_HISTORY2__T7__STATE_6: return "T7__DEEP_HISTORY2__T7__STATE_6";
            case StateId.T7__DEEP_HISTORY2__T7__STATE_9: return "T7__DEEP_HISTORY2__T7__STATE_9";
            case StateId.T7__DEEP_HISTORY2__T7__STATE_3: return "T7__DEEP_HISTORY2__T7__STATE_3";
            case StateId.T7__DEEP_HISTORY3: return "T7__DEEP_HISTORY3";
            case StateId.T7__DEEP_HISTORY3__T7__STATE_0: return "T7__DEEP_HISTORY3__T7__STATE_0";
            case StateId.T7__DEEP_HISTORY3__T7__STATE_1: return "T7__DEEP_HISTORY3__T7__STATE_1";
            case StateId.T7__DEEP_HISTORY3__T7__STATE_2: return "T7__DEEP_HISTORY3__T7__STATE_2";
            case StateId.T7__DEEP_HISTORY3__T7__STATE_6: return "T7__DEEP_HISTORY3__T7__STATE_6";
            case StateId.T7__DEEP_HISTORY3__T7__STATE_9: return "T7__DEEP_HISTORY3__T7__STATE_9";
            case StateId.T7__DEEP_HISTORY3__T7__STATE_3: return "T7__DEEP_HISTORY3__T7__STATE_3";
            case StateId.T7__HISTORY1: return "T7__HISTORY1";
            case StateId.T7__H1__OFF: return "T7__H1__OFF";
            case StateId.T7__H1__OFF1: return "T7__H1__OFF1";
            case StateId.T7__H1__OFF2: return "T7__H1__OFF2";
            case StateId.T7__H1__OFF3: return "T7__H1__OFF3";
            case StateId.T7__H1__ON: return "T7__H1__ON";
            case StateId.T7__H1__ON1: return "T7__H1__ON1";
            case StateId.T7__H1__ON2: return "T7__H1__ON2";
            case StateId.T7__H1__ON3: return "T7__H1__ON3";
            case StateId.T7__INITIAL1: return "T7__INITIAL1";
            case StateId.T7__INITIAL1__PARENT: return "T7__INITIAL1__PARENT";
            case StateId.T7__INITIAL1__G: return "T7__INITIAL1__G";
            case StateId.T7__INITIAL1__G_S1: return "T7__INITIAL1__G_S1";
            case StateId.T7__INITIAL1__G_S2: return "T7__INITIAL1__G_S2";
            case StateId.T7__INITIAL1__G_S3: return "T7__INITIAL1__G_S3";
            case StateId.T7__INITIAL1__S1: return "T7__INITIAL1__S1";
            case StateId.TEST7_DECIDE: return "TEST7_DECIDE";
            case StateId.TEST8_ENTRY_CHOICE: return "TEST8_ENTRY_CHOICE";
            case StateId.TEST8_ROOT: return "TEST8_ROOT";
            case StateId.TEST8_G: return "TEST8_G";
            case StateId.TEST8_G_S1: return "TEST8_G_S1";
            case StateId.TEST8_G_S2: return "TEST8_G_S2";
            case StateId.TEST8_G_S3: return "TEST8_G_S3";
            case StateId.TEST8_S1: return "TEST8_S1";
            case StateId.TEST9_EXIT_CHOICE: return "TEST9_EXIT_CHOICE";
            case StateId.TEST9_DECIDE: return "TEST9_DECIDE";
            case StateId.TEST9_ROOT: return "TEST9_ROOT";
            case StateId.TEST9_G_S1: return "TEST9_G_S1";
            case StateId.TEST9_G_S2: return "TEST9_G_S2";
            case StateId.TEST9_G_S3: return "TEST9_G_S3";
            case StateId.TEST9_G_S4: return "TEST9_G_S4";
            case StateId.TEST9_S1: return "TEST9_S1";
            case StateId.TEST9_S1_1: return "TEST9_S1_1";
            case StateId.TEST9A_ROOT: return "TEST9A_ROOT";
            case StateId.TEST9A_S1: return "TEST9A_S1";
            case StateId.TEST9A_S1_1: return "TEST9A_S1_1";
            case StateId.TEST9B_ROOT: return "TEST9B_ROOT";
            case StateId.TEST9B_ROOT__A1: return "TEST9B_ROOT__A1";
            case StateId.TEST9B_ROOT__A2: return "TEST9B_ROOT__A2";
            case StateId.TEST9B_ROOT__A3: return "TEST9B_ROOT__A3";
            case StateId.TEST9B_ROOT__A4: return "TEST9B_ROOT__A4";
            case StateId.TEST9B_ROOT__B1: return "TEST9B_ROOT__B1";
            case StateId.TEST9B_ROOT__B2: return "TEST9B_ROOT__B2";
            case StateId.TEST9B_ROOT__B3: return "TEST9B_ROOT__B3";
            case StateId.TEST9B_ROOT__B4: return "TEST9B_ROOT__B4";
            case StateId.UNREACHABLE: return "UNREACHABLE";
            case StateId.USELESS: return "USELESS";
            default: return "?";
        }
    }
    
    // Thread safe.
    public static string EventIdToString(EventId id)
    {
        switch (id)
        {
            case EventId.DO: return "DO";
            case EventId.EV1: return "EV1";
            case EventId.EV10: return "EV10";
            case EventId.EV2: return "EV2";
            case EventId.EV3: return "EV3";
            case EventId.EV4: return "EV4";
            case EventId.EV5: return "EV5";
            case EventId.EV6: return "EV6";
            case EventId.EV7: return "EV7";
            case EventId.EV8: return "EV8";
            case EventId.EV9: return "EV9";
            case EventId.EVBACK: return "EVBACK";
            case EventId.EVCLOSE: return "EVCLOSE";
            case EventId.EVOPEN: return "EVOPEN";
            case EventId.EVSTEP: return "EVSTEP";
            default: return "?";
        }
    }
    
    public static bool ____GilData_EchoStringBool(string toEcho) { return true; }
    public static void ____GilData_EchoStringVoid(string toEcho) { }
    public static bool ____GilData_VarArgsToBool(params object[] args) { return true; }
    public static void ____GilData_UnusedVar(object unusedVar) { }
}
